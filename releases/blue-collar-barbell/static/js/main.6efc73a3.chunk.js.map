{"version":3,"sources":["components/meet-setup/ColorPicker.module.scss","components/lifting/LiftingView.module.scss","components/lifting/TopBar.module.scss","components/results/ResultsView.module.scss","components/lifting/BarLoad.module.scss","components/lifting/LiftingTable.module.scss","components/lifting/LiftingFooter.module.scss","serviceWorker.js","reducers/versionsReducer.ts","versions.ts","types/utils.ts","reducers/languageReducer.ts","logic/date.ts","logic/units.ts","constants/plateColors.ts","reducers/meetReducer.ts","logic/entry.ts","reducers/registrationReducer.ts","reducers/liftingReducer.ts","reducers/rootReducer.ts","store.ts","translations/locales/index.js","components/translations/OpenLifterIntlProvider.tsx","actions/globalActions.ts","components/home/NewMeetModal.tsx","components/ErrorModal.tsx","containers/HomeContainer.tsx","components/ValidatedInput.tsx","actions/meetSetupActions.ts","components/meet-setup/MeetDate.tsx","logic/parsers.ts","components/meet-setup/MeetLength.tsx","components/meet-setup/PlatformCount.tsx","components/meet-setup/PlatformCounts.tsx","components/meet-setup/AutoFillRules.tsx","components/meet-setup/DivisionSelect.tsx","components/meet-setup/WeightClassesSelect.tsx","components/meet-setup/BarAndCollarsWeightKg.tsx","components/meet-setup/ColorPicker.tsx","components/meet-setup/Plates.tsx","components/meet-setup/MeetSetup.tsx","containers/MeetSetupContainer.tsx","components/registration/LifterTable.tsx","validation/iso8601Date.ts","actions/registrationActions.ts","components/registration/LifterRow.tsx","components/registration/NewButton.tsx","logic/export/csv.ts","logic/import/registration-csv.ts","logic/export/registrations.ts","components/registration/RegistrationView.tsx","containers/RegistrationContainer.tsx","components/weighins/LifterTable.tsx","actions/liftingActions.ts","components/weighins/WeightInput.tsx","validation/positiveInteger.ts","components/weighins/LifterRow.tsx","components/weighins/WeighinsView.tsx","containers/WeighinsContainer.tsx","components/lifting/TopBar.tsx","logic/barLoad.ts","components/lifting/BarLoad.tsx","components/lifting/LeftCard.tsx","components/lifting/AttemptInput.tsx","logic/coefficients/dots.ts","logic/coefficients/foster-mcculloch.ts","logic/coefficients/schwartzmalone.ts","logic/coefficients/wilks.ts","logic/coefficients/glossbrenner.ts","logic/coefficients/ipf.ts","logic/coefficients/reshel.ts","logic/coefficients/coefficients.ts","logic/coefficients/bodyweight-multiple.ts","logic/coefficients/nasa.ts","logic/liftingOrder.ts","logic/divisionPlace.ts","components/lifting/LiftingTable.tsx","components/lifting/LiftingFooter.tsx","components/lifting/ColumnWidth.tsx","components/lifting/LiftingView.tsx","containers/LiftingContainer.tsx","components/flight-order/OneFlightOrder.tsx","components/flight-order/OneCategory.tsx","components/flight-order/FlightOrderView.tsx","containers/FlightOrderContainer.tsx","components/results/ByDivision.tsx","logic/pointsPlace.ts","components/results/ByPoints.tsx","logic/export/oplcsv.ts","logic/export/usapl.ts","components/results/ResultsView.tsx","containers/ResultsContainer.tsx","components/debug/RandomizeHelpers.ts","components/debug/RandomizeMeetSetup.tsx","components/debug/RandomizeRegistration.tsx","components/debug/RandomizeWeighins.tsx","components/debug/StateTools.tsx","containers/DebugContainer.tsx","containers/AboutContainer.tsx","containers/RootContainer.tsx","components/Navigation.js","App.tsx","index.tsx","components/lifting/LeftCard.module.scss","components/flight-order/OneFlightOrder.module.scss"],"names":["module","exports","swatch","color","popover","liftingView","middleParentContainer","leftCardContainer","rightCardContainer","topBar","lifterName","info","controlPanel","dropdown","container","rackInfo","bar","kg50","kg25","kg20","kg15","kg10","kg5","kg2p5","kg1p25","kg1","kg0p75","kg0p5","kg0p25","lbs100","lbs55","lbs45","lbs35","lbs25","lbs10","lbs5","lbs2p5","lbs1p25","lbs0p5","collar","error","liftingtable","textCell","smallCell","spacerCell","activeColumn","attemptInputCell","current","goodlift","nolift","attemptInput","footerplusimage","bluecollarbarbelldiv","footer","leftControls","rightControls","fullscreen","goodLift","noLift","selector","Boolean","window","location","hostname","match","initialState","stateVersion","releaseVersion","process","assertString","value","result","isString","Error","concat","assertFlight","flight","localDateToIso8601","d","year","getFullYear","month","getMonth","day","getDate","yearStr","String","monthStr","length","dayStr","kg2lbs","kg","lbs2kg","lbs","displayWeight","weight","s","toFixed","replace","indexOf","endsWith","slice","displayWeightOnePlace","PlateColors","PLATE_DEFAULT_BLACK","PLATE_DEFAULT_WHITE","PLATE_DEFAULT_BLUE","PLATE_DEFAULT_GREEN","PLATE_DEFAULT_GRAY","PLATE_DEFAULT_RED","PLATE_DEFAULT_YELLOW","PLATE_DEFAULT_ORANGE","PLATE_DEFAULT_PINK","PLATE_DEFAULT_PURPLE","defaultPlatesKg","weightKg","pairCount","defaultPlatesLbs","name","country","state","city","federation","date","Date","lengthDays","platformsOnDays","divisions","weightClassesKgMen","weightClassesKgWomen","weightClassesKgMx","formula","ageCoefficients","combineSleevesAndWraps","allow4thAttempts","inKg","showAlternateUnits","squatBarAndCollarsWeightKg","benchBarAndCollarsWeightKg","deadliftBarAndCollarsWeightKg","plates","getWeightClassStr","classes","bodyweightKg","i","wtclsStrKg2Lbs","kgcls","shw","asNumber","Number","truncated","Math","floor","getWeightClassLbsStr","newDefaultEntry","id","platform","sex","birthDate","age","intendedWeightClassKg","equipment","events","lot","memberId","paid","team","notes","squatRackInfo","benchRackInfo","squatKg","benchKg","deadliftKg","squatStatus","benchStatus","deadliftStatus","getAge","entry","meetDate","_meetDate$split$map","split","map","_meetDate$split$map2","Object","slicedToArray","my","mm","md","_entry$birthDate$spli","_entry$birthDate$spli2","by","bm","bd","years","getBest5SquatKg","best3SquatKg","max","getBest5BenchKg","best3BenchKg","getBest5DeadliftKg","best3DeadliftKg","getProjectedTotalKg","best3Squat","best3Bench","best3Dead","getProjectedEventTotalKg","event","includes","getBest3SquatKg","getBest3BenchKg","getBest3DeadliftKg","getFinalTotalKg","getFinalEventTotalKg","getLiftersOnDay","entries","filter","liftToAttemptFieldName","lift","liftToStatusFieldName","entryHasLifted","liftingPresentOnPlatform","getWhetherPlatformsHaveLifted","ret","platformsOnDay","acc","push","nextEntryId","lookup","overrideAttempt","overrideEntryId","columnDivisionWidthPx","combineReducers","versions","arguments","undefined","action","type","store","language","meet","objectSpread","numDays","diff","newPlatformsOnDays","count","defaultPlates","defaultBar","classesKg","index","findIndex","p","newPlates","changes","newState","assign","registration","obj","overwriteDefaults","newEntry","previousEntry","entryId","item","attemptOneIndexed","field","newEntries","oldEntry","newarray","newfields","status","success","fieldStatus","platformEntries","e","lifting","attempt","combined","persistConfig","key","storage","persistedReducer","persistReducer","rootReducer","locales","es","eo","OpenLifterIntlProvider","this","props","messages","translations","react","index_es","locale","children","React","connect","overwriteStore","NewMeetModal","react_default","a","createElement","Modal_default","show","onHide","close","Header","closeButton","Title","Body","Footer","Button_default","onClick","variant","lib","to","Component","dispatch","defaultStore","ErrorModal","title","centerConsole","maxWidth","margin","backgroundColor","HomeContainer","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleLoadClick","loadhelper","document","getElementById","click","handleNewClick","setState","showNewMeetModal","closeConfirmModal","closeErrorModal","handleLoadFileInput","loadHelper","HTMLInputElement","files","selectedFile","rememberThis","assertThisInitialized","reader","FileReader","onload","errored","JSON","parse","target","err","readAsText","handleSaveClick","meetname","redux","stringify","blob","Blob","saveAs","renderContinueButton","block","bind","newMeetButton","wrongVersion","dataReleaseVersion","buttonMargin","marginBottom","warning","Container_default","style","home_NewMeetModal","components_ErrorModal","Row_default","Col_default","alt","src","width","height","href","rel","textAlign","marginTop","accept","display","onChange","BirthDateInput","validate","handleKeyDown","currentTarget","blur","handleChange","handleBlur","initialValue","onSuccess","validation","maybeLabel","label","Form_default","Label","Group","keepMargin","Control","placeholder","disabled","onKeyDown","onBlur","isValid","isInvalid","className","setDivisions","setLengthDays","setPlatformsOnDays","setWeightClasses","updateMeet","MeetDate","initialDate","_s$split","_s$split2","parseInt","setFullYear","iso8601ToLocalDate","FormGroup_default","react_datepicker_es","dateFormat","selected","setMeetDate","parseInteger","charcode","charCodeAt","parseSex","lower","toLowerCase","parseEquipment","startsWith","parseEvent","parseDate","pieces","MeetLength","min","step","days","PlatformCount","PlatformCounts","createPlatformInputs","inputs","meet_setup_PlatformCount","traditionalDefaults","gpcDefaults","spfDefaults","upaDefaults","usaplDefaults","uspaDefaults","wabdlDefaults","wpcDefaults","wrpfDefaults","AutoFillRules","handleSelectChange","selectedOption","handleClick","FormControl_default","as","defaultValue","marginLeft","components","DropdownIndicator","createOption","DivisionSelect","maybeUpdateRedux","objarray","actionMeta","Array","handleInputChange","inputValue","_this$state","preventDefault","newValue","toConsumableArray","division","_this$state2","Creatable_default","isMulti","menuIsOpen","onInputChange","WeightClassesSelect","isNaN","isFinite","sort","b","c","selectClassesBySex","ownProps","BarAndCollarsWeightKg","getInitialBarAndCollarsWeightKg","asNum","setBarAndCollarsWeightKg","getLiftLabel","ColorPicker","clearTimeout","timeoutId","displayColorPicker","handleClose","handleMouseLeave","setTimeout","handleMouseEnter","clientX","hex","toUpperCase","colors","values","picker","styles","cover","react_color_lib","triangle","onMouseLeave","onMouseEnter","background","Plates","validateAmountInput","widget","updateHandler","amount","isNumber","setPlateConfig","renderWeightRow","toString","meet_setup_ColorPicker","_this2","plateRows","units","Table_default","striped","size","hover","yesNoBooleanOptions","yesNoToBoolean","yesno","yesNoFromBoolean","bool","MeetSetup","validateRequiredText","Card_default","border","ValidatedInput","setMeetName","setCountry","setCity","setFederation","meet_setup_MeetDate","meet_setup_MeetLength","meet_setup_PlatformCounts","meet_setup_AutoFillRules","meet_setup_DivisionSelect","masterKey","meet_setup_WeightClassesSelect","setFormula","setAgeCoefficients","setCombineSleevesAndWraps","setAllow4thAttempts","setInKg","setShowAlternateUnits","meet_setup_BarAndCollarsWeightKg","meet_setup_Plates","join","fed","assertFormula","coefficient","assertAgeCoefficients","MeetSetupContainer","meet_setup_MeetSetup","LifterTable","renderRows","LifterRow","rowRenderer","validateIso8601Date","_pieces","onlyNumbers","newRegistration","deleteRegistration","updateRegistration","eventOptions","updateRegistrationLot","updateRegistrationMemberId","updateRegistrationBirthDate","updateRegistrationCountry","updateRegistrationState","updateRegistrationTeam","updateRegistrationInstagram","instagram","updateRegistrationNotes","selectedDay","deleteRegistrationClick","updateRegistrationDay","updateRegistrationPlatform","updateRegistrationFlight","updateRegistrationName","updateRegistrationSex","updateRegistrationDivisions","updateRegistrationEvents","updateRegistrationEquipment","assertSex","dayOptions","platformOptions","divisionOptions","selectedDivisions","selectedEvents","gridStyle","padding","react_select_esm","menuPlacement","options","isClearable","InputGroup_default","Prepend","Text","NewButton","csvString","x","trim","getSpreadsheetColumnName","alphabet","n","mod","remainder","Csv","fieldnames","rows","createClass","namelist","j","splice","removeColumnByIndex","empty","removeEmptyColumns","lines","row","headers","strRows","makeExampleRegistrationsCsv","csv","appendColumns","MANDATORY_FIELDNAMES","OPTIONAL_FIELDNAMES","loadRegistrations","iname","jname","fieldname","val","errprefix","integer","platforms","eqt","evt","makeRegistrationsCsv","fill","column","prevIndex","insertColumn","marginStyle","globalImportKind","RegistrationView","handleDownloadCsvTemplateClick","text","handleExportCsvClick","global","handleOverwriteClick","handleAppendClick","maybeError","fromString","maybeEntries","entryIds","alert","numEntries","ButtonGroup_default","registration_LifterTable","registration_NewButton","RegistrationContainer","registration_RegistrationView","inLiftingPage","renderHeader","shortStyle","enterAttempt","WeightInput","weightNum","weightStr","multipleOf","validatePositiveInteger","inclusiveMax","isInteger","updateRegistrationSquatRackInfo","updateRegistrationBenchRackInfo","updateRegistrationAge","validateAge","pos","validateRack","hasSquat","hasBench","hasDeadlift","disableSquatWeight","disableBenchWeight","disableDeadliftWeight","ageStr","weighins_WeightInput","WeighinsView","getNumDaysFromEntries","max_day","dayCards","lifters","weighins_LifterTable","WeighinsContainer","weighins_WeighinsView","LiftingHeader","currentEntryId","idx","infoBuilder","safeKg2Lbs","selectPlates","loadingKg","barAndCollarsWeightKg","loadingAny","barAndCollarsWeightAny","platesAny","sortedPlates","sideWeightKg","loading","_sortedPlates$i","weightAny","isAlreadyLoaded","findWeightFrom","startFrom","BarLoad","weightKgToStyle","weightLbsToStyle","weightLbs","weightAnyToText","renderPlates","divs","plateCount","showCounter","plate","counter","is_light","opacity","LeftCard","getBarLoadProps","fieldKg","getBarAndCollarsWeightKg","next","nextAttemptOneIndexed","weightKgText","weightLbsText","currentLoading","nextLoading","relativeTo","finger","loadedPlate","makeLoadingRelative","nextEntryName","nextBarLoad","activeCard","loadingBar","nextText","barArea","lifting_BarLoad","attemptText","AttemptInput","asKg","prevAttemptOneIndexed","prevKg","prevStatus","fixups","lastGoodValue","dotsPoly","x2","x3","dots","totalKg","dotsMen","dotsWomen","AGE_COEFFICIENTS","fosterMcCulloch","schwartz_coefficient","adjusted","pow","malone_coefficient","wilksPoly","f","x4","wilksMen","wilksWomen","glossbrenner","glossbrenner_coefficient_men","glossbrenner_coefficient_women","PARAMETERS","M","Sleeves","SBD","S","B","D","Single-ply","F","reshel","normalized","reshelMen","reshelWomen","getPoints","bodyweight_multiple","normalizedEquipment","normalizedSex","params","bw_log","log","points","ipfpoints","nasapoints","schwartzmalone","wilks","getAgeAdjustedPoints","getNextAttemptNumberForEntry","weightsKg","statuses","MAX_ATTEMPTS","compareEntriesByAttempt","aKg","bKg","orderEntriesByAttempt","getLiftingOrder","entriesInFlight","earliestAttemptOneIndexed","getActiveAttemptNumber","orderedEntries","attemptZeroIndexed","existsNextAttempt","existsPrevAttempt","byNextAttempt","byThisAttempt","byPrevAttempt","notLifting","prototype","orderEntriesForAttempt","getCurrentEntryId","nextEntryInfo","currentEntryIndex","hasAttempt","notTaken","getNextEntryInfo","categoryToKey","category","keyToCategory","getLastSuccessfulLift","getLastSuccessfulAttempt","sortByPlaceInCategory","clonedEntries","aTotal","bTotal","aLastSuccessfulLift","bLastSuccessfulLift","aLastSuccessfulLiftIndex","bLastSuccessfulLiftIndex","aLastSuccessfulAttempt","bLastSuccessfulAttempt","getEventSortOrder","ev","getEquipmentSortOrder","eq","getSexSortOrder","mapSexToClasses","men","women","mx","getAllResults","categoryMap","Map","classesForSex","weightClassStr","dividx","evidx","catEntries","get","set","results","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","_ref3","_ref2","return","catA","catB","aSex","bSex","aEvent","bEvent","aEquipment","bEquipment","aIsSHW","bIsSHW","sortCategoryResults","getProjectedResults","getFinalResults","globalFocusAttemptInputId","globalHighestAttemptInputAttempt","LiftingTable","renderBest3AttemptField","columnType","best3","lightestFailed","renderAttemptField","wStr","displayStr","lifting_AttemptInput","maybeNegative","anyPreviousAttemptTaken","currentAndHasPrevious","nextAndTookLast","meetState","renderCell","categoryResults","cell","bw","bwStr","weightClass","firstDiv","columns","cells","col","rowClassName","getColumnHeaderString","useProjected","highlightColumn","nameCell","divisionCell","liftOptions","LiftingFooter","handleDayChange","setLiftingGroup","handlePlatformChange","handleFlightChange","handleLiftChange","assertLift","handleAttemptChange","handleLifterChange","setFocusAttemptInputTimeout","elem","focus","handleGoodLift","markLift","handleNoLift","hasFullscreenElement","doc","fullscreenElement","webkitFullscreenElement","mozFullscreenElement","msFullscreenElement","exitFullscreen","webkitExitFullscreen","mozExitFullscreen","msExitFullscreen","requestFullscreen","webkitRequestFullscreen","mozRequestFullscreen","msRequestFullscreen","handleFullscreen","makeLifterOptions","lifterOptions","numPlatforms","flightOptions","flightsOnPlatform","attemptOptions","toggleReplaceTableWithWeighins","onMouseDown","MULTIPLE","ColumnWidth","fieldName","setTableInfo","ceil","pattern","LiftingView","replaceTableWithWeighins","now","rightElement","lifting_LiftingTable","marginRight","lifting_ColumnWidth","TopBar","lifting_LeftCard","lifting_LiftingFooter","entriesOnPlatform","flights","LiftingContainer","lifting_LiftingView","OneFlightOrder","getOrderBy","entriesForLift","bySquat","byBench","byDeadlift","maxRows","builder","leftDivider","header","OneCategory","sexToLabel","FlightOrderView","updateDay","updatePlatform","handlePrint","print","selectorStyle","shownEntries","knownFlights","flightOrders","_loop","flight_order_OneFlightOrder","categories","flight_order_OneCategory","FlightOrderContainer","flight_order_FlightOrderView","ByDivision","renderEntryRow","place","pointsStr","wtcls","squat","bench","deadlift","total","unit","otherUnit","alternateTotal","mapSexToLabel","renderCategoryResults","eqpstr","categoryCards","panel","meetName","sortByFormulaPlaceInCategory","indexMap","memoizedPoints","aIndex","bIndex","aPoints","bPoints","getAllRankings","sortPointsCategoryResults","ByPoints","rank","agePointsCategory","addEntriesRow","finalEventTotalKg","standardizeEquipment","exportAsOplCsv","meetCsv","makeMeetCsv","entriesCsv","squatFieldnames","benchFieldnames","deadliftFieldnames","_results$_i","makeEntriesCsv","versionStr","addDataRow","hasDL","makeBirthDate","translateEvent","exportAsUSAPLCsv","_results$i","globalMergeDay","globalMergePlatform","ResultsView","makeDayOptions","handleByChange","assertValidResultsBy","handleExportAsOplCsvClick","handleExportAsUSAPLCsvClick","handleExportPlatformClick","exportname","handleMergePlatformClick","mergePlatform","makePlatformMergeButtons","platformsHaveLifted","forms","liftedOnDay","buttons","_loop2","lifted","actionText","results_ByDivision","results_ByPoints","daySelector","fontWeight","controlCard","resultsBy","ResultsContainer","results_ResultsView","randomString","random","substr","randomInt","randomFixedPoint","fixedPoints","power","NonsenseFederations","NonsenseDivisions","RandomizeMeetSetupButton","randomizeMeetSetup","numClassesMen","numClassesWomen","classesMen","classesWomen","classesMx","numDivisions","div","age_lower","age_upper","NonsenseFirstNames","NonsenseLastNames","RandomizeRegistrationButton","deleteExistingRegistrations","generateEntries","randomizeRegistration","numLifters","sexes","equipmentSelect","divisionsUpperBound","divchooser","choice","FLIGHTCHARS","numFlights","RandomizeWeighinsButton","randomAttempt","randomizeWeighins","safety","StateTools","reInitializeRedux","localStorage","clear","reload","RandomizeMeetSetup","RandomizeRegistration","RandomizeWeighins","DebugContainer","debug_StateTools","AboutContainer","RootContainer","search","containers_HomeContainer","containers_MeetSetupContainer","containers_RegistrationContainer","containers_WeighinsContainer","containers_FlightOrderContainer","containers_LiftingContainer","containers_ResultsContainer","containers_DebugContainer","containers_AboutContainer","Navigation","Navbar_default","bg","expand","Brand","Toggle","aria-controls","Collapse","Nav_default","exact","Link","addLocaleData","App","_configureStore","createStore","applyMiddleware","thunk","persistor","persistStore","configureStore","integration_react","translations_OpenLifterIntlProvider","BrowserRouter","basename","components_Navigation","Switch","Route","path","component","rootElement","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","unregister"],"mappings":"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GAAO,SAAC9mB,EAAUd,EAAsB6nB,GACnD,GAAqB,IAAjB7nB,GAAkC,IAAZ6nB,EACxB,OAAO,EAGT,OAAQ/mB,GACN,IAAK,IACL,IAAK,KACH,OA9BC,SAAiBd,GAQtB,OAAOynB,IAPI,QACD,aACC,YACD,YACC,UAEMjnB,KAAK6C,IAAI7C,KAAKmS,IAAI3S,EAAc,KAAQ,KAuB9C8nB,CAAQ9nB,GAAgB6nB,EACjC,IAAK,IACH,OArBC,SAAmB7nB,GAQxB,OAAOynB,IAPI,UACD,aACC,YACD,YACC,SAEMjnB,KAAK6C,IAAI7C,KAAKmS,IAAI3S,EAAc,KAAQ,KAc9C+nB,CAAU/nB,GAAgB6nB,EACnC,QAEE,OAAO,ICxDPG,GAAmB,CAEvB,EACA,EACA,EACA,EACA,EAIA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KAIA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,KAEA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EACA,EAMA,KACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,KACA,KACA,MACA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,MACA,KAIA,MACA,MACA,KACA,MACA,MACA,MACA,MACA,KACA,MACA,MAEA,MACA,MACA,KACA,MACA,MACA,IACA,MACA,MACA,MACA,OAIWC,GAAkB,SAACjnB,GAC9B,OAAKV,OAAO+hB,UAAUrhB,IAAQA,GAAO,EAC5B,EAILA,EAAMgnB,GAAiBvrB,OAClB,EAGFurB,GAAiBhnB,ICnIbknB,GAAuB,SAACloB,GAEnC,IAKImoB,EAAW3nB,KAAK6C,IAAIrD,EAAc,IAEtC,OAPU,kBAOCQ,KAAK4nB,IAAID,GANT,mBACD,kBASCE,GAAqB,SAACroB,GAEjC,IAKImoB,EAAW3nB,KAAK6C,IAAIrD,EAAc,OAEtC,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ACLiG,aAAc,SAAC9R,GAAD,OAA8B6L,EAASiG,GAAa9R,KAClEwa,cAAe,SAAC7a,GAAD,OAAwBkM,EjE5Fd,SAAClM,GAC5B,MAAO,CACLkH,KAAM,iBACNlH,ciEyFgD6a,CAAc7a,KAC9DoS,cAAe,SAACtU,GAAD,OAAoBoO,EAASkG,GAActU,KAC1D4c,YAAa,SAAC9a,GAAD,OAAkBsM,EjE5GR,SAACtM,GAC1B,MAAO,CACLsH,KAAM,gBACNtH,QiEyGwC8a,CAAY9a,KACpDyS,mBAAoB,SAAC5U,EAAaiK,GAAd,OAAgCwE,EAASmG,GAAmB5U,EAAKiK,KACrF4K,iBAAkB,SAACnQ,EAAU0F,GAAX,OAAmCqE,EAASoG,GAAiBnQ,EAAK0F,OAIzEgD,CAGbmzB,ICxHIW,GAAqB,CACzB,UACA,QACA,OACA,QACA,QACA,WACA,OACA,QACA,QACA,QACA,OACA,SACA,UACA,WACA,aACA,QACA,OACA,WACA,OACA,WACA,OACA,SACA,UACA,SACA,QACA,QACA,OACA,UACA,OACA,WACA,QACA,YACA,SACA,UACA,QACA,QACA,aACA,YACA,SACA,UACA,QACA,UACA,OACA,UACA,SACA,SACA,QACA,SACA,WACA,QACA,SACA,OACA,MACA,MACA,QACA,WACA,SACA,WACA,OACA,UACA,UACA,SACA,SACA,QACA,UACA,SACA,YACA,MACA,YACA,SACA,OACA,QACA,OACA,QACA,UACA,WAGIC,GAAoB,CACxB,QACA,UACA,SACA,aACA,QACA,aACA,SACA,UACA,SACA,WACA,UACA,aACA,UACA,YACA,QACA,WACA,QACA,QACA,UACA,cACA,SACA,aACA,aACA,WACA,aACA,WACA,QACA,SACA,aACA,aACA,WACA,QACA,OACA,QACA,aACA,YACA,YACA,WACA,QACA,UACA,UACA,SACA,WACA,SACA,WACA,QACA,UACA,aACA,cACA,WACA,WACA,WACA,YACA,QACA,UACA,SACA,aACA,QACA,YACA,WACA,WACA,QACA,YACA,UACA,OACA,SACA,UAKIC,eACJ,SAAAA,EAAYx0B,GAAc,IA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","file":"static/js/main.6efc73a3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"swatch\":\"ColorPicker_swatch__2ipyO\",\"color\":\"ColorPicker_color__cXLvH\",\"popover\":\"ColorPicker_popover__3aG6z\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"liftingView\":\"LiftingView_liftingView__W3VXA\",\"middleParentContainer\":\"LiftingView_middleParentContainer__1ysAw\",\"leftCardContainer\":\"LiftingView_leftCardContainer__2banw\",\"rightCardContainer\":\"LiftingView_rightCardContainer__1sjfd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"topBar\":\"TopBar_topBar__2HsiY\",\"lifterName\":\"TopBar_lifterName__1Hu9m\",\"info\":\"TopBar_info__2Fcse\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"controlPanel\":\"ResultsView_controlPanel__J3R0v\",\"dropdown\":\"ResultsView_dropdown__2UB4b\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"BarLoad_container__2ae8O\",\"rackInfo\":\"BarLoad_rackInfo__2RVUT\",\"bar\":\"BarLoad_bar__TP6yB\",\"kg50\":\"BarLoad_kg50__i7LXH\",\"kg25\":\"BarLoad_kg25__nlLuS\",\"kg20\":\"BarLoad_kg20__3xVPK\",\"kg15\":\"BarLoad_kg15__nFGDt\",\"kg10\":\"BarLoad_kg10__2mAso\",\"kg5\":\"BarLoad_kg5__2H1CX\",\"kg2p5\":\"BarLoad_kg2p5__hc46t\",\"kg1p25\":\"BarLoad_kg1p25__2YvAd\",\"kg1\":\"BarLoad_kg1__3JT5m\",\"kg0p75\":\"BarLoad_kg0p75__3ebq8\",\"kg0p5\":\"BarLoad_kg0p5__3ehD9\",\"kg0p25\":\"BarLoad_kg0p25__1nUX-\",\"lbs100\":\"BarLoad_lbs100__VaSr7\",\"lbs55\":\"BarLoad_lbs55__TustM\",\"lbs45\":\"BarLoad_lbs45__DubJx\",\"lbs35\":\"BarLoad_lbs35__37o3u\",\"lbs25\":\"BarLoad_lbs25__35m-j\",\"lbs10\":\"BarLoad_lbs10__162Qu\",\"lbs5\":\"BarLoad_lbs5__3B-J3\",\"lbs2p5\":\"BarLoad_lbs2p5__lnKdM\",\"lbs1p25\":\"BarLoad_lbs1p25__1yMbs\",\"lbs0p5\":\"BarLoad_lbs0p5__1LZiS\",\"collar\":\"BarLoad_collar__3IXT7\",\"error\":\"BarLoad_error__1t6Re\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"liftingtable\":\"LiftingTable_liftingtable__2-Rse\",\"textCell\":\"LiftingTable_textCell__gOmZ-\",\"smallCell\":\"LiftingTable_smallCell__vwNWg\",\"spacerCell\":\"LiftingTable_spacerCell__3EnYx\",\"activeColumn\":\"LiftingTable_activeColumn__WQ704\",\"attemptInputCell\":\"LiftingTable_attemptInputCell__1YoPG\",\"current\":\"LiftingTable_current__1v05Z\",\"goodlift\":\"LiftingTable_goodlift__1v8vY\",\"nolift\":\"LiftingTable_nolift__GDNkx\",\"attemptInput\":\"LiftingTable_attemptInput__tuKcd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footerplusimage\":\"LiftingFooter_footerplusimage__eG0bt\",\"bluecollarbarbelldiv\":\"LiftingFooter_bluecollarbarbelldiv__1zFsu\",\"footer\":\"LiftingFooter_footer__2Mb6I\",\"leftControls\":\"LiftingFooter_leftControls__kesKc\",\"rightControls\":\"LiftingFooter_rightControls__mXLjl\",\"fullscreen\":\"LiftingFooter_fullscreen__1HPVI\",\"goodLift\":\"LiftingFooter_goodLift__T-O7p\",\"noLift\":\"LiftingFooter_noLift__3-y0k\",\"selector\":\"LiftingFooter_selector__1Ndtq\"};","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// See comments in src/versions.js.\n\nimport { stateVersion, releaseVersion } from \"../versions\";\nimport { OverwriteStoreAction } from \"../types/actionTypes\";\nimport { VersionsState } from \"../types/stateTypes\";\n\nconst initialState: VersionsState = {\n  stateVersion,\n  releaseVersion\n};\n\ntype Action = OverwriteStoreAction;\n\nexport default (state: VersionsState = initialState, action: Action): VersionsState => {\n  switch (action.type) {\n    case \"OVERWRITE_STORE\":\n      return action.store.versions;\n\n    default:\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Versioning for the global State object.\n//\n// Incrementing the version string breaks compatibility between implementations,\n// with the expectation that a converter will be automatically applied if possible,\n// such that a version of OpenLifter that internally uses version \"B\" can still\n// load files written in version \"A\", by means of auto-upgrading.\n//\n// This string is stored on the GlobalState as the property \"versions.stateVersion\".\n// Each save file thereby reports its own version.\nexport const stateVersion: string = \"0\";\n\n// Versioning for the OpenLifter project as a whole.\n//\n// This is safely incrementable on *releases*. Its function is exclusively to alert\n// users to \"automatic\" upgrades of the software, and it is reported explicitly\n// on the Home page.\n//\n// Changing this version does *not* represent data incompatibilities; for that,\n// please use the \"stateVersion\".\n//\n// This string is stored on the GlobalState as the property \"versions.releaseVersion\".\n//\n// It's defined by the '.env' file in the project root, which references\n// the package.json variable 'version'.\nexport const releaseVersion: string =\n  typeof process.env.REACT_APP_VERSION === \"string\" ? process.env.REACT_APP_VERSION : \"[undefined REACT_APP_VERSION]\";\n\n// Strictly-presentational representation of when the releaseVersion was changed.\n// Update this concurrently with modifying the releaseVersion.\n// This value is not stored in the state: it's purely informational.\nexport const releaseDate: string = \"2019-09-07\";\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines all the project-wide shared Redux state types in a single place.\n//\n// Because the Redux store is immutable, all types are internally prefixed\n// with the \"readonly \" covariant type, which makes them immutable.\n\nimport { FormControl, FormControlProps } from \"react-bootstrap\";\nimport { AgeCoefficients, Flight, Formula, Lift, Sex } from \"./dataTypes\";\n\n// This is purely used by the type system to raise a compile error when\n// we are trying to perform an exhaustive check (eg in a switch).\n// This allows us to have a compile time error, but also have graceful runtime fallback.\nexport function checkExhausted(value: never) {}\n\n// A workaround for bad typing of react-bootstrap. Open to better suggestions.\n// see: https://github.com/DefinitelyTyped/DefinitelyTyped/issues/16208 for more context\nexport type FormControlTypeHack = FormControlProps & FormControl & HTMLOrSVGElement;\n\n// Throws an error if value isn't a string, narrows the type if it is.\nexport function assertString(value: any): value is string {\n  const result = isString(value);\n  if (!result) {\n    throw new Error(`Expected a string, but got ${value}`);\n  }\n  return result;\n}\n\n// Convenience function to narrow a variables type down to a string\nexport function isString(value: any): value is string {\n  return typeof value === \"string\";\n}\n\n// Throws an error if value isn't a number, narrows the type if it is.\nexport function assertNumber(value: any): value is number {\n  const result = typeof value === \"number\";\n  if (!result) {\n    throw new Error(`Expected a number, but got ${value}`);\n  }\n  return result;\n}\n\n// Throws an error if value isn't a a valid flight, narrows the type if it is.\nexport function assertFlight(value: string): value is Flight {\n  const flight: Flight = value as Flight;\n  switch (flight) {\n    case \"A\":\n    case \"B\":\n    case \"C\":\n    case \"D\":\n    case \"E\":\n    case \"F\":\n    case \"G\":\n    case \"H\":\n    case \"I\":\n    case \"J\":\n    case \"K\":\n      return true;\n    default:\n      checkExhausted(flight);\n      throw new Error(`Expected a string which corresponds to a Flight, got \"${value}\"`);\n  }\n}\n\n// Throws an error if value isn't a a valid flight, narrows the type if it is.\nexport function assertSex(value: string): value is Sex {\n  const sex = value as Sex;\n  switch (sex) {\n    case \"M\":\n    case \"F\":\n    case \"Mx\":\n      return true;\n    default:\n      checkExhausted(sex);\n      throw new Error(`Expected a string which corresponds to a Sex, got \"${value}\"`);\n  }\n}\n\nexport function assertLift(value: string): value is Lift {\n  const lift = value as Lift;\n  switch (lift) {\n    case \"S\":\n    case \"B\":\n    case \"D\":\n      return true;\n    default:\n      checkExhausted(lift);\n      throw new Error(`Expected a string which corresponds to a Lift, got \"${value}\"`);\n  }\n}\n\nexport function assertAgeCoefficients(value: string): value is AgeCoefficients {\n  const coefficient = value as AgeCoefficients;\n  switch (coefficient) {\n    case \"FosterMcCulloch\":\n    case \"None\":\n      return true;\n    default:\n      checkExhausted(coefficient);\n      throw new Error(`Expected a string which corresponds to a valid AgeCoefficients, got \"${value}\"`);\n  }\n}\n\nexport function assertFormula(value: string): value is Formula {\n  const formula = value as Formula;\n  switch (formula) {\n    case \"Bodyweight Multiple\":\n    case \"Dots\":\n    case \"Glossbrenner\":\n    case \"IPF Points\":\n    case \"NASA Points\":\n    case \"Reshel\":\n    case \"Schwartz/Malone\":\n    case \"Total\":\n    case \"Wilks\":\n      return true;\n    default:\n      checkExhausted(formula);\n      throw new Error(`Expected a string which corresponds to a Formula, got \"${value}\"`);\n  }\n}\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { ChangeLanguageAction, OverwriteStoreAction } from \"../types/actionTypes\";\nimport { LanguageState } from \"../types/stateTypes\";\nimport { checkExhausted } from \"../types/utils\";\n\ntype Action = ChangeLanguageAction | OverwriteStoreAction;\n\nexport default (state: LanguageState = \"en\", action: Action): LanguageState => {\n  switch (action.type) {\n    case \"CHANGE_LANGUAGE\":\n      return action.language;\n\n    case \"OVERWRITE_STORE\":\n      return action.store.language;\n\n    default:\n      checkExhausted(action);\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines logic for working with Dates, which is trickier than you might expect:\n// the global state wants strings in YYYY-MM-DD, date objects get created from\n// strings in UTC time, and React widgets create Dates in local time.\n\nexport const iso8601ToLocalDate = (s: string): Date => {\n  const [yearStr, monthStr, dayStr] = s.split(\"-\");\n\n  const year = parseInt(yearStr, 10);\n  const month = parseInt(monthStr, 10);\n  const day = parseInt(dayStr, 10);\n\n  let d = new Date();\n  d.setFullYear(year, month - 1, day);\n  return d;\n};\n\nexport const localDateToIso8601 = (d: Date): string => {\n  const year: number = d.getFullYear();\n  const month: number = d.getMonth() + 1;\n  const day: number = d.getDate();\n\n  const yearStr = String(year);\n  let monthStr = String(month);\n  if (monthStr.length === 1) {\n    monthStr = \"0\" + monthStr;\n  }\n  let dayStr = String(day);\n  if (dayStr.length === 1) {\n    dayStr = \"0\" + dayStr;\n  }\n\n  return yearStr + \"-\" + monthStr + \"-\" + dayStr;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines operations for converting between different units, usually\n// pounds and kg.\n\nexport const kg2lbs = (kg: number): number => {\n  return kg * 2.20462262;\n};\n\nexport const lbs2kg = (lbs: number): number => {\n  return lbs / 2.20462262;\n};\n\n// Renders a weight (kg or lbs) for display, rounding to two decimal places,\n// hiding unnecessary zeros on the right.\n//\n// This rounding behavior eliminates all the visual inconsistencies of lbs->kg\n// conversion -- for example, how 112.5lbs isn't representable exactly in kg.\nexport const displayWeight = (weight: number): string => {\n  const s = weight.toFixed(2).replace(\".00\", \"\");\n\n  // If the string isn't \".00\" but has a decimal, try to chop off a zero.\n  if (s.indexOf(\".\") >= 0 && s.endsWith(\"0\")) {\n    return s.slice(0, -1);\n  }\n\n  // Otherwise all the digits are necessary.\n  return s;\n};\n\n// Renders a weight (kg or lbs) for display, rounding to one decimal place.\n// hiding unnecessary zeros on the right.\nexport const displayWeightOnePlace = (weight: number): string => {\n  return weight.toFixed(1).replace(\".0\", \"\");\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Color codes must be in upper-case to match the ColorPicker output.\nexport const PlateColors = {\n  PLATE_DEFAULT_BLACK: \"#000000\",\n  PLATE_DEFAULT_WHITE: \"#FFFFFF\",\n  PLATE_DEFAULT_BLUE: \"#4990E2\",\n  PLATE_DEFAULT_GREEN: \"#2AB003\",\n  PLATE_DEFAULT_GRAY: \"#575757\",\n  PLATE_DEFAULT_RED: \"#FF0000\",\n  PLATE_DEFAULT_YELLOW: \"#FFEF2A\",\n  PLATE_DEFAULT_ORANGE: \"#F25A1D\",\n  PLATE_DEFAULT_PINK: \"#E81FA5\",\n  PLATE_DEFAULT_PURPLE: \"#9B16F2\"\n};\n\nexport type PlateColorsType = keyof typeof PlateColors;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { localDateToIso8601 } from \"../logic/date\";\nimport { kg2lbs, lbs2kg, displayWeight } from \"../logic/units\";\nimport { PlateColors } from \"../constants/plateColors\";\n\nimport { MeetSetupAction, OverwriteStoreAction } from \"../types/actionTypes\";\nimport { Plate } from \"../types/dataTypes\";\nimport { MeetState } from \"../types/stateTypes\";\nimport { checkExhausted } from \"../types/utils\";\n\nconst defaultPlatformsOnDay = 1;\n\nconst defaultBarAndCollarsWeightKg = 25; // Assuming metal 2.5kg collars.\nconst defaultBarAndCollarsWeightLbs = 45; // Assuming plastic collars.\n\n// Default kg plates, allowing for increments of 0.5kg.\nconst defaultPlatesKg: Array<Plate> = [\n  { weightKg: 50, pairCount: 0, color: PlateColors.PLATE_DEFAULT_GREEN },\n  { weightKg: 25, pairCount: 8, color: PlateColors.PLATE_DEFAULT_RED },\n  { weightKg: 20, pairCount: 1, color: PlateColors.PLATE_DEFAULT_BLUE },\n  { weightKg: 15, pairCount: 1, color: PlateColors.PLATE_DEFAULT_YELLOW },\n  { weightKg: 10, pairCount: 1, color: PlateColors.PLATE_DEFAULT_GREEN },\n  { weightKg: 5, pairCount: 1, color: PlateColors.PLATE_DEFAULT_BLACK },\n  { weightKg: 2.5, pairCount: 1, color: PlateColors.PLATE_DEFAULT_BLACK },\n  { weightKg: 1.25, pairCount: 1, color: PlateColors.PLATE_DEFAULT_BLACK },\n  { weightKg: 1, pairCount: 1, color: PlateColors.PLATE_DEFAULT_BLUE },\n  { weightKg: 0.75, pairCount: 1, color: PlateColors.PLATE_DEFAULT_RED },\n  { weightKg: 0.5, pairCount: 1, color: PlateColors.PLATE_DEFAULT_GREEN },\n  { weightKg: 0.25, pairCount: 1, color: PlateColors.PLATE_DEFAULT_BLUE }\n];\n\n// Default lbs plates, allowing for increments of 1lb.\nconst defaultPlatesLbs: Array<Plate> = [\n  { weightKg: lbs2kg(100), pairCount: 0, color: PlateColors.PLATE_DEFAULT_GREEN },\n  { weightKg: lbs2kg(55), pairCount: 0, color: PlateColors.PLATE_DEFAULT_RED },\n  { weightKg: lbs2kg(45), pairCount: 8, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(35), pairCount: 0, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(25), pairCount: 1, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(10), pairCount: 2, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(5), pairCount: 1, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(2.5), pairCount: 1, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(1.25), pairCount: 1, color: PlateColors.PLATE_DEFAULT_GRAY },\n  { weightKg: lbs2kg(0.5), pairCount: 2, color: PlateColors.PLATE_DEFAULT_GRAY }\n];\n\nconst initialState: MeetState = {\n  // Sanction information.\n  name: \"\",\n  country: \"\",\n  state: \"\",\n  city: \"\",\n  federation: \"\",\n  date: localDateToIso8601(new Date()),\n  lengthDays: 1,\n  platformsOnDays: [defaultPlatformsOnDay],\n\n  // Competition Rules.\n  divisions: [],\n  weightClassesKgMen: [],\n  weightClassesKgWomen: [],\n  weightClassesKgMx: [],\n  formula: \"Wilks\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: true,\n\n  // Weights and Loading Setup.\n  inKg: false,\n  showAlternateUnits: false,\n  squatBarAndCollarsWeightKg: lbs2kg(defaultBarAndCollarsWeightLbs),\n  benchBarAndCollarsWeightKg: lbs2kg(defaultBarAndCollarsWeightLbs),\n  deadliftBarAndCollarsWeightKg: lbs2kg(defaultBarAndCollarsWeightLbs),\n  plates: defaultPlatesLbs\n};\n\n// Given a sorted list of weight classes (in kg) and a bodyweight (in kg),\n// return a string describing the weight class.\nexport const getWeightClassStr = (classes: Array<number>, bodyweightKg: number): string => {\n  if (bodyweightKg === 0) return \"\";\n  if (classes.length === 0) return \"\";\n\n  for (let i = 0; i < classes.length; i++) {\n    if (bodyweightKg <= classes[i]) {\n      return displayWeight(classes[i]);\n    }\n  }\n  return displayWeight(classes[classes.length - 1]) + \"+\";\n};\n\n// Converts a kg weightclass to pounds.\n//\n// For example, the 90kg class is technically 198.41lbs,\n// but this will return \"198\".\nexport const wtclsStrKg2Lbs = (kgcls: string): string => {\n  const shw: boolean = kgcls.endsWith(\"+\");\n  const asNumber = Number(kgcls.replace(\"+\", \"\"));\n\n  // Convert to pounds and round down.\n  let truncated = Math.floor(kg2lbs(asNumber));\n\n  // This works for everything but the 183 class, which\n  // rounds down to 182.\n  if (truncated === 182) {\n    truncated = 183;\n  }\n\n  return shw ? String(truncated) + \"+\" : String(truncated);\n};\n\n// Given a sorted list of weight classes (in kg) and a bodyweight (in kg),\n// return a string describing the weight class.\n//\n// This is a separate method because it turns out that many exact translations\n// of kilo values are not what the audience expects for traditionally-reported\n// pounds classes. So a bunch of rounding must occur.\nexport const getWeightClassLbsStr = (classes: Array<number>, bodyweightKg: number): string => {\n  if (bodyweightKg === 0) return \"\";\n  if (classes.length === 0) return \"\";\n\n  for (let i = 0; i < classes.length; i++) {\n    if (bodyweightKg <= classes[i]) {\n      return wtclsStrKg2Lbs(String(classes[i]));\n    }\n  }\n  return wtclsStrKg2Lbs(String(classes[classes.length - 1])) + \"+\";\n};\n\ntype Action = MeetSetupAction | OverwriteStoreAction;\n\nexport default (state: MeetState = initialState, action: Action): MeetState => {\n  switch (action.type) {\n    case \"SET_MEET_NAME\":\n      return { ...state, name: action.name };\n\n    case \"SET_FORMULA\":\n      return { ...state, formula: action.formula };\n\n    case \"SET_FEDERATION\":\n      return { ...state, federation: action.federation };\n\n    case \"SET_DIVISIONS\":\n      return { ...state, divisions: action.divisions };\n\n    case \"SET_MEET_DATE\":\n      return { ...state, date: action.date };\n\n    case \"SET_LENGTH_DAYS\": {\n      const numDays = Number(action.length);\n\n      if (numDays >= state.platformsOnDays.length) {\n        const diff = numDays - state.platformsOnDays.length;\n\n        let newPlatformsOnDays: Array<number> = state.platformsOnDays.slice();\n        for (let i = 0; i < diff; i++) {\n          newPlatformsOnDays.push(defaultPlatformsOnDay);\n        }\n\n        return { ...state, lengthDays: numDays, platformsOnDays: newPlatformsOnDays };\n      }\n      return { ...state, lengthDays: numDays };\n    }\n\n    case \"SET_PLATFORM_COUNT\": {\n      const day = Number(action.day);\n      const count = Number(action.count);\n\n      let newPlatformsOnDays: Array<number> = state.platformsOnDays.slice();\n      newPlatformsOnDays[day - 1] = count;\n      return { ...state, platformsOnDays: newPlatformsOnDays };\n    }\n\n    case \"SET_IN_KG\": {\n      // Changing the units also changes the loading, so re-initialize from defaults.\n      const defaultPlates = action.inKg ? defaultPlatesKg : defaultPlatesLbs;\n      const defaultBar = action.inKg ? defaultBarAndCollarsWeightKg : lbs2kg(defaultBarAndCollarsWeightLbs);\n      return {\n        ...state,\n        inKg: action.inKg,\n        plates: defaultPlates,\n        squatBarAndCollarsWeightKg: defaultBar,\n        benchBarAndCollarsWeightKg: defaultBar,\n        deadliftBarAndCollarsWeightKg: defaultBar\n      };\n    }\n\n    case \"SET_WEIGHTCLASSES\": {\n      const sex = action.sex;\n      const classesKg = action.classesKg;\n      switch (sex) {\n        case \"M\":\n          return { ...state, weightClassesKgMen: classesKg };\n        case \"F\":\n          return { ...state, weightClassesKgWomen: classesKg };\n        case \"Mx\":\n          return { ...state, weightClassesKgMx: classesKg };\n        default:\n          checkExhausted(sex);\n          return state;\n      }\n    }\n\n    case \"SET_BAR_AND_COLLARS_WEIGHT_KG\": {\n      switch (action.lift) {\n        case \"S\":\n          return { ...state, squatBarAndCollarsWeightKg: action.weightKg };\n        case \"B\":\n          return { ...state, benchBarAndCollarsWeightKg: action.weightKg };\n        case \"D\":\n          return { ...state, deadliftBarAndCollarsWeightKg: action.weightKg };\n        default:\n          checkExhausted(action.lift);\n          return state;\n      }\n    }\n\n    case \"SET_PLATE_CONFIG\": {\n      const { weightKg, pairCount, color } = action;\n\n      // Find the index of the object in the platesOnSide array by comparing weights.\n      const index = state.plates.findIndex(p => p.weightKg === weightKg);\n\n      // Clone the array.\n      let newPlates: Array<Plate> = state.plates.slice();\n\n      // Replace with a new object in the new array.\n      newPlates[index] = { weightKg, pairCount, color };\n\n      return { ...state, plates: newPlates };\n    }\n\n    case \"UPDATE_MEET\": {\n      const changes = action.changes;\n\n      // Make a new MeetState with just the changes overwritten.\n      let newState = Object.assign({}, state);\n      return Object.assign(newState, changes);\n    }\n\n    case \"OVERWRITE_STORE\":\n      return action.store.meet;\n\n    default:\n      checkExhausted(action);\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines logic for creating and working with Entry objects.\n\nimport { Entry, Lift, Event, FieldKg, FieldStatus } from \"../types/dataTypes\";\nimport { checkExhausted } from \"../types/utils\";\n\n// Length of {squat,bench,deadlift}{Kg,Status} in each Entry.\nexport const MAX_ATTEMPTS = 5;\n\nexport const newDefaultEntry = (id: number): Entry => {\n  return {\n    // Bookkeeping internal information for OpenLifter.\n    id: id, // The global unique ID of this registration.\n\n    // Information about when the lifter is scheduled to lift.\n    day: 1, // The day on which the lifter is lifting.\n    platform: 1, // The platform on which the lifter is lifting.\n    flight: \"A\", // The flight in which the lifter is lifting.\n\n    // Information about the lifter themselves.\n    name: \"\", // The lifter's name.\n    sex: \"M\", // The lifter's sex.\n    birthDate: \"\", // The lifter's birthdate (YYYY-MM-DD).\n    age: 0, // The lifter's age in years\n    country: \"\", // Lifter's home country, or blank.\n    state: \"\", // Lifter's home state, or blank.\n    intendedWeightClassKg: \"\", // The weightclass for which the lifter registered.\n    equipment: \"Sleeves\", // The equipment category for which the lifter registered.\n    divisions: [], // A list of divisions the lifter entered.\n    events: [], // A list of events the lifter entered.\n\n    // Metadata about the lifter, assigned by the meet director.\n    lot: 0, // The lifter's lot number, for breaking ties in lifting order.\n    memberId: \"\", // Optional federation MemberID, for reporting in results.\n    paid: false, // Used by the meet director for tracking whether the lifter paid.\n    team: \"\", // Optional. Only used in the final results export.\n    notes: \"\", // Free-form text for the meet director to use as a scratchpad.\n\n    // Information added on the \"Weigh-ins\" page.\n    // But we might as well track it in this object.\n    bodyweightKg: 0.0,\n    squatRackInfo: \"\", // A freeform string for the benefit of the loaders.\n    benchRackInfo: \"\", // A freeform string for the benefit of the loaders.\n\n    // Lifting information. Weights always stored internally in kg.\n    squatKg: [0.0, 0.0, 0.0, 0.0, 0.0],\n    benchKg: [0.0, 0.0, 0.0, 0.0, 0.0],\n    deadliftKg: [0.0, 0.0, 0.0, 0.0, 0.0],\n\n    // Lifting information, success state:\n    //  -1 => No Lift.\n    //   0 => Not Yet Done.\n    //   1 => Good Lift.\n    //\n    // Note that this system has the property where corresponding (kg*status)\n    // produces the SquatXKg as expected by the main OpenPowerlifting CSV format.\n    squatStatus: [0, 0, 0, 0, 0],\n    benchStatus: [0, 0, 0, 0, 0],\n    deadliftStatus: [0, 0, 0, 0, 0]\n  };\n};\n\n// Gets the lifter's age, possibly by inferring it from birthDate.\n// If the age couldn't be determined, returns 0.\nexport const getAge = (entry: Entry, meetDate: string): number => {\n  // If the user overrode the Age manually, just take that.\n  if (entry.age > 0) return entry.age;\n\n  // If no birthDate is provided, nothing more can be done.\n  if (entry.birthDate === \"\") return 0;\n\n  // Infer the age given {meetDate, birthDate, day}.\n  let [my, mm, md] = meetDate.split(\"-\").map(s => Number(s));\n  let [by, bm, bd] = entry.birthDate.split(\"-\").map(s => Number(s));\n\n  // Advance the day counter if necessary.\n  // FIXME: This logic assumes that each month has exactly 31 days.\n  if (entry.day > 1) {\n    md += entry.day - 1;\n    if (md > 31) {\n      md -= 31;\n      mm += 1;\n    }\n    if (mm > 12) {\n      md -= 12;\n      my += 1;\n    }\n  }\n\n  const years = my - by;\n  if (years <= 0) return 0;\n\n  // If their birthday occurred in the most recent year, just diff years.\n  if (bm < mm || (bm == mm && bd <= md)) {\n    return years;\n  }\n\n  // Otherwise, their birthday did not occur yet, so this year doesn't count.\n  return years - 1;\n};\n\n// Gets the best squat, including extra attempts that don't count for the total.\nexport const getBest5SquatKg = (entry: Entry): number => {\n  let best3SquatKg = 0.0;\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    if (entry.squatStatus[i] === 1) {\n      best3SquatKg = Math.max(best3SquatKg, entry.squatKg[i]);\n    }\n  }\n  return best3SquatKg;\n};\n\n// Gets the best bench, including extra attempts that don't count for the total.\nexport const getBest5BenchKg = (entry: Entry): number => {\n  let best3BenchKg = 0.0;\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    if (entry.benchStatus[i] === 1) {\n      best3BenchKg = Math.max(best3BenchKg, entry.benchKg[i]);\n    }\n  }\n  return best3BenchKg;\n};\n\n// Gets the best deadlift, including extra attempts that don't count for the total.\nexport const getBest5DeadliftKg = (entry: Entry): number => {\n  let best3DeadliftKg = 0.0;\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    if (entry.deadliftStatus[i] === 1) {\n      best3DeadliftKg = Math.max(best3DeadliftKg, entry.deadliftKg[i]);\n    }\n  }\n  return best3DeadliftKg;\n};\n\n// The ProjectedTotal optimistically assumes that lifters will get *first* attempts\n// that have not yet been taken. It is used for calculating a total while lifters\n// are still squatting and benching.\n//\n// 2nd and 3rd attempts are treated normally, where they only count toward the\n// total if they have been successful.\nexport const getProjectedTotalKg = (entry: Entry): number => {\n  let best3Squat = 0.0;\n  if (entry.squatStatus[0] >= 0) best3Squat = Math.max(best3Squat, entry.squatKg[0]);\n  if (entry.squatStatus[1] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[1]);\n  if (entry.squatStatus[2] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[2]);\n\n  let best3Bench = 0.0;\n  if (entry.benchStatus[0] >= 0) best3Bench = Math.max(best3Bench, entry.benchKg[0]);\n  if (entry.benchStatus[1] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[1]);\n  if (entry.benchStatus[2] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[2]);\n\n  let best3Dead = 0.0;\n  if (entry.deadliftStatus[0] >= 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[0]);\n  if (entry.deadliftStatus[1] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[1]);\n  if (entry.deadliftStatus[2] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[2]);\n\n  // If there was no attempted success for a single lift, return zero.\n  if (best3Squat === 0 && entry.squatStatus[0] === -1) return 0.0;\n  if (best3Bench === 0 && entry.benchStatus[0] === -1) return 0.0;\n  if (best3Dead === 0 && entry.deadliftStatus[0] === -1) return 0.0;\n\n  return best3Squat + best3Bench + best3Dead;\n};\n\nexport const getProjectedEventTotalKg = (entry: Entry, event: Event): number => {\n  let best3Squat = 0.0;\n  if (event.includes(\"S\")) {\n    if (entry.squatStatus[0] >= 0) best3Squat = Math.max(best3Squat, entry.squatKg[0]);\n    if (entry.squatStatus[1] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[1]);\n    if (entry.squatStatus[2] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[2]);\n  }\n\n  let best3Bench = 0.0;\n  if (event.includes(\"B\")) {\n    if (entry.benchStatus[0] >= 0) best3Bench = Math.max(best3Bench, entry.benchKg[0]);\n    if (entry.benchStatus[1] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[1]);\n    if (entry.benchStatus[2] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[2]);\n  }\n\n  let best3Dead = 0.0;\n  if (event.includes(\"D\")) {\n    if (entry.deadliftStatus[0] >= 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[0]);\n    if (entry.deadliftStatus[1] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[1]);\n    if (entry.deadliftStatus[2] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[2]);\n  }\n\n  // If there was no attempted success for a single lift, return zero.\n  if (best3Squat === 0 && entry.squatStatus[0] === -1) return 0.0;\n  if (best3Bench === 0 && entry.benchStatus[0] === -1) return 0.0;\n  if (best3Dead === 0 && entry.deadliftStatus[0] === -1) return 0.0;\n\n  return best3Squat + best3Bench + best3Dead;\n};\n\nexport const getBest3SquatKg = (entry: Entry): number => {\n  let best3Squat = 0.0;\n  if (entry.squatStatus[0] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[0]);\n  if (entry.squatStatus[1] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[1]);\n  if (entry.squatStatus[2] > 0) best3Squat = Math.max(best3Squat, entry.squatKg[2]);\n  return best3Squat;\n};\n\nexport const getBest3BenchKg = (entry: Entry): number => {\n  let best3Bench = 0.0;\n  if (entry.benchStatus[0] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[0]);\n  if (entry.benchStatus[1] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[1]);\n  if (entry.benchStatus[2] > 0) best3Bench = Math.max(best3Bench, entry.benchKg[2]);\n  return best3Bench;\n};\n\nexport const getBest3DeadliftKg = (entry: Entry): number => {\n  let best3Dead = 0.0;\n  if (entry.deadliftStatus[0] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[0]);\n  if (entry.deadliftStatus[1] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[1]);\n  if (entry.deadliftStatus[2] > 0) best3Dead = Math.max(best3Dead, entry.deadliftKg[2]);\n  return best3Dead;\n};\n\n// The Total is the sum of best of the first 3 attempts of each lift.\nexport const getFinalTotalKg = (entry: Entry): number => {\n  const best3Squat = getBest3SquatKg(entry);\n  const best3Bench = getBest3BenchKg(entry);\n  const best3Dead = getBest3DeadliftKg(entry);\n\n  // If there was no attempted success for a single lift, return zero.\n  if (best3Squat === 0 && entry.squatStatus[0] === -1) return 0.0;\n  if (best3Bench === 0 && entry.benchStatus[0] === -1) return 0.0;\n  if (best3Dead === 0 && entry.deadliftStatus[0] === -1) return 0.0;\n\n  return best3Squat + best3Bench + best3Dead;\n};\n\n// Restricts the total calculation to just for the specified Event.\nexport const getFinalEventTotalKg = (entry: Entry, event: Event): number => {\n  let best3Squat = 0.0;\n  if (event.includes(\"S\")) {\n    best3Squat = getBest3SquatKg(entry);\n    if (best3Squat === 0) return 0.0;\n  }\n\n  let best3Bench = 0.0;\n  if (event.includes(\"B\")) {\n    best3Bench = getBest3BenchKg(entry);\n    if (best3Bench === 0) return 0.0;\n  }\n\n  let best3Dead = 0.0;\n  if (event.includes(\"D\")) {\n    best3Dead = getBest3DeadliftKg(entry);\n    if (best3Dead === 0) return 0.0;\n  }\n\n  return best3Squat + best3Bench + best3Dead;\n};\n\n// Filter entries to only get lifters that are lifting on a given day\nexport const getLiftersOnDay = (entries: Array<Entry>, day: number): Array<Entry> => {\n  if (!entries) {\n    return [];\n  }\n  return entries.filter(entry => {\n    return entry.day === day;\n  });\n};\n\n// Convert a lift like \"S\" to the kg array field name, like \"squatKg\".\nexport const liftToAttemptFieldName = (lift: Lift): FieldKg => {\n  switch (lift) {\n    case \"S\":\n      return \"squatKg\";\n    case \"B\":\n      return \"benchKg\";\n    case \"D\":\n      return \"deadliftKg\";\n    default:\n      checkExhausted(lift);\n      return \"squatKg\";\n  }\n};\n\n// Convert a lift like \"S\" to the status array field name, like \"squatStatus\".\nexport const liftToStatusFieldName = (lift: Lift): FieldStatus => {\n  switch (lift) {\n    case \"S\":\n      return \"squatStatus\";\n    case \"B\":\n      return \"benchStatus\";\n    case \"D\":\n      return \"deadliftStatus\";\n    default:\n      checkExhausted(lift);\n      return \"squatStatus\";\n  }\n};\n\n// Whether the Entry has taken any attempts.\nexport const entryHasLifted = (entry: Entry): boolean => {\n  if (entry.squatStatus[0] !== 0) return true;\n  if (entry.benchStatus[0] !== 0) return true;\n  if (entry.deadliftStatus[0] !== 0) return true;\n  return false;\n};\n\n// Whether any Entry has taken any attempts on the given (day, platform). O(n).\nexport const liftingPresentOnPlatform = (entries: Array<Entry>, day: number, platform: number): boolean => {\n  for (let i = 0; i < entries.length; i++) {\n    const entry = entries[i];\n    if (entry.day !== day || entry.platform !== platform) continue;\n    if (entryHasLifted(entry)) return true;\n  }\n  return false;\n};\n\n// Given an array of how many platforms are on each day and the Entries,\n// returns an array of arrays of booleans, such that array[day-1][platform-1] is\n// true iff at least one Entry corresponding to that (day, platform) has\n// taken an attempt.\nexport const getWhetherPlatformsHaveLifted = (\n  platformsOnDays: Array<number>,\n  entries: Array<Entry>\n): Array<Array<boolean>> => {\n  let ret = [];\n  for (let day = 1; day <= platformsOnDays.length; day++) {\n    const platformsOnDay = platformsOnDays[day - 1];\n    let acc = [];\n    for (let platform = 1; platform <= platformsOnDay; platform++) {\n      acc.push(liftingPresentOnPlatform(entries, day, platform));\n    }\n    ret.push(acc);\n  }\n  return ret;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { newDefaultEntry, liftToAttemptFieldName, liftToStatusFieldName } from \"../logic/entry\";\nimport { RegistrationAction, OverwriteStoreAction, EnterAttemptAction, MarkLiftAction } from \"../types/actionTypes\";\nimport { Entry, Lift, FieldKg } from \"../types/dataTypes\";\nimport { RegistrationState } from \"../types/stateTypes\";\nimport { checkExhausted } from \"../types/utils\";\n\nconst initialState: RegistrationState = {\n  // The next unique ID to assign.\n  //\n  // This is stored in global state to handle the case of deleting registration\n  // rows during the course of lifting.\n  //\n  // A large number is used as the initial value to make it clear that this is\n  // specifically not an index into the `entries` array.\n  nextEntryId: 5000,\n\n  // Entry objects in the order they appear on the Registration page.\n  // This array owns all registration information.\n  entries: [],\n\n  // Hash from unique ID to `entries` array index.\n  //\n  // This is for the benefit of pages other than the Registration page.\n  // Because the sort order of the `entries` array can change arbitrarily,\n  // the other pages remember globally-unique identifiers for each registration,\n  // instead of a simple array index.\n  //\n  // This lookup table allows mapping those identifiers to whatever\n  // the current location of that data is in the canonical `entries` store.\n  lookup: {}\n};\n\ntype Action = RegistrationAction | EnterAttemptAction | MarkLiftAction | OverwriteStoreAction;\n\ntype NumberLookup = {\n  [id: number]: number;\n};\n\nexport default (state: RegistrationState = initialState, action: Action): RegistrationState => {\n  switch (action.type) {\n    case \"NEW_REGISTRATION\": {\n      // The object provides optional properties that can overwrite the default.\n      // Although the UI doesn't pass properties this way, debugging code does.\n      const obj = action.overwriteDefaults;\n\n      // Generate an entries array with one more item (without modifying the orginal).\n      // Object.assign() allows `obj` to overwrite defaults if present.\n      let entries: Array<Entry> = state.entries.slice();\n      let newEntry = newDefaultEntry(state.nextEntryId);\n\n      // If a previous entry exists, pre-populate some information from it.\n      if (entries.length > 0) {\n        const previousEntry = entries[entries.length - 1];\n        newEntry.day = previousEntry.day;\n        newEntry.platform = previousEntry.platform;\n        newEntry.flight = previousEntry.flight;\n      }\n\n      // Overwrite any newEntry properties with those given in obj.\n      entries.push(Object.assign(newEntry, obj));\n\n      // Since a new entry was added, generate a new 'lookup' object,\n      // mapping from the globally-unique EntryId to the array index.\n      // Specify type explicitly here so that we can mutate it\n      let lookup: NumberLookup = Object.assign({}, state.lookup);\n      lookup[state.nextEntryId] = entries.length - 1;\n\n      return {\n        ...state,\n        nextEntryId: state.nextEntryId + 1,\n        entries: entries,\n        lookup: lookup\n      };\n    }\n\n    case \"DELETE_REGISTRATION\": {\n      const entryId = action.entryId;\n\n      // Generate an entries array without the given item.\n      let entries: Array<Entry> = state.entries.filter((item, index) => item.id !== entryId);\n\n      // Since the entry was deleted from anywhere in the array,\n      // construct a new lookup table from scratch.\n      let lookup: NumberLookup = {};\n\n      for (let i = 0; i < entries.length; i++) {\n        let entry = entries[i];\n        lookup[entry.id] = i;\n      }\n\n      return {\n        ...state,\n        entries: entries,\n        lookup: lookup\n      };\n    }\n\n    case \"UPDATE_REGISTRATION\": {\n      const entryId = action.entryId;\n      const changes = action.changes;\n\n      // Clone the entries array, since one entry will reference a new object.\n      let entries: Array<Entry> = state.entries.slice();\n\n      // Make a new object with just the changes overwritten,\n      // and reference that object from the new array.\n      const index = entries.findIndex(obj => obj.id === entryId);\n      let newEntry = Object.assign({}, entries[index]);\n      entries[index] = Object.assign(newEntry, changes);\n\n      return {\n        ...state,\n        entries: entries\n      };\n    }\n\n    case \"ENTER_ATTEMPT\": {\n      // Action parameters, with expected types.\n      const entryId = Number(action.entryId);\n      const lift: Lift = action.lift;\n      const attemptOneIndexed = Number(action.attemptOneIndexed);\n      const weightKg = Number(action.weightKg);\n\n      const field: FieldKg = liftToAttemptFieldName(lift);\n\n      // Clone the entries array, since one slot will reference a new object.\n      let newEntries: Array<Entry> = state.entries.slice();\n      const index = newEntries.findIndex(obj => obj.id === entryId);\n      const oldEntry = newEntries[index];\n\n      // Make a copy of the attempts array containing the new attempt.\n      let newarray = oldEntry[field].slice();\n      newarray[attemptOneIndexed - 1] = weightKg;\n\n      // Put that new attempts array into an object so we can use Object.assign().\n      let newfields: Partial<Entry> = {};\n      newfields[field] = newarray;\n\n      // Make a new entry from the old entry, with the attempts field overwritten.\n      newEntries[index] = Object.assign(oldEntry, newfields);\n\n      return {\n        ...state,\n        entries: newEntries\n      };\n    }\n\n    case \"MARK_LIFT\": {\n      const entryId = Number(action.entryId);\n      const lift: Lift = action.lift;\n      const attemptOneIndexed = Number(action.attemptOneIndexed);\n      const success = Boolean(action.success);\n\n      // Map true to '1' and false to '-1'.\n      const status = success === true ? 1 : -1;\n\n      const fieldStatus = liftToStatusFieldName(lift);\n\n      // Clone the entries array, since one slot will reference a new object.\n      let newEntries: Array<Entry> = state.entries.slice();\n      const index = newEntries.findIndex(obj => obj.id === entryId);\n      const oldEntry = newEntries[index];\n\n      // Make a copy of the status array containing the new status.\n      let newarray = oldEntry[fieldStatus].slice();\n      newarray[attemptOneIndexed - 1] = status;\n\n      // Put that new array into an object so we can use Object.assign().\n      let newfields: Partial<Entry> = {};\n      newfields[fieldStatus] = newarray;\n\n      // Make a new entry from the old entry, with the status field overwritten.\n      let newEntry = Object.assign({}, oldEntry);\n      newEntries[index] = Object.assign(newEntry, newfields);\n\n      return {\n        ...state,\n        entries: newEntries\n      };\n    }\n\n    // Caused by clicking a \"Merge\" button on the Results page.\n    case \"MERGE_PLATFORM\": {\n      const day: number = action.day;\n      const platform: number = action.platform;\n      const platformEntries: Array<Entry> = action.platformEntries;\n\n      // Filter out state entries assigned to the merged (day, platform).\n      let newEntries = state.entries.filter(e => {\n        return !(e.day === day && e.platform === platform);\n      });\n\n      // Get the nextEntryId: the merged entries will be reassigned IDs.\n      let nextEntryId: number = state.nextEntryId;\n\n      // For each incoming Entry, copy the object, assign a new ID,\n      // and place it in the newEntries array.\n      for (let i = 0; i < platformEntries.length; i++) {\n        let entry: Entry = Object.assign({}, platformEntries[i]);\n        entry.id = nextEntryId++;\n        newEntries.push(entry);\n      }\n\n      // Generate an entirely new lookup table.\n      let lookup: NumberLookup = {};\n      for (let i = 0; i < newEntries.length; i++) {\n        lookup[newEntries[i].id] = i;\n      }\n\n      // Return a new object with the new components replaced.\n      return {\n        ...state,\n        nextEntryId: nextEntryId,\n        entries: newEntries,\n        lookup: lookup\n      };\n    }\n\n    case \"OVERWRITE_STORE\":\n      return action.store.registration;\n\n    default:\n      checkExhausted(action);\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Lifting state only tracks manual overrides.\n//\n// Outside of overrides, the state of the meet is fully-calculated by the LiftingView.\n//\n// For safety, correctness, and ease of understanding, the state of the meet is\n// intentionally *not* stored in the global state. It is continuously recalculated.\n//\n// Please do not attempt to store meet state in the Redux store!\n\nimport {\n  MarkLiftAction,\n  SetLiftingGroupAction,\n  OverrideAttemptAction,\n  OverrideEntryIdAction,\n  OverwriteStoreAction,\n  SetTableInfoAction\n} from \"../types/actionTypes\";\nimport { LiftingState } from \"../types/stateTypes\";\nimport { checkExhausted } from \"../types/utils\";\n\nconst initialState: LiftingState = {\n  // Specifies the initial settings for the control widgets on the lifting page.\n  // The intention is that the score table sets these manually.\n  day: 1,\n  platform: 1,\n  flight: \"A\",\n  lift: \"S\",\n\n  // These properties are normally calculated, but exist here as a mechanism\n  // for a one-shot override of the normal logic. After being handled,\n  // they are unset.\n  overrideAttempt: null, // Allows selecting an attempt, even if it's completed.\n  overrideEntryId: null, // Allows selecting a lifter, even if they've already gone.\n\n  // Presentational configuration.\n  columnDivisionWidthPx: 90\n};\n\ntype Action =\n  | MarkLiftAction\n  | SetLiftingGroupAction\n  | OverrideAttemptAction\n  | OverrideEntryIdAction\n  | OverwriteStoreAction\n  | SetTableInfoAction;\n\nexport default (state: LiftingState = initialState, action: Action): LiftingState => {\n  switch (action.type) {\n    case \"MARK_LIFT\": {\n      // Unset any overrides, returning to normal lifting flow.\n      return { ...state, overrideAttempt: null, overrideEntryId: null };\n    }\n\n    case \"SET_LIFTING_GROUP\":\n      return {\n        // Keep all the UI customization stuff.\n        ...state,\n\n        // Change all the real state stuff.\n        day: action.day,\n        platform: action.platform,\n        flight: action.flight,\n        lift: action.lift,\n\n        // If the group changes, unset any overrides.\n        overrideAttempt: null,\n        overrideEntryId: null\n      };\n\n    case \"OVERRIDE_ATTEMPT\":\n      return { ...state, overrideAttempt: action.attempt };\n\n    case \"OVERRIDE_ENTRY_ID\":\n      return { ...state, overrideEntryId: action.entryId };\n\n    case \"OVERWRITE_STORE\":\n      return action.store.lifting;\n\n    case \"SET_TABLE_INFO\": {\n      const changes = action.changes;\n\n      // As a safeguard, ensure that fields unrelated to customization\n      // are not overwritten by this action.\n\n      // Make a new object that's state + changes, with changes taking priority.\n      let combined = Object.assign({}, state);\n      Object.assign(combined, changes);\n\n      // Source from this new combined object, with fields unrelated to customization\n      // deferring to the original state.\n      //\n      // So that means:\n      //  - Fields unrelated to customization will be the same as in 'state'.\n      //  - Customization fields will be from 'combined', which includes all fields\n      //    and allowed the 'changes' object to overwrite any of them.\n      return {\n        ...combined,\n\n        day: state.day,\n        platform: state.platform,\n        flight: state.flight,\n        lift: state.lift,\n\n        overrideAttempt: state.overrideAttempt,\n        overrideEntryId: state.overrideEntryId\n      };\n    }\n\n    default:\n      checkExhausted(action);\n      return state;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { combineReducers } from \"redux\";\n\nimport versionsReducer from \"./versionsReducer\";\nimport languageReducer from \"./languageReducer\";\nimport meetReducer from \"./meetReducer\";\nimport registrationReducer from \"./registrationReducer\";\nimport liftingReducer from \"./liftingReducer\";\n\n// Using combineReducers() guarantees that each part of the state object\n// fully bears the responsibility of managing itself by only sending a\n// subset of the state to the reducer.\n//\n// For example, the meetReducer() receives a new 'state' object\n// equal to 'state.meet' from the root. Because there is no way to access\n// the root state object from a child state object, the meetReducer() is\n// fully-encapsulated, allowing for sane reasoning about effects on global state.\nexport default combineReducers({\n  versions: versionsReducer,\n  language: languageReducer,\n  meet: meetReducer,\n  registration: registrationReducer,\n  lifting: liftingReducer\n});\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport thunk from \"redux-thunk\";\nimport rootReducer from \"./reducers/rootReducer\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage\n};\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport default function configureStore(initialState = {}) {\n  let store = createStore(persistedReducer, applyMiddleware(thunk));\n  let persistor = persistStore(store);\n  return { store, persistor };\n}\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport es from \"./es.json\";\nimport eo from \"./eo.json\";\n\nexport default { es, eo };\n","// vim: set ts=2 sts=2 sw=2 et:\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport * as React from \"react\";\nimport { connect } from \"react-redux\";\nimport { IntlProvider } from \"react-intl\";\nimport translations from \"../../translations/locales\";\n\nimport { GlobalState, LanguageState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  language: LanguageState;\n}\n\ntype Props = StateProps;\n\nclass OpenLifterIntlProvider extends React.Component<Props> {\n  render() {\n    const language = this.props.language;\n\n    // Load our translations from the json files\n    // TODO: This typing could be nicer, we should be able to state that es/eo = {}, en = undefined\n    const messages = (translations as any)[language];\n\n    return (\n      // This is going to wrap any children passed to this component with an IntlProvider\n      // This will put translations of all of our child components in our app\n      <IntlProvider locale={language} key={language} messages={messages}>\n        {this.props.children}\n      </IntlProvider>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  language: state.language\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(OpenLifterIntlProvider);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { OverwriteStoreAction } from \"../types/actionTypes\";\nimport { GlobalState } from \"../types/stateTypes\";\n\n// Overwrites the entire Redux store, handled separately by each reducer.\n// This is used to implement \"Load from File\" functionality.\nexport const overwriteStore = (store: GlobalState): OverwriteStoreAction => {\n  return {\n    type: \"OVERWRITE_STORE\",\n    store: store\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The confirmation modal that pops up when the \"New Meet\" button is clicked.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Modal from \"react-bootstrap/Modal\";\nimport Button from \"react-bootstrap/Button\";\n\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport { overwriteStore } from \"../../actions/globalActions\";\nimport rootReducer from \"../../reducers/rootReducer\";\n\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { Dispatch } from \"redux\";\n\ninterface OwnProps {\n  show: boolean;\n  close: () => void;\n}\n\ninterface StateProps {\n  name: string;\n}\n\ninterface DispatchProps {\n  overwriteStore: () => void;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nclass NewMeetModal extends React.Component<Props> {\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.props.close}>\n        <Modal.Header closeButton>\n          <Modal.Title>OK to clear {this.props.name}?</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>Starting a new meet will clear all unsaved data from {this.props.name}.</p>\n          <p>Are you sure you want to continue?</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button onClick={this.props.close} variant=\"light\">\n            Close\n          </Button>\n          <LinkContainer to=\"/meet-setup\">\n            <Button onClick={this.props.overwriteStore} variant=\"primary\">\n              Continue\n            </Button>\n          </LinkContainer>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    name: state.meet.name\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    overwriteStore: () => {\n      // Calling the combined root reducer with an empty object results in the child reducers\n      // being invoked with no argument, so they return their default states.\n      // We cast here since this is not how the reducer is really intended to work\n      const defaultStore = rootReducer({} as GlobalState, \"OVERWRITE_STORE\" as any);\n      dispatch(overwriteStore(defaultStore));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(NewMeetModal);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Shows a popup with an error message.\n// This exists because Chrome only allows window.alert() to execute once,\n// because Chrome is bad and Google should feel bad.\n//\n// This is intended only for use with buttons that load external resources,\n// like save files and CSV registration importation files.\n//\n// Regular old errors in widgets should be reported by setting their\n// validationState.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\n\ninterface OwnProps {\n  error: string;\n  title: string;\n  show: boolean;\n  close: () => void;\n}\n\ntype Props = OwnProps;\n\nclass ErrorModal extends React.Component<Props> {\n  render() {\n    return (\n      <Modal show={this.props.show} onHide={this.props.close}>\n        <Modal.Header closeButton>\n          <Modal.Title>{this.props.title}</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <p>{this.props.error}</p>\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"info\" onClick={this.props.close}>\n            Close\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  null\n)(ErrorModal);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nimport { saveAs } from \"file-saver\";\n\n// import LanguageSelector from \"../components/translations/LanguageSelector\";\nimport { overwriteStore } from \"../actions/globalActions\";\n\nimport NewMeetModal from \"../components/home/NewMeetModal\";\nimport ErrorModal from \"../components/ErrorModal\";\n\nimport { stateVersion, releaseVersion, releaseDate } from \"../versions\";\n\nimport { GlobalState } from \"../types/stateTypes\";\nimport { Dispatch } from \"redux\";\n\n// Temporary CSS, just for prototyping.\nconst centerConsole = { maxWidth: 700, margin: \"0 auto 10px\", backgroundColor: \"black\", color: \"gray\" };\n\ninterface StateProps {\n  redux: GlobalState;\n}\n\ninterface DispatchProps {\n  overwriteStore: (store: GlobalState) => void;\n}\n\ninterface InternalState {\n  showNewMeetModal: boolean;\n  // Controls the ErrorModal popup. Shown when error !== \"\".\n  error: string;\n}\n\ntype Props = StateProps & DispatchProps;\n\nclass HomeContainer extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n    this.handleLoadClick = this.handleLoadClick.bind(this);\n    this.handleNewClick = this.handleNewClick.bind(this);\n    this.closeConfirmModal = this.closeConfirmModal.bind(this);\n    this.closeErrorModal = this.closeErrorModal.bind(this);\n    this.handleLoadFileInput = this.handleLoadFileInput.bind(this);\n    this.handleSaveClick = this.handleSaveClick.bind(this);\n    this.renderContinueButton = this.renderContinueButton.bind(this);\n\n    this.state = { showNewMeetModal: false, error: \"\" };\n  }\n\n  // The file input is hidden, and we want to use a button to activate it.\n  // This event handler is just a proxy to call the *real* event handler.\n  handleLoadClick = () => {\n    const loadhelper = document.getElementById(\"loadhelper\");\n    if (loadhelper !== null) {\n      loadhelper.click();\n    }\n  };\n\n  // When we click the new meet button\n  // Open the popover modal to confirm the user is willing to delete any current progress\n  handleNewClick = () => {\n    this.setState({ showNewMeetModal: true });\n  };\n\n  // Close the new meet confirmation modal\n  closeConfirmModal = () => {\n    this.setState({ showNewMeetModal: false });\n  };\n\n  closeErrorModal = () => {\n    this.setState({ error: \"\" });\n  };\n\n  // Called when a file is selected.\n  handleLoadFileInput = () => {\n    // Load the element and make sure it's an HTMLInputElement.\n    const loadHelper = document.getElementById(\"loadhelper\");\n    if (loadHelper === null || !(loadHelper instanceof HTMLInputElement) || loadHelper.files === null) {\n      return;\n    }\n\n    const selectedFile = loadHelper.files[0];\n    let rememberThis = this;\n\n    let reader = new FileReader();\n    reader.onload = function(event: any) {\n      let errored = false;\n      try {\n        let obj = JSON.parse(event.target.result);\n\n        // Basic error checking, make sure it's the right format.\n        if (\n          obj.language === undefined ||\n          obj.meet === undefined ||\n          obj.registration === undefined ||\n          obj.lifting === undefined\n        ) {\n          errored = true;\n        } else {\n          rememberThis.props.overwriteStore(obj);\n        }\n      } catch (err) {\n        errored = true;\n      }\n\n      if (errored) {\n        const error = \"That didn't look like an OpenLifter file!\";\n        rememberThis.setState({ error: error });\n      }\n    };\n    reader.readAsText(selectedFile);\n  };\n\n  handleSaveClick = () => {\n    // TODO: Share this logic with ResultsView.\n    let meetname = this.props.redux.meet.name;\n    if (meetname === \"\") {\n      meetname = \"Unnamed-Meet\";\n    }\n    meetname = meetname.replace(/ /g, \"-\");\n\n    const state = JSON.stringify(this.props.redux);\n    const blob = new Blob([state], { type: \"application/json;charset=utf-8\" });\n    saveAs(blob, meetname + \".openlifter\");\n  };\n\n  renderContinueButton = () => {\n    let meetname = this.props.redux.meet.name;\n    if (meetname === \"\") {\n      // Unnamed or unstarted meet, so don't render a continue button\n      return;\n    }\n    return (\n      <LinkContainer to=\"/meet-setup\">\n        <Button variant=\"primary\" block>\n          Continue {meetname}\n        </Button>\n      </LinkContainer>\n    );\n  };\n\n  render() {\n    let newMeetButton = undefined;\n    if (this.props.redux.meet.name) {\n      // A meet is active: use the modal.\n      newMeetButton = (\n        <Button variant=\"primary\" block onClick={this.handleNewClick}>\n          New Meet\n        </Button>\n      );\n    } else {\n      // No meet is active: just use a LinkContainer.\n      newMeetButton = (\n        <LinkContainer to=\"/meet-setup\">\n          <Button variant=\"primary\" block onClick={this.handleNewClick}>\n            New Meet\n          </Button>\n        </LinkContainer>\n      );\n    }\n\n    const wrongVersion: boolean = this.props.redux.versions.stateVersion !== stateVersion;\n    const dataReleaseVersion = this.props.redux.versions.releaseVersion;\n\n    const buttonMargin = { marginBottom: \"5px\" };\n\n    let warning = null;\n    if (wrongVersion === true) {\n      warning = (\n        <h2>\n          <p>\n            <b>DANGER!!!</b>\n          </p>\n          <p>\n            The loaded meet was made in OpenLifter <b>{dataReleaseVersion}</b>.\n          </p>\n          <p>\n            That format is incompatible with OpenLifter <b>{releaseVersion}</b>.\n          </p>\n        </h2>\n      );\n    }\n\n    return (\n      <Container style={centerConsole}>\n        <NewMeetModal show={this.state.showNewMeetModal} close={this.closeConfirmModal} />\n        <ErrorModal\n          error={this.state.error}\n          title=\"Load from File Error\"\n          show={this.state.error !== \"\"}\n          close={this.closeErrorModal}\n        />\n\n        <br />\n\n        <Row>\n          <Col md={12}>{warning}</Col>\n        </Row>\n\n        <Row>\n          <Col md={6}>\n            <img alt=\"Blue Collar Barbell\" src=\"bluecollar-square.jpg\" width=\"100%\" height=\"100%\" />\n          </Col>\n          <Col md={5}>\n            <br />\n            <div>\n              {wrongVersion === false ? (\n                this.renderContinueButton()\n              ) : (\n                <a href={\"https://www.openlifter.com/releases/\" + dataReleaseVersion}>\n                  <Button variant=\"success\" block style={{ marginBottom: \"5px\" }}>\n                    Switch to OpenLifter {dataReleaseVersion}\n                  </Button>\n                </a>\n              )}\n\n              {newMeetButton}\n\n              <Button variant=\"warning\" block onClick={this.handleLoadClick}>\n                Load from File\n              </Button>\n              <Button variant=\"success\" block onClick={this.handleSaveClick}>\n                Save to File\n              </Button>\n            </div>\n\n            <br />\n            <a\n              href=\"https://gitlab.com/openpowerlifting/openlifter/issues/new\"\n              rel=\"noopener noreferrer\"\n              target=\"_blank\"\n            >\n              <Button variant=\"outline-secondary\" block style={buttonMargin}>\n                Report an Issue\n              </Button>\n            </a>\n            <a href=\"https://www.openlifter.com/support\" rel=\"noopener noreferrer\" target=\"_blank\">\n              <Button variant=\"outline-secondary\" block style={buttonMargin}>\n                Official Support\n              </Button>\n            </a>\n            <a href=\"https://gitlab.com/openpowerlifting/openlifter\" rel=\"noopener noreferrer\" target=\"_blank\">\n              <Button variant=\"outline-secondary\" block style={buttonMargin}>\n                Full Source Code\n              </Button>\n            </a>\n            <LinkContainer to=\"/about\">\n              <Button variant=\"outline-secondary\" block style={buttonMargin}>\n                Credits and License\n              </Button>\n            </LinkContainer>\n          </Col>\n        </Row>\n\n        <Row>\n          <Col md={12} style={{ textAlign: \"center\", marginTop: \"2em\" }}>\n            <h3>\n              Version {releaseVersion}, {releaseDate}.\n            </h3>\n          </Col>\n        </Row>\n\n        <input\n          id=\"loadhelper\"\n          type=\"file\"\n          accept=\".openlifter,.openlifter.txt\"\n          style={{ display: \"none\" }}\n          onChange={this.handleLoadFileInput}\n        />\n      </Container>\n    );\n  }\n}\n\n// Because we want to save the state, separate it out specifically\n// into a \"redux\" prop. Otherwise it gets contaminated by other props.\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  redux: {\n    ...state\n  }\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    overwriteStore: store => dispatch(overwriteStore(store))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(HomeContainer);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// This defines a generic text input that colors itself based upon a validation\n// function passed in OwnProps. On blur, an onSuccess() callback is called\n// if validation passes; otherwise, the text input reverts to the initial state.\n\nimport React from \"react\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { Validation } from \"../types/dataTypes\";\nimport { FormControlTypeHack, assertString } from \"../types/utils\";\n\ninterface OwnProps {\n  type?: string; // The type of input, such as \"text\" or \"number\". Defaults to \"text\".\n  label?: string; // Form label text, shown above the input.\n  initialValue: string;\n  placeholder?: string;\n  disabled?: boolean;\n  validate: (value?: string) => Validation;\n  onSuccess: (value: string) => void;\n\n  // By default, the bottom margin is removed so that this can be used in tables.\n  // Setting this to true adds the margin back. Defaults to false.\n  keepMargin?: boolean;\n}\n\ntype Props = Readonly<OwnProps>;\n\ninterface InternalState {\n  value: string;\n}\n\nclass BirthDateInput extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.validate = this.validate.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    this.state = {\n      value: props.initialValue\n    };\n  }\n\n  validate = (): Validation => {\n    return this.props.validate(this.state.value);\n  };\n\n  handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      event.currentTarget.blur();\n    }\n  };\n\n  handleChange = (event: React.FormEvent<FormControlTypeHack>) => {\n    if (assertString(event.currentTarget.value)) {\n      this.setState({ value: event.currentTarget.value });\n    }\n  };\n\n  handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (this.validate() === \"error\") {\n      this.setState({ value: this.props.initialValue });\n      return;\n    }\n\n    if (this.props.initialValue !== this.state.value) {\n      this.props.onSuccess(this.state.value);\n    }\n  };\n\n  render() {\n    const validation: Validation = this.validate();\n    const maybeLabel = this.props.label ? <Form.Label>{this.props.label}</Form.Label> : undefined;\n\n    return (\n      <Form.Group style={this.props.keepMargin === true ? undefined : { marginBottom: 0 }}>\n        {maybeLabel}\n        <Form.Control\n          type={this.props.type ? this.props.type : \"text\"}\n          placeholder={this.props.placeholder}\n          disabled={this.props.disabled === true ? true : undefined}\n          value={this.state.value}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n          isValid={validation === \"success\"}\n          isInvalid={validation === \"error\"}\n          className={validation === \"warning\" ? \"is-warning\" : undefined}\n        />\n      </Form.Group>\n    );\n  }\n}\n\nexport default BirthDateInput;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport {\n  SetMeetNameAction,\n  SetFormulaAction,\n  SetFederationAction,\n  SetDivisionsAction,\n  SetMeetDateAction,\n  SetLengthDaysAction,\n  SetPlatformsOnDaysAction,\n  SetInKgAction,\n  SetWeightClassesAction,\n  SetBarAndCollarsWeightKgAction,\n  SetPlateConfigAction,\n  UpdateMeetAction\n} from \"../types/actionTypes\";\nimport { Formula, Lift, Sex } from \"../types/dataTypes\";\nimport { MeetState } from \"../types/stateTypes\";\n\nexport const setMeetName = (name: string): SetMeetNameAction => {\n  return {\n    type: \"SET_MEET_NAME\",\n    name\n  };\n};\n\nexport const setFormula = (formula: Formula): SetFormulaAction => {\n  return {\n    type: \"SET_FORMULA\",\n    formula\n  };\n};\n\nexport const setFederation = (federation: string): SetFederationAction => {\n  return {\n    type: \"SET_FEDERATION\",\n    federation\n  };\n};\n\nexport const setDivisions = (divisions: Array<string>): SetDivisionsAction => {\n  return {\n    type: \"SET_DIVISIONS\",\n    divisions\n  };\n};\n\nexport const setMeetDate = (date: string): SetMeetDateAction => {\n  return {\n    type: \"SET_MEET_DATE\",\n    date\n  };\n};\n\nexport const setLengthDays = (length: number): SetLengthDaysAction => {\n  return {\n    type: \"SET_LENGTH_DAYS\",\n    length\n  };\n};\n\nexport const setPlatformsOnDays = (day: number, count: number): SetPlatformsOnDaysAction => {\n  return {\n    type: \"SET_PLATFORM_COUNT\",\n    day: day,\n    count: count\n  };\n};\n\nexport const setInKg = (inKg: boolean): SetInKgAction => {\n  return {\n    type: \"SET_IN_KG\",\n    inKg\n  };\n};\n\nexport const setWeightClasses = (sex: Sex, classesKg: Array<number>): SetWeightClassesAction => {\n  return {\n    type: \"SET_WEIGHTCLASSES\",\n    sex: sex,\n    classesKg: classesKg\n  };\n};\n\nexport const setBarAndCollarsWeightKg = (lift: Lift, weightKg: number): SetBarAndCollarsWeightKgAction => {\n  return {\n    type: \"SET_BAR_AND_COLLARS_WEIGHT_KG\",\n    lift: lift,\n    weightKg: weightKg\n  };\n};\n\nexport const setPlateConfig = (weightKg: number, pairCount: number, color: string): SetPlateConfigAction => {\n  return {\n    type: \"SET_PLATE_CONFIG\",\n    weightKg,\n    pairCount,\n    color\n  };\n};\n\nexport const updateMeet = (obj: Partial<MeetState>): UpdateMeetAction => {\n  return {\n    type: \"UPDATE_MEET\",\n    changes: obj\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the MeetDate date picker.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport DatePicker from \"react-datepicker\";\n\nimport Form from \"react-bootstrap/Form\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\n\nimport { setMeetDate } from \"../../actions/meetSetupActions\";\nimport { iso8601ToLocalDate, localDateToIso8601 } from \"../../logic/date\";\n\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { Dispatch } from \"redux\";\n\ninterface StateProps {\n  date: string;\n}\n\ninterface DispatchProps {\n  setMeetDate: (date: Date) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\nclass MeetDate extends React.Component<Props> {\n  render() {\n    // The DatePicker manipulates a Date object in local time.\n    const initialDate: Date = iso8601ToLocalDate(this.props.date);\n\n    return (\n      <FormGroup>\n        <Form.Label>Start Date</Form.Label>\n        <div>\n          <DatePicker dateFormat=\"yyyy-MM-dd\" selected={initialDate} onChange={this.props.setMeetDate} />\n        </div>\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  date: state.meet.date\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    setMeetDate: date => {\n      dispatch(setMeetDate(localDateToIso8601(date)));\n    }\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeetDate);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines logic for parsing strings into OpenLifter datatypes.\n// The strings can come from the user and are therefore untrusted.\n\nimport { Equipment, Event, Sex } from \"../types/dataTypes\";\n\n// Strictly parse a string to an integer. Negatives are allowed.\nexport const parseInteger = (s: string): number | undefined => {\n  // Characters will be compared to ASCII charcodes.\n  const ascii_0 = 0x30;\n  const ascii_9 = 0x39;\n  const ascii_minus = 0x2d;\n\n  // Disallow the empty string.\n  if (s.length === 0) {\n    return;\n  }\n\n  // Check the string character-by-character.\n  for (let i = 0; i < s.length; ++i) {\n    let charcode = s.charCodeAt(i);\n\n    // A single negative is allowed at the front.\n    if (i === 0 && charcode === ascii_minus) {\n      continue;\n    } else if (charcode < ascii_0 || charcode > ascii_9) {\n      return;\n    }\n  }\n\n  return parseInt(s, 10);\n};\n\n// Loosely parse a string to a Sex.\nexport const parseSex = (s: string): Sex | undefined => {\n  const lower = s.toLowerCase();\n  if (lower === \"m\") return \"M\";\n  if (lower === \"f\") return \"F\";\n  if (lower === \"mx\") return \"Mx\";\n  return;\n};\n\n// Loosely parse a string to an Equipment.\nexport const parseEquipment = (s: string): Equipment | undefined => {\n  const lower = s.toLowerCase();\n  if (lower === \"bare\") return \"Bare\";\n  if (lower === \"sleeves\") return \"Sleeves\";\n  if (lower === \"wraps\") return \"Wraps\";\n\n  // Be more forgiving on these ones: nobody remembers the dash.\n  if (lower.startsWith(\"single\")) return \"Single-ply\";\n  if (lower.startsWith(\"multi\")) return \"Multi-ply\";\n  return;\n};\n\n// Parse a string to an Event.\n// Valid characters are \"SBD\", which must occur in that order.\nexport const parseEvent = (s: string): Event | undefined => {\n  if (s === \"\") {\n    return;\n  }\n\n  // Allow lowercase variants like \"sbd\".\n  const lower = s.toLowerCase();\n  const has_squat = lower.includes(\"s\");\n  const has_bench = lower.includes(\"b\");\n  const has_deadlift = lower.includes(\"d\");\n\n  let acc = \"\";\n  if (has_squat) acc += \"S\";\n  if (has_bench) acc += \"B\";\n  if (has_deadlift) acc += \"D\";\n\n  // Having reconstructed the string in the right order, check whether it matches.\n  if (acc !== s) {\n    return;\n  }\n\n  return s as Event;\n};\n\n// Strictly parse a YYYY-MM-DD date.\nexport const parseDate = (s: string): string | undefined => {\n  if (s.length !== 10) {\n    return;\n  }\n\n  let pieces = s.split(\"-\");\n  if (pieces.length !== 3) {\n    return;\n  }\n\n  if (pieces[0].length !== 4 || pieces[1].length !== 2 || pieces[2].length !== 2) {\n    return;\n  }\n\n  let year = parseInteger(pieces[0]);\n  let month = parseInteger(pieces[1]);\n  let day = parseInteger(pieces[2]);\n\n  if (typeof year !== \"number\" || year < 1920) return;\n  if (typeof month !== \"number\" || month < 1 || month > 12) return;\n  if (typeof day !== \"number\" || day < 1 || day > 31) return;\n\n  return s;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { setLengthDays } from \"../../actions/meetSetupActions\";\n\nimport { parseInteger } from \"../../logic/parsers\";\n\nimport { Validation } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { FormControlTypeHack, isString } from \"../../types/utils\";\nimport { Dispatch } from \"redux\";\n\ninterface StateProps {\n  lengthDays: number;\n}\n\ninterface DispatchProps {\n  setLengthDays: (days: number) => any;\n}\n\ntype Props = StateProps & DispatchProps;\n\ninterface InternalState {\n  value: string;\n}\n\nclass MeetLength extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.validate = this.validate.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      value: String(this.props.lengthDays)\n    };\n  }\n\n  validate = (): Validation => {\n    const { value } = this.state;\n    const asNumber = parseInteger(value);\n\n    if (asNumber === undefined || asNumber <= 0 || asNumber > 14) {\n      return \"error\";\n    }\n    return \"success\";\n  };\n\n  handleChange = (event: React.FormEvent<FormControlTypeHack>) => {\n    const value = event.currentTarget.value;\n    if (!isString(value)) {\n      throw new Error(`Expected a string, but got \"${value}\"`);\n    }\n\n    this.setState({ value: value }, () => {\n      // As callback, save successful value into Redux store.\n      if (this.validate() !== \"error\") {\n        this.props.setLengthDays(Number(value));\n      }\n    });\n  };\n\n  render() {\n    const validation: Validation = this.validate();\n\n    return (\n      <Form.Group>\n        <Form.Label>Days of Lifting</Form.Label>\n        <Form.Control\n          type=\"number\"\n          min={1}\n          max={14}\n          step={1}\n          value={this.state.value}\n          onChange={this.handleChange}\n          isValid={validation === \"success\"}\n          isInvalid={validation === \"error\"}\n          className={validation === \"warning\" ? \"is-warning\" : undefined}\n        />\n      </Form.Group>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  lengthDays: state.meet.lengthDays\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    setLengthDays: days => dispatch(setLengthDays(days))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeetLength);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React, { FormEvent } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { setPlatformsOnDays } from \"../../actions/meetSetupActions\";\n\nimport { parseInteger } from \"../../logic/parsers\";\n\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { Validation } from \"../../types/dataTypes\";\nimport { FormControlTypeHack } from \"../../types/utils\";\nimport { Dispatch } from \"redux\";\n\ninterface OwnProps {\n  day: number;\n}\n\ninterface StateProps {\n  platformsOnDays: Array<number>;\n}\n\ninterface DispatchProps {\n  setPlatformsOnDays: (day: number, count: number) => void;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface InternalState {\n  value: string;\n}\n\nclass PlatformCount extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.validate = this.validate.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      value: String(this.props.platformsOnDays[this.props.day - 1])\n    };\n  }\n\n  validate = (): Validation => {\n    const { value } = this.state;\n    const asNumber = parseInteger(value);\n    if (asNumber === undefined || asNumber <= 0 || asNumber > 20) {\n      return \"error\";\n    }\n    return \"success\";\n  };\n\n  handleChange = (event: FormEvent<FormControlTypeHack>) => {\n    const value = event.currentTarget.value;\n    if (typeof value === \"string\") {\n      this.setState({ value: value }, () => {\n        if (this.validate() === \"success\") {\n          this.props.setPlatformsOnDays(this.props.day, Number(value));\n        }\n      });\n    }\n  };\n\n  render() {\n    const { day } = this.props;\n    const label = \"Platforms on Day \" + day;\n    const validation = this.validate();\n\n    return (\n      <Form.Group>\n        <Form.Label>{label}</Form.Label>\n        <Form.Control\n          type=\"number\"\n          min={1}\n          max={20}\n          step={1}\n          value={this.state.value}\n          onChange={this.handleChange}\n          isValid={validation === \"success\"}\n          isInvalid={validation === \"error\"}\n          className={validation === \"warning\" ? \"is-warning\" : undefined}\n        />\n      </Form.Group>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  platformsOnDays: state.meet.platformsOnDays\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    setPlatformsOnDays: (day, count) => dispatch(setPlatformsOnDays(day, count))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(PlatformCount);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport PlatformCount from \"./PlatformCount\";\n\nimport { GlobalState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  lengthDays: number;\n}\n\ntype Props = StateProps;\n\nclass PlatformCounts extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.createPlatformInputs = this.createPlatformInputs.bind(this);\n  }\n\n  createPlatformInputs = () => {\n    let inputs = [];\n    const lengthDays = this.props.lengthDays;\n    for (let i = 1; i <= lengthDays; ++i) {\n      inputs.push(<PlatformCount key={i} day={i} />);\n    }\n    return inputs;\n  };\n\n  render() {\n    return <div>{this.createPlatformInputs()}</div>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  lengthDays: state.meet.lengthDays\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(PlatformCounts);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Provides widgets that overwrite rules with federation defaults.\n\nimport React, { FormEvent } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\n\nimport { updateMeet } from \"../../actions/meetSetupActions\";\n\nimport { GlobalState, MeetState } from \"../../types/stateTypes\";\nimport { checkExhausted, FormControlTypeHack } from \"../../types/utils\";\nimport { Dispatch } from \"redux\";\n\ninterface StateProps {\n  federation: string;\n}\n\ninterface DispatchProps {\n  updateMeet: (changes: Partial<MeetState>) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\ntype AutoFillOption = \"Traditional\" | \"GPC\" | \"SPF\" | \"UPA\" | \"USAPL\" | \"USPA\" | \"WABDL\" | \"WPC\" | \"WRPF\";\n\ninterface InternalState {\n  selectedOption: AutoFillOption;\n}\n\nconst traditionalDefaults: Partial<MeetState> = {\n  divisions: [\n    \"Open\",\n    \"Youth\",\n    \"T13-15\",\n    \"T16-17\",\n    \"T18-19\",\n    \"J20-23\",\n    \"S35-39\",\n    \"M40-44\",\n    \"M45-49\",\n    \"M50-54\",\n    \"M55-59\",\n    \"M60-64\",\n    \"M65-69\",\n    \"M70-74\",\n    \"M75-79\",\n    \"M80+\"\n  ],\n  weightClassesKgMen: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90],\n  weightClassesKgMx: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  formula: \"Wilks\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: true\n};\n\nconst gpcDefaults: Partial<MeetState> = {\n  divisions: [\n    \"F-JE\",\n    \"F-JR\",\n    \"F-M1E\",\n    \"F-M1R\",\n    \"F-M2E\",\n    \"F-M2R\",\n    \"F-M3E\",\n    \"F-M3R\",\n    \"F-M4E\",\n    \"F-M4R\",\n    \"F-M5E\",\n    \"F-M5R\",\n    \"F-M6E\",\n    \"F-M6R\",\n    \"F-M7E\",\n    \"F-M7R\",\n    \"F-M8E\",\n    \"F-M8R\",\n    \"F-M9E\",\n    \"F-M9R\",\n    \"F-OE\",\n    \"F-OR\",\n    \"F-SME\",\n    \"F-SMR\",\n    \"F-T1E\",\n    \"F-T1R\",\n    \"F-T2E\",\n    \"F-T2R\",\n    \"F-T3E\",\n    \"F-T3R\",\n    \"M-JE\",\n    \"M-JR\",\n    \"M-M1E\",\n    \"M-M1R\",\n    \"M-M2E\",\n    \"M-M2R\",\n    \"M-M3E\",\n    \"M-M3R\",\n    \"M-M4E\",\n    \"M-M4R\",\n    \"M-M5E\",\n    \"M-M5R\",\n    \"M-M6E\",\n    \"M-M6R\",\n    \"M-M7E\",\n    \"M-M7R\",\n    \"M-M8E\",\n    \"M-M8R\",\n    \"M-M9E\",\n    \"M-M9R\",\n    \"M-OE\",\n    \"M-OR\",\n    \"M-SME\",\n    \"M-SMR\",\n    \"M-T1E\",\n    \"M-T1R\",\n    \"M-T2E\",\n    \"M-T2R\",\n    \"M-T3E\",\n    \"M-T3R\"\n  ],\n  weightClassesKgMen: [56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 110],\n  weightClassesKgMx: [56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  formula: \"Glossbrenner\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: true,\n  allow4thAttempts: true\n};\n\nconst spfDefaults: Partial<MeetState> = {\n  divisions: [\n    \"Open\",\n    \"Pre-Teen\",\n    \"T13-15\",\n    \"T16-17\",\n    \"T18-19\",\n    \"J20-23\",\n    \"S33-39\",\n    \"M40-44\",\n    \"M45-49\",\n    \"M50-54\",\n    \"M55-59\",\n    \"M60-64\",\n    \"M65-69\",\n    \"M70-74\",\n    \"M75-79\",\n    \"G80+\"\n  ],\n  weightClassesKgMen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 118, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 100, 110],\n  weightClassesKgMx: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 118, 125, 140],\n  formula: \"Schwartz/Malone\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: true\n};\n\nconst upaDefaults: Partial<MeetState> = {\n  divisions: [\n    \"FG\",\n    \"FG-AD\",\n    \"FGR\",\n    \"FGR-AD\",\n    \"FJ\",\n    \"FJ-AD\",\n    \"FJR\",\n    \"FJR-AD\",\n    \"FJRE\",\n    \"FJRE-AD\",\n    \"FM1\",\n    \"FM1-AD\",\n    \"FM1R\",\n    \"FM1R-AD\",\n    \"FM1RE\",\n    \"FM1RE-AD\",\n    \"FM2\",\n    \"FM2-AD\",\n    \"FM2R\",\n    \"FM2R-AD\",\n    \"FM2RE\",\n    \"FM2RE-AD\",\n    \"FM3\",\n    \"FM3-AD\",\n    \"FM3R\",\n    \"FM3R-AD\",\n    \"FM3RE\",\n    \"FM3RE-AD\",\n    \"FM4\",\n    \"FM4-AD\",\n    \"FM4R\",\n    \"FM4R-AD\",\n    \"FM4RE\",\n    \"FM4RE-AD\",\n    \"FM5\",\n    \"FM5-AD\",\n    \"FM5R\",\n    \"FM5R-AD\",\n    \"FM5RE\",\n    \"FM5RE-AD\",\n    \"FM6\",\n    \"FM6-AD\",\n    \"FM6R\",\n    \"FM6R-AD\",\n    \"FM6RE\",\n    \"FM6RE-AD\",\n    \"FM7\",\n    \"FM7-AD\",\n    \"FM7R\",\n    \"FM7R-AD\",\n    \"FM7RE\",\n    \"FM7RE-AD\",\n    \"FM8\",\n    \"FM8-AD\",\n    \"FM8R\",\n    \"FM8R-AD\",\n    \"FM8RE\",\n    \"FM8RE-AD\",\n    \"FM9\",\n    \"FM9-AD\",\n    \"FM9R\",\n    \"FM9R-AD\",\n    \"FM9RE\",\n    \"FM9RE-AD\",\n    \"FMX\",\n    \"FMX-AD\",\n    \"FMXR\",\n    \"FMXR-AD\",\n    \"FMXRE\",\n    \"FMXRE-AD\",\n    \"FO\",\n    \"FO-AD\",\n    \"FOR\",\n    \"FOR-AD\",\n    \"FORE\",\n    \"FORE-AD\",\n    \"FPFR\",\n    \"FPFR-AD\",\n    \"FS\",\n    \"FS-AD\",\n    \"FSR\",\n    \"FSR-AD\",\n    \"FSRE\",\n    \"FSRE-AD\",\n    \"FT1\",\n    \"FT1-AD\",\n    \"FT1R\",\n    \"FT1R-AD\",\n    \"FT1RE\",\n    \"FT1RE-AD\",\n    \"FT2\",\n    \"FT2-AD\",\n    \"FT2R\",\n    \"FT2R-AD\",\n    \"FT2RE\",\n    \"FT2RE-AD\",\n    \"FT3\",\n    \"FT3-AD\",\n    \"FT3R\",\n    \"FT3R-AD\",\n    \"FT3RE\",\n    \"FT3RE-AD\",\n    \"FTX\",\n    \"FTX-AD\",\n    \"FTXR\",\n    \"FTXR-AD\",\n    \"FTXRE\",\n    \"FTXRE-AD\",\n    \"MG\",\n    \"MG-AD\",\n    \"MGR\",\n    \"MGR-AD\",\n    \"MJ\",\n    \"MJ-AD\",\n    \"MJR\",\n    \"MJR-AD\",\n    \"MJRE\",\n    \"MJRE-AD\",\n    \"MM1\",\n    \"MM1-AD\",\n    \"MM1R\",\n    \"MM1R-AD\",\n    \"MM1RE\",\n    \"MM1RE-AD\",\n    \"MM2\",\n    \"MM2-AD\",\n    \"MM2R\",\n    \"MM2R-AD\",\n    \"MM2RE\",\n    \"MM2RE-AD\",\n    \"MM3\",\n    \"MM3-AD\",\n    \"MM3R\",\n    \"MM3R-AD\",\n    \"MM3RE\",\n    \"MM3RE-AD\",\n    \"MM4\",\n    \"MM4-AD\",\n    \"MM4R\",\n    \"MM4R-AD\",\n    \"MM4RE\",\n    \"MM4RE-AD\",\n    \"MM5\",\n    \"MM5-AD\",\n    \"MM5R\",\n    \"MM5R-AD\",\n    \"MM5RE\",\n    \"MM5RE-AD\",\n    \"MM6\",\n    \"MM6-AD\",\n    \"MM6R\",\n    \"MM6R-AD\",\n    \"MM6RE\",\n    \"MM6RE-AD\",\n    \"MM7\",\n    \"MM7-AD\",\n    \"MM7R\",\n    \"MM7R-AD\",\n    \"MM7RE\",\n    \"MM7RE-AD\",\n    \"MM8\",\n    \"MM8-AD\",\n    \"MM8R\",\n    \"MM8R-AD\",\n    \"MM8RE\",\n    \"MM8RE-AD\",\n    \"MM9\",\n    \"MM9-AD\",\n    \"MM9R\",\n    \"MM9R-AD\",\n    \"MM9RE\",\n    \"MM9RE-AD\",\n    \"MMX\",\n    \"MMX-AD\",\n    \"MMXR\",\n    \"MMXR-AD\",\n    \"MMXRE\",\n    \"MMXRE-AD\",\n    \"MO\",\n    \"MO-AD\",\n    \"MOR\",\n    \"MOR-AD\",\n    \"MORE\",\n    \"MORE-AD\",\n    \"MPFR\",\n    \"MPFR-AD\",\n    \"MS\",\n    \"MS-AD\",\n    \"MSR\",\n    \"MSR-AD\",\n    \"MSRE\",\n    \"MSRE-AD\",\n    \"MT1\",\n    \"MT1-AD\",\n    \"MT1R\",\n    \"MT1R-AD\",\n    \"MT1RE\",\n    \"MT1RE-AD\",\n    \"MT2\",\n    \"MT2-AD\",\n    \"MT2R\",\n    \"MT2R-AD\",\n    \"MT2RE\",\n    \"MT2RE-AD\",\n    \"MT3\",\n    \"MT3-AD\",\n    \"MT3R\",\n    \"MT3R-AD\",\n    \"MT3RE\",\n    \"MT3RE-AD\",\n    \"MTX\",\n    \"MTX-AD\",\n    \"MTXR\",\n    \"MTXR-AD\",\n    \"MTXRE\",\n    \"MTXRE-AD\"\n  ],\n  weightClassesKgMen: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90],\n  weightClassesKgMx: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  formula: \"Schwartz/Malone\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: true,\n  allow4thAttempts: true\n};\n\nconst usaplDefaults: Partial<MeetState> = {\n  divisions: [\n    \"MR-O\",\n    \"MR-Y\",\n    \"MR-Y1\",\n    \"MR-Y2\",\n    \"MR-Y3\",\n    \"MR-T1\",\n    \"MR-T2\",\n    \"MR-T3\",\n    \"MR-Jr\",\n    \"MR-M1a\",\n    \"MR-M1b\",\n    \"MR-M2a\",\n    \"MR-M2b\",\n    \"MR-M3a\",\n    \"MR-M3b\",\n    \"MR-M4a\",\n    \"MR-M4b\",\n    \"MR-M5a\",\n    \"MR-M5b\",\n    \"MR-M6a\",\n    \"MR-M6b\",\n    \"MR-G\",\n    \"M-O\",\n    \"M-Y\",\n    \"M-Y1\",\n    \"M-Y2\",\n    \"M-Y3\",\n    \"M-T1\",\n    \"M-T2\",\n    \"M-T3\",\n    \"M-Jr\",\n    \"M-M1a\",\n    \"M-M1b\",\n    \"M-M2a\",\n    \"M-M2b\",\n    \"M-M3a\",\n    \"M-M3b\",\n    \"M-M4a\",\n    \"M-M4b\",\n    \"M-M5a\",\n    \"M-M5b\",\n    \"M-M6a\",\n    \"M-M6b\",\n    \"M-G\",\n    \"FR-O\",\n    \"FR-Y\",\n    \"FR-Y1\",\n    \"FR-Y2\",\n    \"FR-Y3\",\n    \"FR-T1\",\n    \"FR-T2\",\n    \"FR-T3\",\n    \"FR-Jr\",\n    \"FR-M1a\",\n    \"FR-M1b\",\n    \"FR-M2a\",\n    \"FR-M2b\",\n    \"FR-M3a\",\n    \"FR-M3b\",\n    \"FR-M4a\",\n    \"FR-M4b\",\n    \"FR-M5a\",\n    \"FR-M5b\",\n    \"FR-M6a\",\n    \"FR-M6b\",\n    \"FR-G\",\n    \"F-O\",\n    \"F-Y\",\n    \"F-Y1\",\n    \"F-Y2\",\n    \"F-Y3\",\n    \"F-T1\",\n    \"F-T2\",\n    \"F-T3\",\n    \"F-Jr\",\n    \"F-M1a\",\n    \"F-M1b\",\n    \"F-M2a\",\n    \"F-M2b\",\n    \"F-M3a\",\n    \"F-M3b\",\n    \"F-M4a\",\n    \"F-M4b\",\n    \"F-M5a\",\n    \"F-M5b\",\n    \"F-M6a\",\n    \"F-M6b\",\n    \"F-G\"\n  ],\n  weightClassesKgMen: [53, 59, 66, 74, 83, 93, 105, 120],\n  weightClassesKgWomen: [43, 47, 52, 57, 63, 72, 84],\n  weightClassesKgMx: [53, 59, 66, 74, 83, 93, 105, 120],\n  formula: \"IPF Points\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: false\n};\n\nconst uspaDefaults: Partial<MeetState> = {\n  divisions: [\n    \"Open\",\n    \"Y4-12\",\n    \"J13-15\",\n    \"J16-17\",\n    \"J18-19\",\n    \"J20-23\",\n    \"S35-39\",\n    \"M40-44\",\n    \"M45-49\",\n    \"M50-54\",\n    \"M55-59\",\n    \"M60-64\",\n    \"M65-69\",\n    \"M70-74\",\n    \"M75-79\",\n    \"M80+\"\n  ],\n  weightClassesKgMen: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90],\n  weightClassesKgMx: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  formula: \"Wilks\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: true\n};\n\nconst wabdlDefaults: Partial<MeetState> = {\n  divisions: [\n    \"Open\",\n    \"T12-13\",\n    \"T14-15\",\n    \"T16-17\",\n    \"T18-19\",\n    \"J20-25\",\n    \"S33-39\",\n    \"M40-46\",\n    \"M47-53\",\n    \"M54-60\",\n    \"M61-67\",\n    \"M68-74\",\n    \"M75-79\",\n    \"M80-84\",\n    \"M85-89\",\n    \"M90+\"\n  ],\n  weightClassesKgMen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 117.5, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 100],\n  weightClassesKgMx: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 117.5, 125, 140],\n  formula: \"Schwartz/Malone\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: true\n};\n\nconst wpcDefaults: Partial<MeetState> = {\n  divisions: [\n    \"F_GCR\",\n    \"F_GCR_A\",\n    \"F_GEM\",\n    \"F_GEM_A\",\n    \"F_GES\",\n    \"F_GES_A\",\n    \"F_GR\",\n    \"F_GR_A\",\n    \"F_JCR\",\n    \"F_JCR_A\",\n    \"F_JEM\",\n    \"F_JEM_A\",\n    \"F_JES\",\n    \"F_JES_A\",\n    \"F_JR\",\n    \"F_JR_A\",\n    \"F_MCR_1\",\n    \"F_MCR_1_A\",\n    \"F_MCR_2\",\n    \"F_MCR_2_A\",\n    \"F_MCR_3\",\n    \"F_MCR_3_A\",\n    \"F_MCR_4\",\n    \"F_MCR_4_A\",\n    \"F_MCR_5\",\n    \"F_MCR_5_A\",\n    \"F_MCR_6\",\n    \"F_MCR_6_A\",\n    \"F_MCR_7\",\n    \"F_MCR_7_A\",\n    \"F_MCR_8\",\n    \"F_MCR_8_A\",\n    \"F_MCR_9\",\n    \"F_MCR_9_A\",\n    \"F_MCR_X\",\n    \"F_MCR_X_A\",\n    \"F_MEM_1\",\n    \"F_MEM_1_A\",\n    \"F_MEM_2\",\n    \"F_MEM_2_A\",\n    \"F_MEM_3\",\n    \"F_MEM_3_A\",\n    \"F_MEM_4\",\n    \"F_MEM_4_A\",\n    \"F_MEM_5\",\n    \"F_MEM_5_A\",\n    \"F_MEM_6\",\n    \"F_MEM_6_A\",\n    \"F_MEM_7\",\n    \"F_MEM_7_A\",\n    \"F_MEM_8\",\n    \"F_MEM_8_A\",\n    \"F_MEM_9\",\n    \"F_MEM_9_A\",\n    \"F_MEM_X\",\n    \"F_MEM_X_A\",\n    \"F_MES_1\",\n    \"F_MES_1_A\",\n    \"F_MES_2\",\n    \"F_MES_2_A\",\n    \"F_MES_3\",\n    \"F_MES_3_A\",\n    \"F_MES_4\",\n    \"F_MES_4_A\",\n    \"F_MES_5\",\n    \"F_MES_5_A\",\n    \"F_MES_6\",\n    \"F_MES_6_A\",\n    \"F_MES_7\",\n    \"F_MES_7_A\",\n    \"F_MES_8\",\n    \"F_MES_8_A\",\n    \"F_MES_9\",\n    \"F_MES_9_A\",\n    \"F_MES_X\",\n    \"F_MES_X_A\",\n    \"F_MR_1\",\n    \"F_MR_1_A\",\n    \"F_MR_2\",\n    \"F_MR_2_A\",\n    \"F_MR_3\",\n    \"F_MR_3_A\",\n    \"F_MR_4\",\n    \"F_MR_4_A\",\n    \"F_MR_5\",\n    \"F_MR_5_A\",\n    \"F_MR_6\",\n    \"F_MR_6_A\",\n    \"F_MR_7\",\n    \"F_MR_7_A\",\n    \"F_MR_8\",\n    \"F_MR_8_A\",\n    \"F_MR_9\",\n    \"F_MR_9_A\",\n    \"F_MR_X\",\n    \"F_MR_X_A\",\n    \"F_NEM\",\n    \"F_NR\",\n    \"F_OCR\",\n    \"F_OCR_A\",\n    \"F_OEM\",\n    \"F_OEM_A\",\n    \"F_OES\",\n    \"F_OES_A\",\n    \"F_OR\",\n    \"F_OR_A\",\n    \"F_SCR\",\n    \"F_SCR_A\",\n    \"F_SEM\",\n    \"F_SEM_A\",\n    \"F_SES\",\n    \"F_SES_A\",\n    \"F_SOR\",\n    \"F_SOR_A\",\n    \"F_SR\",\n    \"F_SR_A\",\n    \"F_TCR_1\",\n    \"F_TCR_1_A\",\n    \"F_TCR_2\",\n    \"F_TCR_2_A\",\n    \"F_TCR_3\",\n    \"F_TCR_3_A\",\n    \"F_TCR_X\",\n    \"F_TCR_X_A\",\n    \"F_TEM_1\",\n    \"F_TEM_1_A\",\n    \"F_TEM_2\",\n    \"F_TEM_2_A\",\n    \"F_TEM_3\",\n    \"F_TEM_3_A\",\n    \"F_TEM_X\",\n    \"F_TEM_X_A\",\n    \"F_TES_1\",\n    \"F_TES_1_A\",\n    \"F_TES_2\",\n    \"F_TES_2_A\",\n    \"F_TES_3\",\n    \"F_TES_3_A\",\n    \"F_TES_X\",\n    \"F_TES_X_A\",\n    \"F_TR_1\",\n    \"F_TR_1_A\",\n    \"F_TR_2\",\n    \"F_TR_2_A\",\n    \"F_TR_3\",\n    \"F_TR_3_A\",\n    \"F_TR_X\",\n    \"F_TR_X_A\",\n    \"F_YCR\",\n    \"F_YCR_A\",\n    \"F_YEM\",\n    \"F_YEM_A\",\n    \"F_YES\",\n    \"F_YES_A\",\n    \"F_YR\",\n    \"F_YR_A\",\n    \"M_GCR\",\n    \"M_GCR_A\",\n    \"M_GEM\",\n    \"M_GEM_A\",\n    \"M_GES\",\n    \"M_GES_A\",\n    \"M_GR\",\n    \"M_GR_A\",\n    \"M_JCR\",\n    \"M_JCR_A\",\n    \"M_JEM\",\n    \"M_JEM_A\",\n    \"M_JES\",\n    \"M_JES_A\",\n    \"M_JR\",\n    \"M_JR_A\",\n    \"M_MCR_1\",\n    \"M_MCR_1_A\",\n    \"M_MCR_2\",\n    \"M_MCR_2_A\",\n    \"M_MCR_3\",\n    \"M_MCR_3_A\",\n    \"M_MCR_4\",\n    \"M_MCR_4_A\",\n    \"M_MCR_5\",\n    \"M_MCR_5_A\",\n    \"M_MCR_6\",\n    \"M_MCR_6_A\",\n    \"M_MCR_7\",\n    \"M_MCR_7_A\",\n    \"M_MCR_8\",\n    \"M_MCR_8_A\",\n    \"M_MCR_9\",\n    \"M_MCR_9_A\",\n    \"M_MCR_X\",\n    \"M_MCR_X_A\",\n    \"M_MEM_1\",\n    \"M_MEM_1_A\",\n    \"M_MEM_2\",\n    \"M_MEM_2_A\",\n    \"M_MEM_3\",\n    \"M_MEM_3_A\",\n    \"M_MEM_4\",\n    \"M_MEM_4_A\",\n    \"M_MEM_5\",\n    \"M_MEM_5_A\",\n    \"M_MEM_6\",\n    \"M_MEM_6_A\",\n    \"M_MEM_7\",\n    \"M_MEM_7_A\",\n    \"M_MEM_8\",\n    \"M_MEM_8_A\",\n    \"M_MEM_9\",\n    \"M_MEM_9_A\",\n    \"M_MEM_X\",\n    \"M_MEM_X_A\",\n    \"M_MES_1\",\n    \"M_MES_1_A\",\n    \"M_MES_2\",\n    \"M_MES_2_A\",\n    \"M_MES_3\",\n    \"M_MES_3_A\",\n    \"M_MES_4\",\n    \"M_MES_4_A\",\n    \"M_MES_5\",\n    \"M_MES_5_A\",\n    \"M_MES_6\",\n    \"M_MES_6_A\",\n    \"M_MES_7\",\n    \"M_MES_7_A\",\n    \"M_MES_8\",\n    \"M_MES_8_A\",\n    \"M_MES_9\",\n    \"M_MES_9_A\",\n    \"M_MES_X\",\n    \"M_MES_X_A\",\n    \"M_MR_1\",\n    \"M_MR_1_A\",\n    \"M_MR_2\",\n    \"M_MR_2_A\",\n    \"M_MR_3\",\n    \"M_MR_3_A\",\n    \"M_MR_4\",\n    \"M_MR_4_A\",\n    \"M_MR_5\",\n    \"M_MR_5_A\",\n    \"M_MR_6\",\n    \"M_MR_6_A\",\n    \"M_MR_7\",\n    \"M_MR_7_A\",\n    \"M_MR_8\",\n    \"M_MR_8_A\",\n    \"M_MR_9\",\n    \"M_MR_9_A\",\n    \"M_MR_X\",\n    \"M_MR_X_A\",\n    \"M_NEM\",\n    \"M_NEM_A\",\n    \"M_NR\",\n    \"M_NR_A\",\n    \"M_OCR\",\n    \"M_OCR_A\",\n    \"M_OEM\",\n    \"M_OEM_A\",\n    \"M_OES\",\n    \"M_OES_A\",\n    \"M_OR\",\n    \"M_OR_A\",\n    \"M_PFEM\",\n    \"M_PFEM_A\",\n    \"M_PFR_A\",\n    \"M_SCR\",\n    \"M_SCR_A\",\n    \"M_SEM\",\n    \"M_SEM_A\",\n    \"M_SES\",\n    \"M_SES_A\",\n    \"M_SOEM\",\n    \"M_SOEM_A\",\n    \"M_SOR\",\n    \"M_SOR_A\",\n    \"M_SR\",\n    \"M_SR_A\",\n    \"M_TCR_1\",\n    \"M_TCR_1_A\",\n    \"M_TCR_2\",\n    \"M_TCR_2_A\",\n    \"M_TCR_3\",\n    \"M_TCR_3_A\",\n    \"M_TCR_X\",\n    \"M_TCR_X_A\",\n    \"M_TEM_1\",\n    \"M_TEM_1_A\",\n    \"M_TEM_2\",\n    \"M_TEM_2_A\",\n    \"M_TEM_3\",\n    \"M_TEM_3_A\",\n    \"M_TEM_X\",\n    \"M_TEM_X_A\",\n    \"M_TES_1\",\n    \"M_TES_1_A\",\n    \"M_TES_2\",\n    \"M_TES_2_A\",\n    \"M_TES_3\",\n    \"M_TES_3_A\",\n    \"M_TES_X\",\n    \"M_TES_X_A\",\n    \"M_TR_1\",\n    \"M_TR_1_A\",\n    \"M_TR_2\",\n    \"M_TR_2_A\",\n    \"M_TR_3\",\n    \"M_TR_3_A\",\n    \"M_TR_X\",\n    \"M_TR_X_A\",\n    \"M_YCR\",\n    \"M_YCR_A\",\n    \"M_YEM\",\n    \"M_YEM_A\",\n    \"M_YR\",\n    \"M_YR_A\"\n  ],\n  weightClassesKgMen: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90],\n  weightClassesKgMx: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  formula: \"Glossbrenner\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: true,\n  allow4thAttempts: true\n};\n\nconst wrpfDefaults: Partial<MeetState> = {\n  divisions: [\n    \"Open\",\n    \"Y5-13\",\n    \"T14-16\",\n    \"S17-19\",\n    \"J20-23\",\n    \"M40-44\",\n    \"M45-49\",\n    \"M50-54\",\n    \"M55-59\",\n    \"M60-64\",\n    \"M65-69\",\n    \"M70-74\",\n    \"M75-79\",\n    \"M80+\"\n  ],\n  weightClassesKgMen: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  weightClassesKgWomen: [44, 48, 52, 56, 60, 67.5, 75, 82.5, 90],\n  weightClassesKgMx: [52, 56, 60, 67.5, 75, 82.5, 90, 100, 110, 125, 140],\n  formula: \"Wilks\",\n  ageCoefficients: \"FosterMcCulloch\",\n  combineSleevesAndWraps: false,\n  allow4thAttempts: true\n};\n\nclass AutoFillRules extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n\n    this.state = {\n      selectedOption: \"Traditional\"\n    };\n  }\n\n  handleSelectChange = (event: FormEvent<FormControlTypeHack>) => {\n    let value = event.currentTarget.value as AutoFillOption;\n    // Only handle any valid values & assist the compiler in giving us a compile error if AutoFillOption has more values added\n    switch (value) {\n      case \"Traditional\":\n      case \"GPC\":\n      case \"SPF\":\n      case \"UPA\":\n      case \"USPA\":\n      case \"USAPL\":\n      case \"WABDL\":\n      case \"WPC\":\n      case \"WRPF\":\n        this.setState({ selectedOption: value });\n        break;\n\n      default:\n        checkExhausted(value);\n        throw new Error(`Expected a value that corresponds to an AutoFillOption, instead got \"${value}\"`);\n    }\n  };\n\n  handleClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    switch (this.state.selectedOption) {\n      case \"Traditional\":\n        this.props.updateMeet(traditionalDefaults);\n        return;\n      case \"GPC\":\n        this.props.updateMeet(gpcDefaults);\n        return;\n      case \"SPF\":\n        this.props.updateMeet(spfDefaults);\n        return;\n      case \"UPA\":\n        this.props.updateMeet(upaDefaults);\n        return;\n      case \"USAPL\":\n        this.props.updateMeet(usaplDefaults);\n        return;\n      case \"USPA\":\n        this.props.updateMeet(uspaDefaults);\n        return;\n      case \"WABDL\":\n        this.props.updateMeet(wabdlDefaults);\n        return;\n      case \"WPC\":\n        this.props.updateMeet(wpcDefaults);\n        return;\n      case \"WRPF\":\n        this.props.updateMeet(wrpfDefaults);\n        return;\n      default:\n        checkExhausted(this.state.selectedOption);\n        return;\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        <FormGroup>\n          <Form.Label>Auto-Fill Rules</Form.Label>\n          <div>\n            <FormControl\n              as=\"select\"\n              onChange={this.handleSelectChange}\n              defaultValue={this.state.selectedOption}\n              style={{ width: \"70%\", display: \"inline-block\" }}\n              className=\"custom-select\"\n            >\n              <option key=\"Traditional\" value=\"Traditional\">\n                Traditional Rules\n              </option>\n              <option key=\"GPC\" value=\"GPC\">\n                GPC Rules\n              </option>\n              <option key=\"SPF\" value=\"SPF\">\n                SPF Rules\n              </option>\n              <option key=\"UPA\" value=\"UPA\">\n                UPA Rules\n              </option>\n              <option key=\"USAPL\" value=\"USAPL\">\n                USAPL Rules\n              </option>\n              <option key=\"USPA\" value=\"USPA\">\n                USPA Rules\n              </option>\n              <option key=\"WABDL\" value=\"WABDL\">\n                WABDL Rules\n              </option>\n              <option key=\"WPC\" value=\"WPC\">\n                WPC Rules\n              </option>\n              <option key=\"WRPF\" value=\"WRPF\">\n                WRPF Rules\n              </option>\n            </FormControl>\n\n            <Button onClick={this.handleClick} variant=\"primary\" style={{ width: \"25%\", marginLeft: \"5%\" }}>\n              Auto-Fill\n            </Button>\n          </div>\n        </FormGroup>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  federation: state.meet.federation\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    updateMeet: changes => dispatch(updateMeet(changes))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AutoFillRules);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport CreatableSelect from \"react-select/lib/Creatable\";\n\nimport { setDivisions } from \"../../actions/meetSetupActions\";\n\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { Dispatch } from \"redux\";\nimport { ActionMeta, ValueType } from \"react-select/lib/types\";\n\nconst components = {\n  DropdownIndicator: null\n};\n\ninterface OptionType {\n  label: string;\n  value: string;\n}\n\nconst createOption = (label: string): OptionType => ({\n  label,\n  value: label\n});\n\ninterface StateProps {\n  divisions: Array<string>;\n}\n\ninterface DispatchProps {\n  setDivisions: (divisions: Array<string>) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\ninterface InternalState {\n  inputValue: string;\n  value: Array<OptionType>;\n}\n\nclass DivisionSelect extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    let objarray = [];\n    for (let i = 0; i < props.divisions.length; i++) {\n      const division = props.divisions[i];\n      objarray.push({ value: division, label: division });\n    }\n\n    this.state = {\n      inputValue: \"\",\n      value: objarray\n    };\n\n    this.maybeUpdateRedux = this.maybeUpdateRedux.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  // Updates the Redux store if a division was added or removed.\n  // Since updates are synchronous, we can simply check length.\n  maybeUpdateRedux = (objarray: Array<OptionType>): void => {\n    // objarray is a list of {value: \"foo\", label: \"foo\"} objects.\n    if (objarray.length === this.props.divisions.length) {\n      return;\n    }\n\n    // The divisions changed: save to Redux.\n    let divisions = [];\n    for (let i = 0; i < objarray.length; i++) {\n      divisions.push(objarray[i].label);\n    }\n    this.props.setDivisions(divisions);\n  };\n\n  // Handles the case of deleting an existing division.\n  handleChange = (value: ValueType<OptionType>, actionMeta: ActionMeta): void => {\n    if (value instanceof Array) {\n      this.setState({ value: value });\n      this.maybeUpdateRedux(value);\n    }\n  };\n\n  // Reflects the current typing status in the state.\n  handleInputChange = (inputValue: string): void => {\n    this.setState({ inputValue: inputValue });\n  };\n\n  // Handles the case of creating a new division.\n  handleKeyDown = (event: React.KeyboardEvent<HTMLElement>): void => {\n    const { inputValue, value } = this.state;\n    if (!inputValue) return;\n    if (event.key === \"Enter\" || event.key === \"Tab\") {\n      // Disallow creating redundant divisions.\n      for (let i = 0; i < value.length; i++) {\n        if (value[i].label === inputValue) {\n          // Silently drop the redundant division.\n          this.setState({ inputValue: \"\" });\n          event.preventDefault();\n          return;\n        }\n      }\n\n      const newValue = [...value, createOption(inputValue)];\n      this.setState({\n        inputValue: \"\",\n        value: newValue\n      });\n      this.maybeUpdateRedux(newValue);\n      event.preventDefault();\n    }\n  };\n\n  render() {\n    const { inputValue, value } = this.state;\n    return (\n      <Form.Group>\n        <Form.Label>Divisions (prefer short codes!)</Form.Label>\n        <CreatableSelect\n          components={components}\n          inputValue={inputValue}\n          isMulti\n          menuIsOpen={false}\n          onChange={this.handleChange}\n          onInputChange={this.handleInputChange}\n          onKeyDown={this.handleKeyDown}\n          placeholder=\"Type a division and press Enter...\"\n          value={value}\n        />\n      </Form.Group>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  divisions: state.meet.divisions\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    setDivisions: divisions => dispatch(setDivisions(divisions))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(DivisionSelect);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport CreatableSelect from \"react-select/lib/Creatable\";\n\nimport { setWeightClasses } from \"../../actions/meetSetupActions\";\n\nimport { Sex } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { checkExhausted } from \"../../types/utils\";\nimport { Dispatch } from \"redux\";\nimport { ActionMeta, ValueType } from \"react-select/lib/types\";\n\nconst components = {\n  DropdownIndicator: null\n};\n\ntype OptionType = {\n  label: string;\n  value: string;\n};\n\nconst createOption = (label: string): OptionType => ({\n  label,\n  value: label\n});\n\ninterface OwnProps {\n  label: string;\n  sex: Sex;\n}\n\ninterface StateProps {\n  classes: Array<number>;\n}\n\ninterface DispatchProps {\n  setWeightClasses: (sex: Sex, classesKg: Array<number>) => void;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface InternalState {\n  inputValue: string;\n  value: Array<OptionType>;\n}\n\nclass WeightClassesSelect extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    let objarray: Array<OptionType> = [];\n    for (let i = 0; i < props.classes.length; i++) {\n      const c = String(props.classes[i]);\n      objarray.push({ value: c, label: c });\n    }\n\n    this.state = {\n      inputValue: \"\",\n      value: objarray\n    };\n\n    this.maybeUpdateRedux = this.maybeUpdateRedux.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n  }\n\n  // Updates the Redux store if a weightclass was added or removed.\n  // Since updates are synchronous, we can simply check length.\n  maybeUpdateRedux = (objarray: Array<OptionType>): void => {\n    if (objarray.length === this.props.classes.length) {\n      return;\n    }\n\n    // The classes changed: save to Redux.\n    let classes = [];\n    for (let i = 0; i < objarray.length; i++) {\n      classes.push(Number(objarray[i].label));\n    }\n    this.props.setWeightClasses(this.props.sex, classes);\n  };\n\n  handleChange = (value: ValueType<OptionType>, actionMeta: ActionMeta): void => {\n    if (value instanceof Array) {\n      this.setState({ value: value });\n      this.maybeUpdateRedux(value);\n    }\n  };\n\n  // Reflects the current typing status in the state.\n  handleInputChange = (inputValue: string): void => {\n    this.setState({ inputValue: inputValue });\n  };\n\n  // Handles the case of creating a new weightclass.\n  handleKeyDown = (event: React.KeyboardEvent<HTMLElement>): void => {\n    const { inputValue, value } = this.state;\n    if (!inputValue) return;\n    if (event.key === \"Enter\" || event.key === \"Tab\") {\n      const asNumber = Number(inputValue);\n\n      // Disallow creating non-numeric inputs.\n      if (isNaN(asNumber) || !isFinite(asNumber)) {\n        this.setState({ inputValue: \"\" });\n        event.preventDefault();\n        return;\n      }\n\n      // Disallow negative inputs.\n      // The string check is for negative zero.\n      if (asNumber < 0 || inputValue.includes(\"-\")) {\n        this.setState({ inputValue: \"\" });\n        event.preventDefault();\n        return;\n      }\n\n      // Disallow creating redundant classes.\n      for (let i = 0; i < value.length; i++) {\n        if (Number(value[i].label) === asNumber) {\n          // Silently drop the redundant weightclass.\n          this.setState({ inputValue: \"\" });\n          event.preventDefault();\n          return;\n        }\n      }\n\n      // Sort the new value into the array.\n      let newValue = [...value, createOption(inputValue)];\n      newValue = newValue.sort((a, b) => Number(a.value) - Number(b.value));\n\n      this.setState({\n        inputValue: \"\",\n        value: newValue\n      });\n      this.maybeUpdateRedux(newValue);\n      event.preventDefault();\n    }\n  };\n\n  render() {\n    const { inputValue, value } = this.state;\n    return (\n      <Form.Group>\n        <Form.Label>{this.props.label}</Form.Label>\n        <CreatableSelect\n          components={components}\n          inputValue={inputValue}\n          isMulti\n          menuIsOpen={false}\n          onChange={this.handleChange}\n          onInputChange={this.handleInputChange}\n          onKeyDown={this.handleKeyDown}\n          placeholder=\"Type a weight class and press Enter...\"\n          value={value}\n        />\n      </Form.Group>\n    );\n  }\n}\n\nconst selectClassesBySex = (sex: Sex, state: GlobalState): Array<number> => {\n  switch (sex) {\n    case \"M\":\n      return state.meet.weightClassesKgMen;\n    case \"F\":\n      return state.meet.weightClassesKgWomen;\n    case \"Mx\":\n      return state.meet.weightClassesKgMx;\n    default:\n      checkExhausted(sex);\n      return state.meet.weightClassesKgMen;\n  }\n};\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  return {\n    classes: selectClassesBySex(ownProps.sex, state)\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    setWeightClasses: (sex, classesKg) => dispatch(setWeightClasses(sex, classesKg))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WeightClassesSelect);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React, { FormEvent } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { setBarAndCollarsWeightKg } from \"../../actions/meetSetupActions\";\nimport { kg2lbs, lbs2kg } from \"../../logic/units\";\n\nimport { Lift, Validation } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { assertString, checkExhausted, FormControlTypeHack } from \"../../types/utils\";\nimport { Dispatch } from \"redux\";\nimport { SetBarAndCollarsWeightKgAction } from \"../../types/actionTypes\";\n\ninterface OwnProps {\n  lift: Lift;\n}\n\ninterface StateProps {\n  inKg: boolean;\n  squatBarAndCollarsWeightKg: number;\n  benchBarAndCollarsWeightKg: number;\n  deadliftBarAndCollarsWeightKg: number;\n}\n\ninterface DispatchProps {\n  setBarAndCollarsWeightKg: (lift: Lift, weight: number) => SetBarAndCollarsWeightKgAction;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface InternalState {\n  value: string;\n}\n\nclass BarAndCollarsWeightKg extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.validate = this.validate.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    const weight = this.getInitialBarAndCollarsWeightKg(this.props.lift);\n    const value = this.props.inKg ? weight : kg2lbs(weight);\n\n    this.state = {\n      value: String(value)\n    };\n  }\n\n  getInitialBarAndCollarsWeightKg = (lift: Lift): number => {\n    switch (lift) {\n      case \"S\":\n        return this.props.squatBarAndCollarsWeightKg;\n      case \"B\":\n        return this.props.benchBarAndCollarsWeightKg;\n      case \"D\":\n        return this.props.deadliftBarAndCollarsWeightKg;\n      default:\n        checkExhausted(lift);\n        return 0;\n    }\n  };\n\n  validate = (): Validation => {\n    const { value } = this.state;\n    const asNumber = Number(value);\n\n    if (isNaN(asNumber) || asNumber <= 0 || asNumber < 5) {\n      return \"error\";\n    }\n    return \"success\";\n  };\n\n  handleChange = (event: FormEvent<FormControlTypeHack>) => {\n    const value: string | undefined = event.currentTarget.value;\n    if (assertString(value)) {\n      this.setState({ value: value }, () => {\n        if (this.validate() === \"success\") {\n          const asNum = Number(value);\n          const weight = this.props.inKg ? asNum : lbs2kg(asNum);\n          this.props.setBarAndCollarsWeightKg(this.props.lift, weight);\n        }\n      });\n    }\n  };\n\n  getLiftLabel = (lift: Lift): string => {\n    switch (lift) {\n      case \"S\":\n        return \"Squat\";\n      case \"B\":\n        return \"Bench\";\n      case \"D\":\n        return \"Deadlift\";\n      default:\n        checkExhausted(lift);\n        return \"\";\n    }\n  };\n\n  render() {\n    const validation: Validation = this.validate();\n    const label =\n      this.getLiftLabel(this.props.lift) + \" Bar + Collars weight (\" + (this.props.inKg ? \"kg\" : \"lbs\") + \")\";\n\n    return (\n      <Form.Group>\n        <Form.Label>{label}</Form.Label>\n        <Form.Control\n          type=\"number\"\n          step={2.5}\n          value={this.state.value}\n          onChange={this.handleChange}\n          isValid={validation === \"success\"}\n          isInvalid={validation === \"error\"}\n        />\n      </Form.Group>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  inKg: state.meet.inKg,\n  squatBarAndCollarsWeightKg: state.meet.squatBarAndCollarsWeightKg,\n  benchBarAndCollarsWeightKg: state.meet.benchBarAndCollarsWeightKg,\n  deadliftBarAndCollarsWeightKg: state.meet.deadliftBarAndCollarsWeightKg\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    setBarAndCollarsWeightKg: (lift: Lift, weightKg: number) => dispatch(setBarAndCollarsWeightKg(lift, weightKg))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(BarAndCollarsWeightKg);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines a widget for selecting a plate color.\n\nimport React from \"react\";\nimport { ColorResult, TwitterPicker } from \"react-color\";\n\nimport { PlateColors } from \"../../constants/plateColors\";\n\nimport styles from \"./ColorPicker.module.scss\";\n\ninterface OwnProps {\n  color: string;\n  onChange: (color: string) => void;\n}\n\ntype Props = OwnProps;\n\ninterface InternalState {\n  displayColorPicker: boolean;\n  color: string;\n\n  // Handle returned by setTimeout() for the timeout that closes the color\n  // selector popup after the mouse leaves and time has elapsed.\n  timeoutId: any;\n}\n\nclass ColorPicker extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      displayColorPicker: false,\n      color: props.color,\n      timeoutId: null\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n    this.handleClose = this.handleClose.bind(this);\n    this.handleMouseLeave = this.handleMouseLeave.bind(this);\n    this.handleMouseEnter = this.handleMouseEnter.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleClick = () => {\n    clearTimeout(this.state.timeoutId);\n    this.setState({ displayColorPicker: !this.state.displayColorPicker, timeoutId: null });\n  };\n\n  handleClose = () => {\n    clearTimeout(this.state.timeoutId);\n    this.setState({ displayColorPicker: false, timeoutId: null });\n  };\n\n  handleMouseLeave = () => {\n    // Close the popup after a second has elapsed.\n    // This gives the user a chance to bring the mouse back into the popup.\n    let timeoutId = setTimeout(() => {\n      this.setState({ displayColorPicker: false, timeoutId: null });\n    }, 1000);\n    this.setState({ timeoutId: timeoutId });\n  };\n\n  handleMouseEnter = () => {\n    // Prevent any close-popup timeout from executing.\n    if (this.state.timeoutId !== null) {\n      clearTimeout(this.state.timeoutId);\n      this.setState({ timeoutId: null });\n    }\n  };\n\n  handleChange = (color: ColorResult, event: any) => {\n    // @types/react-color doesn't define an event for onChange but it is published in\n    // their documentation: https://casesandberg.github.io/react-color/#api-onChange\n    // If the event was a MouseEvent|TouchEvent (i.e they clicked a swatch) we assume\n    // that the user wants the panel to close immediately.\n    const displayColorPicker = event.clientX === undefined;\n    const hex = color.hex.toUpperCase();\n    this.setState({ displayColorPicker, color: hex });\n    this.props.onChange(hex);\n  };\n\n  render() {\n    const colors = Object.values(PlateColors);\n\n    let picker = null;\n    if (this.state.displayColorPicker) {\n      picker = (\n        <div className={styles.popover}>\n          <div className={styles.cover} onClick={this.handleClose} />\n          <TwitterPicker color={this.state.color} colors={colors} triangle=\"hide\" onChange={this.handleChange as any} />\n        </div>\n      );\n    }\n\n    return (\n      <div onMouseLeave={this.handleMouseLeave} onMouseEnter={this.handleMouseEnter}>\n        <div className={styles.swatch} onClick={this.handleClick}>\n          <div className={styles.color} style={{ background: this.state.color }} />\n        </div>\n        {picker}\n      </div>\n    );\n  }\n}\n\nexport default ColorPicker;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Displays the selector for determining how many plates are available\n// to loaders on one side.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport FormControl from \"react-bootstrap/FormControl\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport Table from \"react-bootstrap/Table\";\n\nimport ColorPicker from \"./ColorPicker\";\n\nimport { setPlateConfig } from \"../../actions/meetSetupActions\";\n\nimport { kg2lbs } from \"../../logic/units\";\n\nimport { Plate } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { Dispatch } from \"redux\";\nimport { FormControlTypeHack, isString } from \"../../types/utils\";\nimport { isNumber } from \"util\";\n\ninterface StateProps {\n  inKg: boolean;\n  plates: Array<Plate>;\n}\n\ninterface DispatchProps {\n  setPlateConfig: (weight: number, amount: number, color: string) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\nclass Plates extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    this.validateAmountInput = this.validateAmountInput.bind(this);\n    this.updateHandler = this.updateHandler.bind(this);\n  }\n\n  validateAmountInput: (id: string) => \"error\" | null | undefined = id => {\n    const widget: any = document.getElementById(id);\n\n    // This can happen because the FormGroup is created before the widget exists.\n    if (widget === null) return;\n    const value = widget.value;\n\n    if (value === undefined) return \"error\";\n\n    // Ensure that the value is an integer in a reasonable range.\n    let asNum = Number(value);\n    if (Math.floor(asNum) !== asNum) return \"error\";\n    if (asNum < 0 || asNum > 20) return \"error\";\n    if (String(asNum) !== value) return \"error\";\n\n    return null;\n  };\n\n  updateHandler = (weightKg: number, id: string, amount: string | number | string[] | undefined, color: string) => {\n    if (!isString(amount) && !isNumber(amount)) {\n      throw new Error(`Expected either a string or a number, but got ${amount}`);\n    }\n\n    if (this.validateAmountInput(id) === \"error\") {\n      // Although no state is set, this is used to trigger the FormGroup\n      // to re-query the validationState on change.\n      return this.setState({});\n    }\n\n    this.props.setPlateConfig(weightKg, Number(amount), color);\n  };\n\n  renderWeightRow = (weightKg: number, amount: number, color: string) => {\n    // The input event value isn't passed by the event, so we assign a unique ID\n    // and then just search the whole document for it.\n    const id = \"weight\" + String(weightKg);\n\n    // Don't use displayWeight(): the 1.25lb plates need two decimal places.\n    const weight = this.props.inKg ? weightKg : kg2lbs(weightKg);\n\n    return (\n      <tr key={id}>\n        <td>{weight}</td>\n        <td>\n          {/* TODO: Validation state styling */}\n          <FormGroup style={{ marginBottom: 0 }}>\n            <FormControl\n              id={id}\n              onChange={(e: React.FormEvent<FormControlTypeHack>) =>\n                this.updateHandler(weightKg, id, e.currentTarget.value, color)\n              }\n              type=\"number\"\n              defaultValue={amount.toString()}\n              min={0}\n            />\n          </FormGroup>\n        </td>\n        <td>\n          <ColorPicker color={color} onChange={color => this.updateHandler(weightKg, id, amount, color)} />\n        </td>\n      </tr>\n    );\n  };\n\n  render() {\n    const plateRows = this.props.plates.map((obj: Plate) =>\n      this.renderWeightRow(obj.weightKg, obj.pairCount, obj.color)\n    );\n    const units = this.props.inKg ? \"kg\" : \"lbs\";\n\n    return (\n      <div>\n        <Table striped size=\"sm\" hover style={{ margin: \"0px\" }}>\n          <thead>\n            <tr>\n              <th>Weight ({units})</th>\n              <th>Pairs of Plates</th>\n              <th>Color</th>\n            </tr>\n          </thead>\n          <tbody>{plateRows}</tbody>\n        </Table>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  inKg: state.meet.inKg,\n  plates: state.meet.plates\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    setPlateConfig: (weightKg, amount, color) => dispatch(setPlateConfig(weightKg, amount, color))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(Plates);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React, { FormEvent } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport FormControl from \"react-bootstrap/FormControl\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\nimport Row from \"react-bootstrap/Row\";\n\nimport ValidatedInput from \"../ValidatedInput\";\n\nimport MeetDate from \"./MeetDate\";\nimport MeetLength from \"./MeetLength\";\nimport PlatformCounts from \"./PlatformCounts\";\nimport AutoFillRules from \"./AutoFillRules\";\nimport DivisionSelect from \"./DivisionSelect\";\nimport WeightClassesSelect from \"./WeightClassesSelect\";\nimport BarAndCollarsWeightKg from \"./BarAndCollarsWeightKg\";\nimport Plates from \"./Plates\";\n\nimport { updateMeet, setInKg } from \"../../actions/meetSetupActions\";\n\nimport { GlobalState, MeetState } from \"../../types/stateTypes\";\nimport { Dispatch } from \"redux\";\nimport { FormControlTypeHack, assertString, assertFormula, assertAgeCoefficients } from \"../../types/utils\";\nimport { AgeCoefficients, Formula, Validation } from \"../../types/dataTypes\";\n\ninterface StateProps {\n  meet: MeetState;\n  masterKey: string; // Used to force-update rules components on Auto-Fill.\n}\n\ninterface DispatchProps {\n  setMeetName: (name: string) => void;\n  setCountry: (country: string) => void;\n  setState: (state: string) => void;\n  setCity: (city: string) => void;\n  setFederation: (fed: string) => void;\n  setCombineSleevesAndWraps: (event: FormEvent<FormControlTypeHack>) => void;\n  setAllow4thAttempts: (event: FormEvent<FormControlTypeHack>) => void;\n  setInKg: (event: FormEvent<FormControlTypeHack>) => void;\n  setShowAlternateUnits: (event: FormEvent<FormControlTypeHack>) => void;\n  setFormula: (event: FormEvent<FormControlTypeHack>) => void;\n  setAgeCoefficients: (event: FormEvent<FormControlTypeHack>) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\nconst yesNoBooleanOptions = [\n  <option key=\"Yes\" value=\"Yes\">\n    Yes\n  </option>,\n  <option key=\"No\" value=\"No\">\n    No\n  </option>\n];\n\n// The widgets speak strings, but the state speaks boolean.\nconst yesNoToBoolean = (yesno: string): boolean => {\n  if (yesno === \"Yes\") return true;\n  return false;\n};\nconst yesNoFromBoolean = (bool: boolean): string => {\n  if (bool === true) return \"Yes\";\n  return \"No\";\n};\n\nclass MeetSetup extends React.Component<Props> {\n  validateRequiredText = (value?: string): Validation => {\n    if (!value) return \"warning\";\n    if (value.includes('\"')) return \"error\";\n    return \"success\";\n  };\n\n  render() {\n    // This is used as a key to force unit-dependent components to re-initialize state.\n    const inKg = String(this.props.meet.inKg);\n\n    return (\n      <Container>\n        <Row>\n          <Col md={4}>\n            <Card border=\"info\">\n              <Card.Header>Sanction Information</Card.Header>\n              <Card.Body>\n                <ValidatedInput\n                  label=\"Meet Name\"\n                  placeholder=\"Meet Name\"\n                  initialValue={this.props.meet.name}\n                  validate={this.validateRequiredText}\n                  onSuccess={this.props.setMeetName}\n                  keepMargin={true}\n                />\n                <ValidatedInput\n                  label=\"Country\"\n                  placeholder=\"Country\"\n                  initialValue={this.props.meet.country}\n                  validate={this.validateRequiredText}\n                  onSuccess={this.props.setCountry}\n                  keepMargin={true}\n                />\n                <ValidatedInput\n                  label=\"State/Province\"\n                  placeholder=\"State/Province\"\n                  initialValue={this.props.meet.state}\n                  validate={this.validateRequiredText}\n                  onSuccess={this.props.setState}\n                  keepMargin={true}\n                />\n                <ValidatedInput\n                  label=\"City/Town\"\n                  placeholder=\"City/Town\"\n                  initialValue={this.props.meet.city}\n                  validate={this.validateRequiredText}\n                  onSuccess={this.props.setCity}\n                  keepMargin={true}\n                />\n                <ValidatedInput\n                  label=\"Federation\"\n                  placeholder=\"Federation\"\n                  initialValue={this.props.meet.federation}\n                  validate={this.validateRequiredText}\n                  onSuccess={this.props.setFederation}\n                  keepMargin={true}\n                />\n                <MeetDate />\n                <MeetLength />\n                <PlatformCounts />\n              </Card.Body>\n            </Card>\n          </Col>\n\n          <Col md={4}>\n            <Card>\n              <Card.Header>Competition Rules</Card.Header>\n              <Card.Body>\n                <AutoFillRules />\n                <DivisionSelect key={this.props.masterKey} />\n                <WeightClassesSelect\n                  sex=\"M\"\n                  label=\"Men's Weight Classes (kg), omit SHW\"\n                  key={this.props.masterKey + \"-M\"}\n                />\n                <WeightClassesSelect\n                  sex=\"F\"\n                  label=\"Women's Weight Classes (kg), omit SHW\"\n                  key={this.props.masterKey + \"-F\"}\n                />\n                <WeightClassesSelect\n                  sex=\"Mx\"\n                  label=\"Mx Weight Classes (kg), omit SHW\"\n                  key={this.props.masterKey + \"-Mx\"}\n                />\n\n                <FormGroup key={this.props.masterKey + \"-formula\"}>\n                  <Form.Label>Best Lifter Formula</Form.Label>\n                  <FormControl\n                    as=\"select\"\n                    defaultValue={this.props.meet.formula}\n                    onChange={this.props.setFormula}\n                    className=\"custom-select\"\n                  >\n                    <option value=\"Bodyweight Multiple\">Bodyweight Multiple</option>\n                    <option value=\"Dots\">Dots</option>\n                    <option value=\"Glossbrenner\">Glossbrenner</option>\n                    <option value=\"IPF Points\">IPF Points</option>\n                    <option value=\"NASA Points\">NASA Points</option>\n                    <option value=\"Reshel\">Reshel</option>\n                    <option value=\"Schwartz/Malone\">Schwartz/Malone</option>\n                    <option value=\"Total\">Total</option>\n                    <option value=\"Wilks\">Wilks</option>\n                  </FormControl>\n                </FormGroup>\n\n                <FormGroup key={this.props.masterKey + \"-ageCoefficients\"}>\n                  <Form.Label>Age Coefficients for Best Juniors/Masters Lifter</Form.Label>\n                  <FormControl\n                    as=\"select\"\n                    defaultValue={this.props.meet.ageCoefficients}\n                    onChange={this.props.setAgeCoefficients}\n                    className=\"custom-select\"\n                  >\n                    <option key=\"None\" value=\"None\">\n                      None\n                    </option>\n                    <option key=\"FosterMcCulloch\" value=\"FosterMcCulloch\">\n                      Foster-McCulloch\n                    </option>\n                  </FormControl>\n                </FormGroup>\n\n                <FormGroup key={this.props.masterKey + \"-sleeves-wraps\"}>\n                  <Form.Label>Should Sleeves and Wraps be combined for placing?</Form.Label>\n                  <FormControl\n                    as=\"select\"\n                    defaultValue={yesNoFromBoolean(this.props.meet.combineSleevesAndWraps)}\n                    onChange={this.props.setCombineSleevesAndWraps}\n                    className=\"custom-select\"\n                  >\n                    {yesNoBooleanOptions}\n                  </FormControl>\n                </FormGroup>\n\n                <FormGroup key={this.props.masterKey + \"-4th-attempts\"}>\n                  <Form.Label>Can lifters take 4th attempts for records?</Form.Label>\n                  <FormControl\n                    as=\"select\"\n                    defaultValue={yesNoFromBoolean(this.props.meet.allow4thAttempts)}\n                    onChange={this.props.setAllow4thAttempts}\n                    className=\"custom-select\"\n                  >\n                    {yesNoBooleanOptions}\n                  </FormControl>\n                </FormGroup>\n              </Card.Body>\n            </Card>\n          </Col>\n\n          <Col md={4}>\n            <Card border=\"info\">\n              <Card.Header>Weights and Loading Setup</Card.Header>\n              <Card.Body>\n                <FormGroup>\n                  <Form.Label>In what units are attempts and bodyweights?</Form.Label>\n                  <FormControl\n                    as=\"select\"\n                    defaultValue={yesNoFromBoolean(this.props.meet.inKg)}\n                    onChange={this.props.setInKg}\n                    className=\"custom-select\"\n                  >\n                    <option key=\"Yes\" value=\"Yes\">\n                      Kilograms\n                    </option>\n                    <option key=\"No\" value=\"No\">\n                      Pounds\n                    </option>\n                  </FormControl>\n                </FormGroup>\n\n                <FormGroup>\n                  <Form.Label>Also show attempts in {this.props.meet.inKg ? \"pounds\" : \"kilograms\"}?</Form.Label>\n                  <FormControl\n                    as=\"select\"\n                    defaultValue={yesNoFromBoolean(this.props.meet.showAlternateUnits)}\n                    onChange={this.props.setShowAlternateUnits}\n                    className=\"custom-select\"\n                  >\n                    {yesNoBooleanOptions}\n                  </FormControl>\n                </FormGroup>\n\n                <BarAndCollarsWeightKg key={\"S\" + inKg} lift=\"S\" />\n                <BarAndCollarsWeightKg key={\"B\" + inKg} lift=\"B\" />\n                <BarAndCollarsWeightKg key={\"D\" + inKg} lift=\"D\" />\n                <Plates />\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  meet: state.meet,\n  masterKey: state.meet.divisions.join()\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  setMeetName: (name: string) => dispatch(updateMeet({ name: name })),\n  setCountry: (country: string) => dispatch(updateMeet({ country: country })),\n  setState: (state: string) => dispatch(updateMeet({ state: state })),\n  setCity: (city: string) => dispatch(updateMeet({ city: city })),\n  setFederation: (fed: string) => dispatch(updateMeet({ federation: fed })),\n  setCombineSleevesAndWraps: event =>\n    assertString(event.currentTarget.value) &&\n    dispatch(updateMeet({ combineSleevesAndWraps: yesNoToBoolean(event.currentTarget.value) })),\n  setAllow4thAttempts: event =>\n    assertString(event.currentTarget.value) &&\n    dispatch(updateMeet({ allow4thAttempts: yesNoToBoolean(event.currentTarget.value) })),\n  setInKg: event =>\n    assertString(event.currentTarget.value) && dispatch(setInKg(yesNoToBoolean(event.currentTarget.value))),\n  setShowAlternateUnits: event =>\n    assertString(event.currentTarget.value) &&\n    dispatch(updateMeet({ showAlternateUnits: yesNoToBoolean(event.currentTarget.value) })),\n  setFormula: event =>\n    assertString(event.currentTarget.value) &&\n    assertFormula(event.currentTarget.value) &&\n    dispatch(updateMeet({ formula: event.currentTarget.value })),\n  setAgeCoefficients: event =>\n    assertString(event.currentTarget.value) &&\n    assertAgeCoefficients(event.currentTarget.value) &&\n    dispatch(updateMeet({ ageCoefficients: event.currentTarget.value }))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(MeetSetup);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport MeetSetup from \"../components/meet-setup/MeetSetup\";\n\nclass MeetSetupContainer extends React.Component<{}> {\n  render() {\n    return <MeetSetup />;\n  }\n}\n\nexport default MeetSetupContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the table of LifterRows\n// Generalized to accept a rowRenderer component, so that different pages\n// can render different row level items, while re-using the logic in this component\n// to handle rendering one row per lifter\n// This is the parent component that determines how many rows to render,\n// what data each row should see, etc.\n\nimport React from \"react\";\n\nimport { Entry } from \"../../types/dataTypes\";\n\ninterface OwnProps {\n  entries: Array<Entry>;\n  rowRenderer: any;\n}\n\ntype Props = OwnProps;\n\nclass LifterTable extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderRows = this.renderRows.bind(this);\n  }\n\n  renderRows = () => {\n    const LifterRow = this.props.rowRenderer;\n    const { entries } = this.props;\n    return entries.map(entry => <LifterRow key={entry.id} id={entry.id} />);\n  };\n\n  render() {\n    return <div>{this.renderRows()}</div>;\n  }\n}\n\nexport default LifterTable;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { Validation } from \"../types/dataTypes\";\n\n// Validates a string date in the ISO8601 \"YYYY-MM-DD\" format.\nexport const validateIso8601Date = (s?: string): Validation => {\n  if (typeof s !== \"string\") return \"error\";\n\n  if (s === \"\") return null;\n  if (s.length !== \"YYYY-MM-DD\".length) return \"error\";\n\n  const pieces: Array<string> = s.split(\"-\");\n  if (pieces.length !== 3) return \"error\";\n\n  const [yearStr, monthStr, dayStr] = pieces;\n\n  // Ensure that the strings only contain numbers, because the Number() constructor\n  // will ignore whitespace.\n  const onlyNumbers = /^[0-9]+$/;\n\n  if (!yearStr.match(onlyNumbers)) return \"error\";\n  if (!monthStr.match(onlyNumbers)) return \"error\";\n  if (!dayStr.match(onlyNumbers)) return \"error\";\n\n  const year = Number(yearStr);\n  const month = Number(monthStr);\n  const day = Number(dayStr);\n\n  if (isNaN(year) || isNaN(month) || isNaN(day)) return \"error\";\n  if (year <= 0 || month <= 0 || month > 12 || day <= 0 || day > 31) return \"error\";\n\n  // Disallow dates that are out of the plausible range for powerlifting.\n  if (year < 1880 || year >= new Date().getFullYear() + 2) return \"error\";\n\n  return \"success\";\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport {\n  NewRegistrationAction,\n  DeleteRegistrationAction,\n  UpdateRegistrationAction,\n  MergePlatformAction\n} from \"../types/actionTypes\";\nimport { Entry } from \"../types/dataTypes\";\n\n// Adds a blank (or default-initalized) row to the registrations table.\nexport const newRegistration = (obj: Partial<Entry>): NewRegistrationAction => {\n  return {\n    type: \"NEW_REGISTRATION\",\n    overwriteDefaults: obj\n  };\n};\n\n// Deletes an existing entry from the registrations table.\n//\n// Corresponding data from the registration is *not* deleted, for example\n// from the lifting page, but because the state.registrations.lookups map\n// will no longer find an associated entry given a global unique EntryId,\n// the data will simply stop being displayed.\n//\n// The global ID from the deleted entry is not recycled.\nexport const deleteRegistration = (entryId: number): DeleteRegistrationAction => {\n  return {\n    type: \"DELETE_REGISTRATION\",\n    entryId: entryId\n  };\n};\n\n// Updates an existing entry in the registrations table.\n//\n// Because there are a lot of fields in a single entry, for the sake of\n// simplicity, this is a general method that knows how to update the\n// existing entry object with whatever has changed, as passed\n// through object properties.\nexport const updateRegistration = (entryId: number, obj: Partial<Entry>): UpdateRegistrationAction => {\n  return {\n    type: \"UPDATE_REGISTRATION\",\n    entryId: entryId,\n    changes: obj\n  };\n};\n\n// Deletes all entries assigned to a given (day, platform), and then adds entries\n// assigned to that (day, platform) from a foreign save state.\nexport const mergePlatform = (day: number, platform: number, platformEntries: Array<Entry>): MergePlatformAction => {\n  return {\n    type: \"MERGE_PLATFORM\",\n    day: day,\n    platform: platform,\n    platformEntries: platformEntries\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines a row in the LifterTable on the Registration page.\n// This provides a bunch of widgets, each of which correspond to\n// the state of a single entry.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Form from \"react-bootstrap/Form\";\nimport InputGroup from \"react-bootstrap/InputGroup\";\nimport Row from \"react-bootstrap/Row\";\n\nimport Select from \"react-select\";\n\nimport ValidatedInput from \"../ValidatedInput\";\n\nimport { validateIso8601Date } from \"../../validation/iso8601Date\";\n\nimport { deleteRegistration, updateRegistration } from \"../../actions/registrationActions\";\nimport { FormControlTypeHack, checkExhausted, assertString, assertFlight, assertSex } from \"../../types/utils\";\nimport { ActionMeta } from \"react-select/lib/types\";\nimport { Entry, Equipment } from \"../../types/dataTypes\";\nimport { Dispatch } from \"redux\";\nimport { GlobalState } from \"../../types/stateTypes\";\n\nconst eventOptions = [\n  { value: \"S\", label: \"S\" },\n  { value: \"B\", label: \"B\" },\n  { value: \"D\", label: \"D\" },\n  { value: \"BD\", label: \"BD\" },\n  { value: \"SBD\", label: \"SBD\" },\n  { value: \"SB\", label: \"SB\" },\n  { value: \"SD\", label: \"SD\" }\n];\n\ninterface OwnProps {\n  id: number;\n}\n\ninterface State {\n  selectedDay: number;\n}\n\ntype Props = OwnProps & ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nclass LifterRow extends React.Component<Props, State> {\n  constructor(props: Props) {\n    super(props);\n\n    // Store the Day in state to update the Platform options when the Day changes.\n    // Store the Birth Date in state to re-render when a new date is selected\n    this.state = {\n      selectedDay: props.entry.day\n    };\n\n    this.deleteRegistrationClick = this.deleteRegistrationClick.bind(this);\n    this.updateRegistrationDay = this.updateRegistrationDay.bind(this);\n    this.updateRegistrationPlatform = this.updateRegistrationPlatform.bind(this);\n    this.updateRegistrationFlight = this.updateRegistrationFlight.bind(this);\n    this.updateRegistrationName = this.updateRegistrationName.bind(this);\n    this.updateRegistrationSex = this.updateRegistrationSex.bind(this);\n    this.updateRegistrationLot = this.updateRegistrationLot.bind(this);\n    this.updateRegistrationMemberId = this.updateRegistrationMemberId.bind(this);\n    this.updateRegistrationBirthDate = this.updateRegistrationBirthDate.bind(this);\n    this.updateRegistrationCountry = this.updateRegistrationCountry.bind(this);\n    this.updateRegistrationState = this.updateRegistrationState.bind(this);\n    this.updateRegistrationDivisions = this.updateRegistrationDivisions.bind(this);\n    this.updateRegistrationEvents = this.updateRegistrationEvents.bind(this);\n    this.updateRegistrationEquipment = this.updateRegistrationEquipment.bind(this);\n    this.updateRegistrationTeam = this.updateRegistrationTeam.bind(this);\n    this.updateRegistrationInstagram = this.updateRegistrationInstagram.bind(this);\n    this.updateRegistrationNotes = this.updateRegistrationNotes.bind(this);\n  }\n\n  deleteRegistrationClick(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) {\n    this.props.deleteRegistration(this.props.id);\n  }\n\n  updateRegistrationDay(event: React.FormEvent<FormControlTypeHack>) {\n    const day = Number(event.currentTarget.value);\n    const entry = this.props.entry;\n\n    // Also check whether the platform is now impossible.\n    let platform = entry.platform;\n    if (platform > this.props.meet.platformsOnDays[day - 1]) {\n      platform = 1; // This matches the default behavior of the select element.\n    }\n\n    if (entry.day !== day) {\n      this.setState({ selectedDay: day });\n      this.props.updateRegistration(this.props.id, { day: day, platform: platform });\n    }\n  }\n\n  updateRegistrationPlatform(event: React.FormEvent<FormControlTypeHack>) {\n    const platform = Number(event.currentTarget.value);\n    if (this.props.entry.platform !== platform) {\n      this.props.updateRegistration(this.props.id, { platform: platform });\n    }\n  }\n\n  updateRegistrationFlight(event: React.FormEvent<FormControlTypeHack>) {\n    const value = event.currentTarget.value;\n    if (this.props.entry.flight !== value && assertString(value) && assertFlight(value)) {\n      this.props.updateRegistration(this.props.id, { flight: value });\n    }\n  }\n\n  updateRegistrationName(event: React.FocusEvent<HTMLInputElement>) {\n    const name = event.currentTarget.value;\n    if (this.props.entry.name !== name && assertString(name)) {\n      this.props.updateRegistration(this.props.id, { name: name });\n    }\n  }\n\n  updateRegistrationSex(event: React.FormEvent<FormControlTypeHack>) {\n    const sex = event.currentTarget.value;\n    if (this.props.entry.sex !== sex && assertString(sex) && assertSex(sex)) {\n      this.props.updateRegistration(this.props.id, { sex: sex });\n    }\n  }\n\n  updateRegistrationLot = (lot: string) => {\n    const asNumber = Number(lot);\n    if (asNumber >= 0 && asNumber !== this.props.entry.lot) {\n      this.props.updateRegistration(this.props.id, { lot: asNumber });\n    }\n  };\n\n  updateRegistrationMemberId = (event: React.FocusEvent<HTMLInputElement>) => {\n    const memberId = event.target.value;\n    if (this.props.entry.memberId !== memberId && typeof memberId === \"string\") {\n      this.props.updateRegistration(this.props.id, { memberId: memberId });\n    }\n  };\n\n  updateRegistrationBirthDate = (birthDate: string) => {\n    if (this.props.entry.birthDate !== birthDate) {\n      this.props.updateRegistration(this.props.id, { birthDate: birthDate });\n    }\n  };\n\n  updateRegistrationCountry = (country: string) => {\n    if (this.props.entry.country !== country) {\n      this.props.updateRegistration(this.props.id, { country: country });\n    }\n  };\n\n  updateRegistrationState = (state: string) => {\n    if (this.props.entry.state !== state) {\n      this.props.updateRegistration(this.props.id, { state: state });\n    }\n  };\n\n  updateRegistrationDivisions(value: any, actionMeta: ActionMeta) {\n    // Value is an array of { value, label } objects.\n    // Since updates are synchronous, we can just compare lengths.\n    if (value.length !== this.props.entry.divisions.length) {\n      let divisions = [];\n      for (let i = 0; i < value.length; i++) {\n        divisions.push(value[i].label);\n      }\n      this.props.updateRegistration(this.props.id, { divisions: divisions });\n    }\n  }\n\n  updateRegistrationEvents(value: any, actionMeta: ActionMeta) {\n    // Value is an array of { value, label } objects.\n    // Since updates are synchronous, we can just compare lengths.\n    if (value.length !== this.props.entry.events.length) {\n      let events = [];\n      for (let i = 0; i < value.length; i++) {\n        events.push(value[i].label);\n      }\n      this.props.updateRegistration(this.props.id, { events: events });\n    }\n  }\n\n  updateRegistrationEquipment(event: React.FormEvent<FormControlTypeHack>) {\n    const equipment = event.currentTarget.value as Equipment;\n    if (this.props.entry.equipment !== equipment) {\n      // Ensure value is something we expect & assist the compiler in helping us\n      switch (equipment) {\n        case \"Bare\":\n        case \"Sleeves\":\n        case \"Wraps\":\n        case \"Single-ply\":\n        case \"Multi-ply\":\n          this.props.updateRegistration(this.props.id, { equipment: equipment });\n          break;\n        default:\n          checkExhausted(equipment);\n          break;\n      }\n    }\n  }\n\n  updateRegistrationTeam = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (assertString(event.target.value)) {\n      this.props.updateRegistration(this.props.id, { team: event.target.value });\n    }\n  };\n\n  updateRegistrationInstagram = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (assertString(event.target.value)) {\n      this.props.updateRegistration(this.props.id, { instagram: event.target.value });\n    }\n  };\n\n  updateRegistrationNotes = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (assertString(event.target.value)) {\n      this.props.updateRegistration(this.props.id, { notes: event.target.value });\n    }\n  };\n\n  render() {\n    const entry = this.props.entry;\n\n    let dayOptions = [];\n    for (let i = 1; i <= this.props.meet.lengthDays; i++) {\n      dayOptions.push(\n        <option value={i} key={i}>\n          {i}\n        </option>\n      );\n    }\n\n    let platformOptions = [];\n    for (let i = 1; i <= this.props.meet.platformsOnDays[entry.day - 1]; i++) {\n      platformOptions.push(\n        <option value={i} key={i}>\n          {i}\n        </option>\n      );\n    }\n\n    let divisionOptions = [];\n    for (let i = 0; i < this.props.meet.divisions.length; i++) {\n      let division = this.props.meet.divisions[i];\n      divisionOptions.push({ value: division, label: division });\n    }\n\n    let selectedDivisions = [];\n    for (let i = 0; i < entry.divisions.length; i++) {\n      const division = entry.divisions[i];\n      selectedDivisions.push({ value: division, label: division });\n    }\n\n    let selectedEvents = [];\n    for (let i = 0; i < entry.events.length; i++) {\n      const events = entry.events[i];\n      selectedEvents.push({ value: events, label: events });\n    }\n\n    const gridStyle = { padding: \"0px\", margin: \"0px\" };\n\n    return (\n      <Card>\n        <Card.Header style={{ display: \"flex\" }}>\n          <Form.Control type=\"text\" placeholder=\"Name\" defaultValue={entry.name} onBlur={this.updateRegistrationName} />\n          <Button onClick={this.deleteRegistrationClick} variant=\"danger\" style={{ marginLeft: \"15px\" }}>\n            Delete\n          </Button>\n        </Card.Header>\n        <Card.Body>\n          <Container style={gridStyle}>\n            <Row>\n              {/* Day */}\n              <Col md={1}>\n                <Form.Group>\n                  <Form.Label>Day</Form.Label>\n                  <Form.Control\n                    defaultValue={this.state.selectedDay}\n                    as=\"select\"\n                    onChange={this.updateRegistrationDay}\n                    className=\"custom-select\"\n                  >\n                    {dayOptions}\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n\n              {/* Platform */}\n              <Col md={1}>\n                <Form.Group>\n                  <Form.Label>Platform</Form.Label>\n                  <Form.Control\n                    defaultValue={entry.platform}\n                    as=\"select\"\n                    onChange={this.updateRegistrationPlatform}\n                    className=\"custom-select\"\n                  >\n                    {platformOptions}\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n\n              {/* Flight */}\n              <Col md={1}>\n                <Form.Group>\n                  <Form.Label>Flight</Form.Label>\n                  <Form.Control\n                    defaultValue={entry.flight}\n                    as=\"select\"\n                    onChange={this.updateRegistrationFlight}\n                    className=\"custom-select\"\n                  >\n                    <option value=\"A\">A</option>\n                    <option value=\"B\">B</option>\n                    <option value=\"C\">C</option>\n                    <option value=\"D\">D</option>\n                    <option value=\"E\">E</option>\n                    <option value=\"F\">F</option>\n                    <option value=\"G\">G</option>\n                    <option value=\"H\">H</option>\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n\n              {/* Sex */}\n              <Col md={1}>\n                <Form.Group>\n                  <Form.Label>Sex</Form.Label>\n                  <Form.Control\n                    defaultValue={entry.sex}\n                    as=\"select\"\n                    onChange={this.updateRegistrationSex}\n                    className=\"custom-select\"\n                  >\n                    <option value=\"M\">M</option>\n                    <option value=\"F\">F</option>\n                    <option value=\"Mx\">Mx</option>\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n\n              {/* Equipment */}\n              <Col md={2}>\n                <Form.Group>\n                  <Form.Label>Equipment</Form.Label>\n                  <Form.Control\n                    defaultValue={entry.equipment}\n                    as=\"select\"\n                    onChange={this.updateRegistrationEquipment}\n                    className=\"custom-select\"\n                  >\n                    <option value=\"Bare\">Bare</option>\n                    <option value=\"Sleeves\">Sleeves</option>\n                    <option value=\"Wraps\">Wraps</option>\n                    <option value=\"Single-ply\">Single-ply</option>\n                    <option value=\"Multi-ply\">Multi-ply</option>\n                  </Form.Control>\n                </Form.Group>\n              </Col>\n\n              {/* Divisions */}\n              <Col md={4}>\n                <Form.Group>\n                  <Form.Label>Divisions</Form.Label>\n                  <Select\n                    menuPlacement=\"auto\"\n                    options={divisionOptions}\n                    isClearable={false}\n                    isMulti={true}\n                    onChange={this.updateRegistrationDivisions}\n                    defaultValue={selectedDivisions}\n                  />\n                </Form.Group>\n              </Col>\n\n              {/* Events */}\n              <Col md={2}>\n                <Form.Group>\n                  <Form.Label>Events</Form.Label>\n                  <Select\n                    menuPlacement=\"auto\"\n                    options={eventOptions}\n                    isClearable={false}\n                    isMulti={true}\n                    onChange={this.updateRegistrationEvents}\n                    defaultValue={selectedEvents}\n                  />\n                </Form.Group>\n              </Col>\n            </Row>\n          </Container>\n\n          <Container style={gridStyle}>\n            <Row>\n              {/* Date of Birth */}\n              <Col md={2}>\n                <Form.Group>\n                  <Form.Label>Date of Birth</Form.Label>\n                  <ValidatedInput\n                    initialValue={entry.birthDate}\n                    placeholder=\"YYYY-MM-DD\"\n                    validate={validateIso8601Date}\n                    onSuccess={this.updateRegistrationBirthDate}\n                  />\n                </Form.Group>\n              </Col>\n\n              {/* Member ID */}\n              <Col md={2}>\n                <Form.Group>\n                  <Form.Label>Member ID</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"ID\"\n                    defaultValue={entry.memberId}\n                    onBlur={this.updateRegistrationMemberId}\n                  />\n                </Form.Group>\n              </Col>\n\n              {/* Country */}\n              <Col md={2}>\n                <Form.Group>\n                  <Form.Label>Country</Form.Label>\n                  <ValidatedInput\n                    initialValue={entry.country}\n                    placeholder=\"Country\"\n                    validate={s => (s === \"\" ? null : \"success\")}\n                    onSuccess={this.updateRegistrationCountry}\n                  />\n                </Form.Group>\n              </Col>\n\n              {/* State */}\n              <Col md={1}>\n                <Form.Group>\n                  <Form.Label>State</Form.Label>\n                  <ValidatedInput\n                    initialValue={entry.state}\n                    placeholder=\"State\"\n                    validate={s => (s === \"\" ? null : \"success\")}\n                    onSuccess={this.updateRegistrationState}\n                  />\n                </Form.Group>\n              </Col>\n\n              {/* Lot Number */}\n              <Col md={1}>\n                <Form.Group>\n                  <Form.Label>Lot #</Form.Label>\n                  <Form.Control\n                    type=\"number\"\n                    min=\"0\"\n                    defaultValue={entry.lot === 0 ? \"\" : entry.lot.toString()}\n                    onBlur={(event: { currentTarget: { value: string } }) =>\n                      this.updateRegistrationLot(event.currentTarget.value)\n                    }\n                    onChange={(event: React.FormEvent<FormControlTypeHack> & { currentTarget: { value: string } }) =>\n                      this.updateRegistrationLot(event.currentTarget.value)\n                    }\n                  />\n                </Form.Group>\n              </Col>\n\n              {/* Notes */}\n              <Col md={4}>\n                <Form.Group>\n                  <Form.Label>Team</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"\"\n                    defaultValue={entry.team}\n                    onBlur={this.updateRegistrationTeam}\n                  />\n                </Form.Group>\n              </Col>\n            </Row>\n          </Container>\n\n          <Container style={gridStyle}>\n            <Row>\n              {/* Notes */}\n              <Col md={2}>\n                <Form.Group>\n                  <Form.Label>Instagram</Form.Label>\n                  <InputGroup>\n                    <InputGroup.Prepend>\n                      <InputGroup.Text>@</InputGroup.Text>\n                    </InputGroup.Prepend>\n                    <Form.Control\n                      type=\"text\"\n                      placeholder=\"\"\n                      defaultValue={entry.instagram}\n                      onBlur={this.updateRegistrationInstagram}\n                    />\n                  </InputGroup>\n                </Form.Group>\n              </Col>\n\n              {/* Notes */}\n              <Col md={10}>\n                <Form.Group>\n                  <Form.Label>Notes (for your personal use)</Form.Label>\n                  <Form.Control\n                    type=\"text\"\n                    placeholder=\"\"\n                    defaultValue={entry.notes}\n                    onBlur={this.updateRegistrationNotes}\n                  />\n                </Form.Group>\n              </Col>\n            </Row>\n          </Container>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps) => {\n  // Only have props for the entry corresponding to this one row.\n  const lookup = state.registration.lookup;\n  const entry = state.registration.entries[lookup[ownProps.id]];\n\n  return {\n    meet: state.meet,\n    entry: entry\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    deleteRegistration: (entryId: number) => dispatch(deleteRegistration(entryId)),\n    updateRegistration: (entryId: number, obj: Partial<Entry>) => dispatch(updateRegistration(entryId, obj))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LifterRow);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the button that adds a new entry to the registrations table.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\n\nimport { newRegistration } from \"../../actions/registrationActions\";\n\nimport { Entry } from \"../../types/dataTypes\";\nimport { Dispatch } from \"redux\";\n\ninterface DispatchProps {\n  newRegistration: (obj: Partial<Entry>) => void;\n}\n\ntype Props = DispatchProps;\n\nclass NewButton extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    this.props.newRegistration({});\n  };\n\n  render() {\n    return (\n      <Button onClick={this.handleClick} variant=\"primary\" size=\"lg\" block>\n        New Lifter\n      </Button>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    newRegistration: (obj: Partial<Entry>) => dispatch(newRegistration(obj))\n  };\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps\n)(NewButton);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines a general CSV manipulation class.\n// This is a JS port of the Python \"oplcsv.py\" library used by the OpenPowerlifting\n// main data project.\n\n// Makes a string suitable for inclusion in a simple CSV file,\n// by deleting all commas and double quotes.\nexport const csvString = (x?: number | string): string => {\n  if (x === undefined) return \"\";\n  let s = String(x);\n\n  // The OpenPowerlifting format uses commas and disallow double-quotes.\n  s = s.replace(/,/g, \" \");\n  s = s.replace(/\"/g, \" \");\n\n  // The number \"0\" is also never written out explicitly; the empty string is preferred.\n  if (s === \"0\") return \"\";\n\n  // Clean up some formatting.\n  s = s.replace(/ {2}/g, \" \").trim();\n  return s;\n};\n\n// Returns the in-spreadsheet name of a column. In standard spreadsheet software,\n// rows are numeric (1, 2, 3, ...) and columns are alphabetic (A, B, C, ...).\n// For errors, we'd like to report the column that's wrong.\n//\n// The 'index' input is zero-indexed.\nexport const getSpreadsheetColumnName = (index: number): string => {\n  const alphabet: string = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n\n  // Column name accumulator.\n  // It's built by taking repeated mods in base 26: therefore new characters\n  // are appended to the left of the accumulator.\n  let acc: string = \"\";\n  let n: number = index;\n\n  while (n >= alphabet.length) {\n    const mod = n % alphabet.length;\n    const remainder = Math.floor(n / alphabet.length);\n\n    acc = alphabet[mod] + acc;\n\n    // The subtraction is because this isn't a pure modulus operator:\n    // by analogy to base-10, \"AA\" is equivalent to \"00\", and we want to render\n    // that.\n    n = remainder - 1;\n  }\n\n  return alphabet[n] + acc;\n};\n\n// A class for managing simple CSV files. Double-quotes and commas are disallowed.\nexport class Csv {\n  fieldnames: Array<string>; // Column names.\n  rows: Array<Array<string>>; // Individual rows.\n\n  constructor() {\n    this.fieldnames = [];\n    this.rows = [];\n  }\n\n  length(): number {\n    return this.rows.length;\n  }\n\n  index(name: string): number {\n    return this.fieldnames.indexOf(name);\n  }\n\n  appendColumn(name: string): void {\n    this.fieldnames.push(name);\n    for (let i = 0; i < this.rows.length; i++) {\n      this.rows[i].push(\"\");\n    }\n  }\n\n  appendColumns(namelist: Array<string>): void {\n    this.fieldnames = this.fieldnames.concat(namelist);\n    for (let i = 0; i < this.rows.length; i++) {\n      for (let j = 0; j < namelist.length; j++) {\n        this.rows[i].push(\"\");\n      }\n    }\n  }\n\n  insertColumn(index: number, name: string): void {\n    this.fieldnames.splice(index, 0, name);\n    for (let i = 0; i < this.rows.length; i++) {\n      this.rows[i].splice(index, 0, \"\");\n    }\n  }\n\n  removeColumnByIndex(index: number): void {\n    this.fieldnames.splice(index, 1);\n    for (let i = 0; i < this.rows.length; i++) {\n      this.rows[i].splice(index, 1);\n    }\n  }\n\n  removeColumnByName(name: string): void {\n    for (let i = 0; i < this.fieldnames.length; i++) {\n      if (this.fieldnames[i] === name) {\n        this.removeColumnByIndex(i);\n        return;\n      }\n    }\n  }\n\n  removeEmptyColumns(): void {\n    for (let i = 0; i < this.fieldnames.length; i++) {\n      let empty = true;\n      for (let j = 0; j < this.rows.length; j++) {\n        if (this.rows[j][i] !== \"\") {\n          empty = false;\n          break;\n        }\n      }\n      if (empty === true) {\n        this.removeColumnByIndex(i);\n        this.removeEmptyColumns();\n        return;\n      }\n    }\n  }\n\n  // Attempts to fill in this CSV object from a string.\n  // On success, returns the `this` Csv object.\n  // On failure, returns an error string with a user-presentable message.\n  fromString(s: string): Csv | string {\n    // The string cannot contain double-quotes: programs use those to allow\n    // in-field commas, which we disallow.\n    if (s.includes('\"')) {\n      let e = 'Double-quotes (\") are disallowed.';\n      e += \" Double-quotes can be automatically inserted by spreadsheet software\";\n      e += \" when a field contains a comma. Make sure to delete all in-field commas.\";\n      return e;\n    }\n\n    // Split by newline. It's OK for \\r to remain: we'll strip each field later.\n    // This always produces an array of length at least 1.\n    //\n    // Trim the string first: it's OK if files end with \"\\n\".\n    const lines = s.trim().split(\"\\n\");\n\n    // The first row contains fieldnames.\n    const fieldnames = lines[0].split(\",\").map(x => x.trim());\n\n    // Any rows after the first contain data.\n    let rows = [];\n    for (let i = 1; i < lines.length; ++i) {\n      const row = lines[i].split(\",\").map(x => x.trim());\n      rows.push(row);\n    }\n\n    // Sanity checking time!\n    // Every column must be named.\n    for (let i = 0; i < fieldnames.length; ++i) {\n      if (fieldnames[i] === \"\") {\n        const colname = getSpreadsheetColumnName(i);\n        return \"Column \" + colname + \" is missing a column name.\";\n      }\n    }\n\n    // Every row must have the same length as the fieldnames row.\n    for (let i = 0; i < rows.length; ++i) {\n      if (rows[i].length !== fieldnames.length) {\n        const rownum = i + 2; // 1-indexed, and the first row is fieldnames.\n        let e = \"Row \" + rownum + \" has \" + rows[i].length + \" columns,\";\n        e += \" but the first row has \" + fieldnames.length + \" columns.\";\n        return e;\n      }\n    }\n\n    this.fieldnames = fieldnames;\n    this.rows = rows;\n    return this;\n  }\n\n  toString(): string {\n    const headers = this.fieldnames.join(\",\");\n    let strRows: Array<string> = [];\n    for (let i = 0; i < this.rows.length; i++) {\n      strRows.push(this.rows[i].join(\",\"));\n    }\n    return headers + \"\\n\" + strRows.join(\"\\n\") + \"\\n\";\n  }\n}\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines logic for importing Registration data from a CSV file.\n// The CSV format is very strict: no double-quotes allowed, commas are always\n// separators, and the format of each field must exactly match our internal format.\n\nimport { Csv, getSpreadsheetColumnName } from \"../export/csv\";\nimport { newDefaultEntry } from \"../entry\";\n\nimport { parseInteger, parseEquipment, parseEvent, parseSex, parseDate } from \"../parsers\";\n\nimport { Entry, Flight } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { assertFlight } from \"../../types/utils\";\n\n// Generates a string representing a downloadable CSV file, for use as an example\n// of the registration format.\n//\n// This is in code so that it can live right next to loadRegistrations()\n// for easier long-term maintenance.\nexport const makeExampleRegistrationsCsv = (): string => {\n  let csv = new Csv();\n  csv.rows = [[]]; // appendColumns() will resize the dummy row correctly.\n\n  csv.appendColumns([\"Day\", \"Platform\", \"Flight\", \"Name\", \"Sex\", \"Equipment\"]);\n  csv.appendColumns([\"Division1\", \"Division2\", \"Division3\"]);\n  csv.appendColumns([\"Event1\", \"Event2\", \"Event3\"]);\n  csv.appendColumns([\"BirthDate\", \"MemberID\", \"Country\", \"State\", \"Lot\", \"Team\"]);\n  csv.appendColumns([\"Instagram\", \"Notes\"]);\n\n  csv.rows[0][csv.index(\"Day\")] = \"1\";\n  csv.rows[0][csv.index(\"Platform\")] = \"1\";\n  csv.rows[0][csv.index(\"Flight\")] = \"A\";\n  csv.rows[0][csv.index(\"Name\")] = \"Emily Example\";\n  csv.rows[0][csv.index(\"Sex\")] = \"F\";\n  csv.rows[0][csv.index(\"Equipment\")] = \"Sleeves\";\n  csv.rows[0][csv.index(\"Division1\")] = \"Open\";\n  csv.rows[0][csv.index(\"Division2\")] = \"J20-23\";\n  // Intentionally blank: csv.rows[0][csv.index(\"Division3\")]\n  csv.rows[0][csv.index(\"Event1\")] = \"SBD\";\n  csv.rows[0][csv.index(\"Event2\")] = \"BD\";\n  // Intentionally blank: csv.rows[0][csv.index(\"Event3\")]\n  csv.rows[0][csv.index(\"BirthDate\")] = \"1998-02-16\";\n  // Intentionally blank: csv.rows[0][csv.index(\"MemberID\")]\n  csv.rows[0][csv.index(\"Country\")] = \"USA\";\n  csv.rows[0][csv.index(\"State\")] = \"NY\";\n  // Intentionally blank: csv.rows[0][csv.index(\"Lot\")]\n  // Intentionally blank: csv.rows[0][csv.index(\"Team\")]\n  csv.rows[0][csv.index(\"Instagram\")] = \"emily_example_\";\n  csv.rows[0][csv.index(\"Notes\")] = \"emily@example.com: she's the best!\";\n\n  return csv.toString();\n};\n\n// Every fieldname must be either mandatory or optional.\nconst MANDATORY_FIELDNAMES = [\"Day\", \"Platform\", \"Flight\", \"Name\", \"Sex\", \"Equipment\", \"Division1\", \"Event1\"];\nconst OPTIONAL_FIELDNAMES = [\n  \"Division2\",\n  \"Division3\",\n  \"Division4\",\n  \"Division5\",\n  \"Event2\",\n  \"Event3\",\n  \"Event4\",\n  \"Event5\",\n  \"BirthDate\",\n  \"MemberID\",\n  \"Country\",\n  \"State\",\n  \"Lot\",\n  \"Team\",\n  \"Instagram\",\n  \"Notes\"\n];\n\n// Attempts to load registration information from a CSV object.\n//\n// On success, returns an array of Entry objects.\n//   NOTE CAREFULLY that the global state is not updated by this function.\n//   The caller must integrate the Entry objects, updating EntryID Tracking.\n// On failure, returns an error string with a user-presentable message.\nexport const loadRegistrations = (state: GlobalState, csv: Csv): Array<Entry> | string => {\n  // Check the existent fieldnames for sanity.\n  for (let i = 0; i < csv.fieldnames.length; ++i) {\n    const name: string = csv.fieldnames[i];\n\n    // Every fieldname that appears must be known.\n    if (!MANDATORY_FIELDNAMES.includes(name) && !OPTIONAL_FIELDNAMES.includes(name)) {\n      const colname = getSpreadsheetColumnName(i);\n      const allfields: string = MANDATORY_FIELDNAMES.join(\", \") + \", \" + OPTIONAL_FIELDNAMES.join(\", \");\n\n      let e = \"Unknown fieldname '\" + name + \"' in column \" + colname + \".\";\n      e += \" Here's a list of all accepted column names: \" + allfields;\n      return e;\n    }\n\n    // Fieldnames cannot be repeated.\n    for (let j = i + 1; j < csv.fieldnames.length; ++j) {\n      if (csv.fieldnames[j] === csv.fieldnames[i]) {\n        const iname = getSpreadsheetColumnName(i);\n        const jname = getSpreadsheetColumnName(j);\n\n        let e = 'The column \"' + csv.fieldnames[i] + '\" occurs in two columns:';\n        e += \" \" + iname + \" and \" + jname;\n        return e;\n      }\n    }\n  }\n\n  // Check that all of the MANDATORY_FIELDNAMES are included.\n  for (let i = 0; i < MANDATORY_FIELDNAMES.length; ++i) {\n    if (!csv.fieldnames.includes(MANDATORY_FIELDNAMES[i])) {\n      return 'The mandatory \"' + MANDATORY_FIELDNAMES[i] + '\" column is missing';\n    }\n  }\n\n  // The \"Platform\" column\" must occur after the \"Day\" column: the parsing\n  // below is stateful, and needs to know how many platforms are on that day\n  // when it reads in the platform value.\n  if (csv.fieldnames.indexOf(\"Platform\") <= csv.fieldnames.indexOf(\"Day\")) {\n    return \"The Day column must come before the Platform column\";\n  }\n\n  // The caller needs to update this field on the state later, if successful.\n  let nextEntryId = state.registration.nextEntryId;\n  let entries: Array<Entry> = [];\n\n  // The fieldnames are valid! Now we can start building Entries.\n  for (let i = 0; i < csv.rows.length; ++i) {\n    let entry: Entry = newDefaultEntry(nextEntryId++);\n    entries.push(entry);\n\n    // Iterate over each field and integrate it into the Entry object.\n    let row: Array<string> = csv.rows[i];\n    for (let j = 0; j < row.length; ++j) {\n      let fieldname = csv.fieldnames[j];\n      let val = row[j];\n\n      // User-visible row number, for error messages.\n      // The first row is for the fieldnames, and spreadsheet programs are 1-indexed.\n      let rowstr = String(i + 2);\n\n      // Start building the error string early, since it's repeated a lot.\n      let errprefix = \"Invalid \" + fieldname + \" '\" + val + \"' in row \" + rowstr + \": \";\n\n      switch (fieldname) {\n        case \"Day\": {\n          if (val === \"\") {\n            // Default to 1.\n            entry.day = 1;\n            break;\n          }\n\n          const integer = parseInteger(val);\n\n          // Must be an integer.\n          if (typeof integer !== \"number\") {\n            return errprefix + \"expected an integer\";\n          }\n\n          // Can't be less than one: there's always at least one day.\n          if (integer < 1) {\n            return errprefix + \"can't be less than 1\";\n          }\n\n          // Can't be greater than the number of days specified in the GlobalState.\n          const numDays = state.meet.lengthDays;\n          if (integer > numDays) {\n            return errprefix + \"the Meet Setup page specifies only \" + numDays + \" days\";\n          }\n\n          // All checks passed!\n          entry.day = integer;\n          break;\n        }\n\n        case \"Platform\": {\n          if (val === \"\") {\n            // Default to 1.\n            entry.platform = 1;\n            break;\n          }\n\n          const integer = parseInteger(val);\n\n          // Must be an integer.\n          if (typeof integer !== \"number\") {\n            return errprefix + \"expected an integer\";\n          }\n\n          // Can't be less than one: there's always at least one platform.\n          if (integer < 1) {\n            return errprefix + \"can't be less than 1\";\n          }\n\n          // Can't be greater than the number of platforms specified in the GlobalState.\n          // The \"Day\" column is guaranteed to already have been parsed: code above\n          // makes sure the \"Day\" column is before the \"Platform\" column.\n          const day = entry.day;\n          const platforms = state.meet.platformsOnDays[day];\n          if (integer > platforms) {\n            return errprefix + \"Day \" + day + \" only has \" + platforms + \" platforms\";\n          }\n\n          // All checks passed!\n          entry.platform = integer;\n          break;\n        }\n\n        case \"Flight\": {\n          if (val === \"\") {\n            // Default to A.\n            entry.flight = \"A\";\n            break;\n          }\n\n          if (val.length !== 1) {\n            return errprefix + \"expected just a single flight letter\";\n          }\n\n          if (\"ABCDEFGH\".indexOf(val) === -1) {\n            return errprefix + \"expected a flight letter, A through H\";\n          }\n\n          // All checks passed!\n          // Narrow the type to flight (or throw an error if we've broken our validation) and continue\n          if (assertFlight(val)) {\n            entry.flight = val;\n          }\n          break;\n        }\n\n        case \"Name\": {\n          if (val === \"\") {\n            return errprefix + \"every lifter needs a Name\";\n          }\n          if (val.toUpperCase() === val) {\n            return errprefix + \"the Name should not be all-uppercase\";\n          }\n          entry.name = val;\n          break;\n        }\n\n        case \"Sex\": {\n          const sex = parseSex(val);\n          if (typeof sex !== \"string\") {\n            return errprefix + \"valid values are M, F, and Mx\";\n          }\n          entry.sex = sex;\n          break;\n        }\n\n        case \"Equipment\": {\n          const eqt = parseEquipment(val);\n          if (typeof eqt !== \"string\") {\n            return errprefix + \"valid values are 'Bare', 'Sleeves', 'Wraps', 'Single-ply', and 'Multi-ply'\";\n          }\n          entry.equipment = eqt;\n          break;\n        }\n\n        case \"Division1\": // fallthrough\n        case \"Division2\": // fallthrough\n        case \"Division3\": // fallthrough\n        case \"Division4\": // fallthrough\n        case \"Division5\": {\n          // Only the first Division is mandatory.\n          if (val === \"\" && fieldname !== \"Division1\") {\n            break;\n          }\n\n          // Check that it appears as a valid division.\n          if (!state.meet.divisions.includes(val)) {\n            return errprefix + \"not a valid division per the Meet Setup page\";\n          }\n\n          // Check that it wasn't already added.\n          if (entry.divisions.includes(val)) {\n            return errprefix + \"the lifter is already in that Division\";\n          }\n\n          entry.divisions.push(val);\n          break;\n        }\n\n        case \"Event1\": // fallthrough\n        case \"Event2\": // fallthrough\n        case \"Event3\": // fallthrough\n        case \"Event4\": // fallthrough\n        case \"Event5\": {\n          // Only the first Event is mandatory.\n          if (val === \"\" && fieldname !== \"Event1\") {\n            break;\n          }\n\n          // Check that it's well-formed.\n          const evt = parseEvent(val);\n          if (typeof evt !== \"string\") {\n            return errprefix + \"should be formed like 'SBD', 'BD', 'B', etc.\";\n          }\n\n          // Check for duplicates.\n          if (entry.events.includes(evt)) {\n            return errprefix + \"the lifter is already registered for that Event\";\n          }\n\n          // All checks passed!\n          entry.events.push(evt);\n          break;\n        }\n\n        case \"BirthDate\": {\n          if (val === \"\") {\n            // BirthDate is optional.\n            break;\n          }\n\n          const bd = parseDate(val);\n          if (typeof bd !== \"string\") {\n            let e = \"date must be in the unambiguous international standard: YYYY-MM-DD\";\n            return errprefix + e;\n          }\n\n          entry.birthDate = bd;\n          break;\n        }\n\n        case \"MemberID\":\n          entry.memberId = val;\n          break;\n\n        case \"Country\":\n          entry.country = val;\n          break;\n\n        case \"State\":\n          entry.state = val;\n          break;\n\n        case \"Lot\": {\n          if (val === \"\") {\n            // Empty strings are allowed: just doesn't use lots.\n            break;\n          }\n\n          const integer = parseInteger(val);\n          if (typeof integer !== \"number\" || integer < 1) {\n            return errprefix + \"expected an empty cell or a positive integer\";\n          }\n\n          // All checks passed!\n          entry.lot = integer;\n          break;\n        }\n\n        case \"Team\":\n          entry.team = val;\n          break;\n\n        case \"Instagram\":\n          entry.instagram = val;\n          break;\n\n        case \"Notes\":\n          entry.notes = val;\n          break;\n\n        default:\n          return 'Missing handler for the \"' + fieldname + '\" column';\n      }\n    }\n  }\n\n  return entries;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Exports registration data to a CSV file.\n\nimport { csvString, Csv } from \"./csv\";\n\nimport { Entry, Event } from \"../../types/dataTypes\";\nimport { RegistrationState } from \"../../types/stateTypes\";\n\nexport const makeRegistrationsCsv = (registration: RegistrationState): string => {\n  let csv = new Csv();\n\n  csv.appendColumns([\"Day\", \"Platform\", \"Flight\", \"Name\", \"Sex\", \"Equipment\"]);\n  csv.appendColumns([\"Division1\", \"Event1\"]); // Base cases. Others inserted by need.\n  csv.appendColumns([\"BirthDate\", \"MemberID\", \"Country\", \"State\", \"Lot\", \"Team\"]);\n  csv.appendColumns([\"Instagram\", \"Notes\"]);\n\n  for (let i = 0; i < registration.entries.length; ++i) {\n    const entry = registration.entries[i];\n\n    let row: Array<string> = new Array(csv.fieldnames.length).fill(\"\");\n    row[csv.index(\"Day\")] = csvString(entry.day);\n    row[csv.index(\"Platform\")] = csvString(entry.platform);\n    row[csv.index(\"Flight\")] = csvString(entry.flight);\n    row[csv.index(\"Name\")] = csvString(entry.name);\n    row[csv.index(\"Sex\")] = csvString(entry.sex);\n    row[csv.index(\"Equipment\")] = csvString(entry.equipment);\n    row[csv.index(\"BirthDate\")] = csvString(entry.birthDate);\n    row[csv.index(\"MemberID\")] = csvString(entry.memberId);\n    row[csv.index(\"Country\")] = csvString(entry.country);\n    row[csv.index(\"State\")] = csvString(entry.state);\n    row[csv.index(\"Lot\")] = csvString(entry.lot);\n    row[csv.index(\"Team\")] = csvString(entry.team);\n    row[csv.index(\"Instagram\")] = csvString(entry.instagram);\n    row[csv.index(\"Notes\")] = csvString(entry.notes);\n\n    // Divisions.\n    for (let j = 0; j < entry.divisions.length; ++j) {\n      const division: string = entry.divisions[j];\n      const column: string = \"Division\" + String(j + 1);\n\n      // Create the column if necessary. The previously numbered column exists.\n      if (csv.index(column) === -1) {\n        const prevIndex = csv.index(\"Division\" + String(j));\n        csv.insertColumn(prevIndex + 1, column); // Make space in other rows.\n        row.splice(prevIndex + 1, 0, \"\"); // Make space in this row.\n      }\n      row[csv.index(column)] = csvString(division);\n    }\n\n    // Events.\n    for (let j = 0; j < entry.events.length; ++j) {\n      const event = entry.events[j];\n      const column: string = \"Event\" + String(j + 1);\n\n      // Create the column if necessary. The previously numbered column exists.\n      if (csv.index(column) === -1) {\n        const prevIndex = csv.index(\"Event\" + String(j));\n        csv.insertColumn(prevIndex + 1, column); // Make space in other rows.\n        row.splice(prevIndex + 1, 0, \"\"); // Make space in this row.\n      }\n      row[csv.index(column)] = csvString(event);\n    }\n\n    csv.rows.push(row);\n  }\n\n  return csv.toString();\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the Registration page, contained by the RegistrationContainer.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Card from \"react-bootstrap/Card\";\n\nimport LifterTable from \"./LifterTable\";\nimport LifterRow from \"./LifterRow\";\nimport NewButton from \"./NewButton\";\nimport ErrorModal from \"../ErrorModal\";\n\nimport { Csv } from \"../../logic/export/csv\";\nimport { makeExampleRegistrationsCsv, loadRegistrations } from \"../../logic/import/registration-csv\";\nimport { makeRegistrationsCsv } from \"../../logic/export/registrations\";\n\nimport { newRegistration, deleteRegistration } from \"../../actions/registrationActions\";\n\nimport { saveAs } from \"file-saver\";\n\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { Entry } from \"../../types/dataTypes\";\nimport { Dispatch } from \"redux\";\n\ninterface StateProps {\n  global: GlobalState;\n}\n\ninterface DispatchProps {\n  newRegistration: (obj: Partial<Entry>) => void;\n  deleteRegistration: (id: number) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\ninterface InternalState {\n  // Controls the ErrorModal popup. Shown when error !== \"\".\n  error: string;\n}\n\nconst marginStyle = { margin: \"0 20px 20px 20px\" };\n\n// Used to distinguish between the Overwrite and Append modes.\nvar globalImportKind: string = \"Overwrite\";\n\nclass RegistrationView extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n    this.handleDownloadCsvTemplateClick = this.handleDownloadCsvTemplateClick.bind(this);\n    this.handleExportCsvClick = this.handleExportCsvClick.bind(this);\n    this.handleOverwriteClick = this.handleOverwriteClick.bind(this);\n    this.handleAppendClick = this.handleAppendClick.bind(this);\n    this.handleLoadFileInput = this.handleLoadFileInput.bind(this);\n    this.closeErrorModal = this.closeErrorModal.bind(this);\n\n    this.state = { error: \"\" };\n  }\n\n  handleDownloadCsvTemplateClick = () => {\n    const text = makeExampleRegistrationsCsv();\n    const blob = new Blob([text], { type: \"application/text;charset=utf-8\" });\n    saveAs(blob, \"registration-template.csv\");\n  };\n\n  handleExportCsvClick = () => {\n    let meetname = this.props.global.meet.name;\n    if (meetname === \"\") {\n      meetname = \"Unnamed-Meet\";\n    }\n    meetname = meetname.replace(/ /g, \"-\");\n\n    const text = makeRegistrationsCsv(this.props.global.registration);\n    const blob = new Blob([text], { type: \"application/text;charset=utf-8\" });\n    saveAs(blob, meetname + \"-Registrations.csv\");\n  };\n\n  handleOverwriteClick = () => {\n    globalImportKind = \"Overwrite\";\n    const loadhelper = document.getElementById(\"loadhelper\");\n    if (loadhelper !== null) {\n      loadhelper.click();\n    }\n  };\n\n  handleAppendClick = () => {\n    globalImportKind = \"Append\";\n    const loadhelper = document.getElementById(\"loadhelper\");\n    if (loadhelper !== null) {\n      loadhelper.click();\n    }\n  };\n\n  handleLoadFileInput = () => {\n    const loadHelper = document.getElementById(\"loadhelper\");\n    if (loadHelper === null || !(loadHelper instanceof HTMLInputElement) || loadHelper.files === null) {\n      return;\n    }\n\n    const selectedFile = loadHelper.files[0];\n    let rememberThis = this;\n\n    let reader = new FileReader();\n    reader.onload = function(event) {\n      // If this occurs, we've introduced a bug when initiating the file reader, or the read failed.\n      // Add this check as a guard so the typing is narrowed\n      if (typeof reader.result !== \"string\") {\n        window.alert(\"Unable to load file: an unexpected internal error occured\");\n        return;\n      }\n\n      let csv = new Csv();\n      const maybeError = csv.fromString(reader.result);\n\n      // Check if an error message occurred.\n      if (typeof maybeError === \"string\") {\n        rememberThis.setState({ error: maybeError });\n        return;\n      }\n\n      // Convert the Csv to an Array<Entry>.\n      const maybeEntries = loadRegistrations(rememberThis.props.global, csv);\n      if (typeof maybeEntries === \"string\") {\n        rememberThis.setState({ error: maybeEntries });\n        return;\n      }\n\n      // Successfully parsed and loaded!\n      const entries: Array<Entry> = maybeEntries;\n\n      // If the mode is \"Overwrite\", delete all existing Entries.\n      if (globalImportKind === \"Overwrite\") {\n        const entryIds = rememberThis.props.global.registration.entries.map(e => e.id);\n        for (let i = 0; i < entryIds.length; ++i) {\n          rememberThis.props.deleteRegistration(entryIds[i]);\n        }\n      }\n\n      // Add all the new Entries.\n      for (let i = 0; i < entries.length; ++i) {\n        // Deleting the 'id' field causes newRegistration() to assign a valid one.\n        delete entries[i].id;\n        rememberThis.props.newRegistration(entries[i]);\n      }\n    };\n    reader.readAsText(selectedFile);\n  };\n\n  closeErrorModal = () => {\n    this.setState({ error: \"\" });\n  };\n\n  render() {\n    const numEntries = this.props.global.registration.entries.length;\n\n    return (\n      <div style={marginStyle}>\n        <ErrorModal\n          error={this.state.error}\n          title=\"Importation Error\"\n          show={this.state.error !== \"\"}\n          close={this.closeErrorModal}\n        />\n\n        <Card border=\"info\">\n          <Card.Header>Auto-Import Registrations</Card.Header>\n          <Card.Body>\n            <Button variant=\"info\" onClick={this.handleDownloadCsvTemplateClick}>\n              Download Template\n            </Button>\n\n            <Button\n              variant=\"success\"\n              disabled={numEntries === 0}\n              onClick={this.handleExportCsvClick}\n              style={{ marginLeft: \"14px\" }}\n            >\n              Export to CSV\n            </Button>\n\n            <ButtonGroup style={{ marginLeft: \"14px\" }}>\n              <Button variant=\"danger\" onClick={this.handleOverwriteClick}>\n                Overwrite Registrations from CSV\n              </Button>\n              <Button variant=\"warning\" onClick={this.handleAppendClick}>\n                Append Registrations from CSV\n              </Button>\n            </ButtonGroup>\n          </Card.Body>\n        </Card>\n\n        <LifterTable entries={this.props.global.registration.entries} rowRenderer={LifterRow} />\n        <NewButton />\n\n        <input\n          id=\"loadhelper\"\n          type=\"file\"\n          accept=\".csv\"\n          style={{ display: \"none\" }}\n          onChange={this.handleLoadFileInput}\n        />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  global: state\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    newRegistration: (obj: Partial<Entry>) => dispatch(newRegistration(obj)),\n    deleteRegistration: (id: number) => dispatch(deleteRegistration(id))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RegistrationView);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the Registration page.\n\nimport React from \"react\";\nimport RegistrationView from \"../components/registration/RegistrationView\";\n\nclass RegistrationContainer extends React.Component<{}> {\n  render() {\n    return <RegistrationView />;\n  }\n}\n\nexport default RegistrationContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Table from \"react-bootstrap/Table\";\n\nimport { Entry } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\n\ninterface OwnProps {\n  entries: Array<Entry>;\n  rowRenderer: any;\n  inLiftingPage?: boolean;\n}\n\ninterface StateProps {\n  inKg: boolean;\n}\n\ntype Props = OwnProps & StateProps;\n\nclass LifterTable extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderRows = this.renderRows.bind(this);\n    this.renderHeader = this.renderHeader.bind(this);\n  }\n\n  renderRows = () => {\n    const LifterRow = this.props.rowRenderer;\n    const { entries } = this.props;\n    const inLiftingPage = this.props.inLiftingPage === true;\n\n    return entries.map(entry => <LifterRow key={entry.id} id={entry.id} inLiftingPage={inLiftingPage} />);\n  };\n\n  renderHeader = () => {\n    // Styling for small, single-character selector columns.\n    const shortStyle = { width: \"85px\" };\n\n    const units = this.props.inKg ? \"Kg\" : \"Lbs\";\n\n    return (\n      <tr>\n        <th style={shortStyle}>Platform</th>\n        <th style={shortStyle}>Flight</th>\n        <th>Name</th>\n\n        <th style={shortStyle}>Age</th>\n        <th style={shortStyle}>Bodyweight {units}</th>\n        <th style={shortStyle}>Squat Rack</th>\n        <th style={shortStyle}>Squat Opener {units}</th>\n        <th style={shortStyle}>Bench Rack</th>\n        <th style={shortStyle}>Bench Opener {units}</th>\n        <th style={shortStyle}>Deadlift Opener {units}</th>\n      </tr>\n    );\n  };\n\n  render() {\n    return (\n      <Table hover size=\"sm\" style={{ margin: \"0px\" }}>\n        <thead>{this.renderHeader()}</thead>\n        <tbody>{this.renderRows()}</tbody>\n      </Table>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  inKg: state.meet.inKg\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LifterTable);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport {\n  EnterAttemptAction,\n  MarkLiftAction,\n  SetLiftingGroupAction,\n  OverrideAttemptAction,\n  OverrideEntryIdAction,\n  SetTableInfoAction\n} from \"../types/actionTypes\";\nimport { Flight, Lift } from \"../types/dataTypes\";\nimport { LiftingState } from \"../types/stateTypes\";\n\n// Sets a weightKg that doesn't have a good/failed value, for entering in attempts.\nexport const enterAttempt = (\n  entryId: number,\n  lift: Lift,\n  attemptOneIndexed: number,\n  weightKg: number\n): EnterAttemptAction => {\n  return {\n    type: \"ENTER_ATTEMPT\",\n    entryId: entryId,\n    lift: lift,\n    attemptOneIndexed: attemptOneIndexed,\n    weightKg: weightKg\n  };\n};\n\n// Marks a lift \"good\" or \"failed\".\n//\n// entryId is the ID of the affected entry, a Number.\n// lift is \"S\", \"B\", or \"D\".\n// attempt is 1,2,3, etc., up to MAX_ATTEMPTS.\n// success is a bool for whether to mark the lift as a success or as a failure.\nexport const markLift = (entryId: number, lift: Lift, attemptOneIndexed: number, success: boolean): MarkLiftAction => {\n  return {\n    type: \"MARK_LIFT\",\n    entryId: entryId,\n    lift: lift,\n    attemptOneIndexed: attemptOneIndexed,\n    success: success\n  };\n};\n\n// Sets the current group of lifters.\n// This is always manually set by the score table.\nexport const setLiftingGroup = (day: number, platform: number, flight: Flight, lift: Lift): SetLiftingGroupAction => {\n  return {\n    type: \"SET_LIFTING_GROUP\",\n    day: day,\n    platform: platform,\n    flight: flight,\n    lift: lift\n  };\n};\n\n// Overrides the calculated meet progress logic by forcing display of an attempt,\n// even if it has already been marked \"good lift\" or \"no lift\".\nexport const overrideAttempt = (attempt: number): OverrideAttemptAction => {\n  return {\n    type: \"OVERRIDE_ATTEMPT\",\n    attempt: attempt\n  };\n};\n\n// Overrides the calculated meet progress logic by forcing display of a specific lifter,\n// even if they have already had their attempt entered.\nexport const overrideEntryId = (entryId: number): OverrideEntryIdAction => {\n  return {\n    type: \"OVERRIDE_ENTRY_ID\",\n    entryId: entryId\n  };\n};\n\n// Updates arbitrary fields in the LiftingState.\n//\n// The intention is to use action just for table customization: things like\n// column widths, column visibility, and other such options.\n//\n// Having this interface lets us keep the number of actions low: separate\n// actions for each kind of modification is not really useful.\nexport const setTableInfo = (obj: Partial<LiftingState>): SetTableInfoAction => {\n  return {\n    type: \"SET_TABLE_INFO\",\n    changes: obj\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines an input of a single weight, during configuration.\n// Since it's for configuration, it doesn't have an associated success/failure value.\n//\n// For consistency purposes, weights are always stored in kg.\n\nimport React, { FormEvent } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport FormControl from \"react-bootstrap/FormControl\";\nimport FormGroup from \"react-bootstrap/FormGroup\";\n\nimport { updateRegistration } from \"../../actions/registrationActions\";\nimport { enterAttempt } from \"../../actions/liftingActions\";\n\nimport { liftToAttemptFieldName } from \"../../logic/entry\";\nimport { kg2lbs, lbs2kg, displayWeight } from \"../../logic/units\";\n\nimport { Entry, Lift, Validation } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { FormControlTypeHack, assertString } from \"../../types/utils\";\nimport { Dispatch } from \"redux\";\n\ninterface OwnProps {\n  id: number; // The EntryID.\n\n  // The valid type here should be all keys of Entry where the value is a number\n  // Something like keyof<Partial> where (key,value) => typeof value === Number - if that is possible in typescript?\n  // Otherwise manually specifying all the valid keys of Entry is a fair approach too!\n  field?: \"bodyweightKg\";\n  disabled: boolean;\n\n  // Optional attributes used only for lifts (as opposed to for bodyweights).\n  placeholder?: string;\n  lift?: Lift;\n  attemptOneIndexed?: number;\n  multipleOf?: number;\n}\n\ninterface StateProps {\n  inKg: boolean;\n  weightKg: number;\n}\n\ninterface DispatchProps {\n  updateRegistration: (entryId: number, obj: Partial<Entry>) => void;\n  enterAttempt: (entryId: number, lift: Lift, attemptOneIndexed: number, weightKg: number) => void;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface InternalState {\n  weightStr: string;\n}\n\nclass WeightInput extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n    this.validate = this.validate.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    let weight = this.props.weightKg;\n    if (!this.props.inKg) {\n      weight = kg2lbs(weight);\n    }\n\n    // Internal state, for purposes of validation.\n    // To avoid confusion (auto-rounding) when typing, just store a String.\n    this.state = {\n      // Prefer displaying an empty string to 0.0.\n      weightStr: weight === 0.0 ? \"\" : displayWeight(weight)\n    };\n  }\n\n  validate = (): Validation => {\n    const weightNum = Number(this.state.weightStr);\n    if (isNaN(weightNum) || weightNum < 0) return \"error\";\n    if (this.props.multipleOf !== undefined && weightNum % this.props.multipleOf !== 0.0) {\n      return \"warning\";\n    }\n    if (this.state.weightStr.length > 0) return \"success\";\n    return null;\n  };\n\n  // Update the internal state, used for validation.\n  handleChange = (event: FormEvent<FormControlTypeHack>) => {\n    const weightStr = event.currentTarget.value;\n    if (assertString(weightStr)) {\n      this.setState({ weightStr: weightStr });\n    }\n  };\n\n  // Update the Redux store.\n  handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    const weightStr = event.currentTarget.value;\n    const weightNum = Number(weightStr);\n\n    if (this.validate() === \"error\") {\n      return;\n    }\n\n    const weightKg = this.props.inKg ? weightNum : lbs2kg(weightNum);\n    if (this.props.weightKg === weightKg) {\n      return;\n    }\n\n    // If \"attempt\" is set, a specific attempt is selected.\n    if (this.props.attemptOneIndexed !== undefined && this.props.lift !== undefined) {\n      const attemptOneIndexed = this.props.attemptOneIndexed;\n      const lift = this.props.lift;\n      this.props.enterAttempt(this.props.id, lift, attemptOneIndexed, weightKg);\n    } else if (this.props.field !== undefined) {\n      // Otherwise, the field is a Number.\n      let newfields: Partial<Entry> = {};\n      newfields[this.props.field] = weightKg;\n      this.props.updateRegistration(this.props.id, newfields);\n    }\n  };\n\n  render() {\n    // FormGroup provides a default padding of 15, but FormGroup is only being\n    // used here to accept a validationState. It's not really a group.\n    const undoDefaultPadding = { marginBottom: \"0\" };\n    const validation: Validation = this.validate();\n\n    return (\n      <FormGroup style={undoDefaultPadding}>\n        <FormControl\n          disabled={this.props.disabled}\n          placeholder={this.props.placeholder}\n          type=\"text\"\n          value={this.state.weightStr}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n          isValid={validation === \"success\"}\n          isInvalid={validation === \"error\"}\n          className={validation === \"warning\" ? \"is-warning\" : undefined}\n        />\n      </FormGroup>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  // Only have props for the entry corresponding to this one row.\n  const lookup = state.registration.lookup;\n  const entry = state.registration.entries[lookup[ownProps.id]];\n\n  // If `field` is set, then read the Number from the given field name.\n  let weightKg = 0.0;\n  if (ownProps.field !== undefined) {\n    weightKg = entry[ownProps.field];\n  } else if (ownProps.lift !== undefined && ownProps.attemptOneIndexed !== undefined) {\n    // Otherwise, refer to a specific lift and attempt.\n    const lift = ownProps.lift;\n    const attemptOneIndexed = ownProps.attemptOneIndexed;\n    const field = liftToAttemptFieldName(lift);\n    weightKg = entry[field][attemptOneIndexed - 1];\n  }\n\n  return {\n    inKg: state.meet.inKg,\n    weightKg: weightKg\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    updateRegistration: (entryId, obj) => dispatch(updateRegistration(entryId, obj)),\n    enterAttempt: (entryId, lift, attemptOneIndexed, weightKg) =>\n      dispatch(enterAttempt(entryId, lift, attemptOneIndexed, weightKg))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(WeightInput);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { Validation } from \"../types/dataTypes\";\n\n// Validates a simple positive integer.\nexport const validatePositiveInteger = (s?: string, inclusiveMax?: number): Validation => {\n  if (typeof s !== \"string\") return \"error\";\n\n  if (s === \"\") return null;\n\n  // Ensure that the string only contains numbers, because the Number() constructor\n  // will ignore whitespace.\n  const onlyNumbers = /^[0-9]+$/;\n  if (!s.match(onlyNumbers)) return \"error\";\n\n  // The number shouldn't start with an unnecessary zero.\n  if (s.startsWith(\"0\")) return \"error\";\n\n  const n = Number(s);\n\n  // Ensure the number is a positive integer.\n  if (isNaN(n)) return \"error\";\n  if (!Number.isInteger(n)) return \"error\";\n  if (n <= 0) return \"error\";\n\n  // Allow an optional inclusive upper bound check.\n  if (typeof inclusiveMax === \"number\") {\n    if (n > inclusiveMax) return \"error\";\n  }\n\n  return \"success\";\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines a row in the LifterTable on the Weigh-inss page.\n// This provides a bunch of widgets, each of which correspond to\n// the state of a single entry.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport FormControl from \"react-bootstrap/FormControl\";\n\nimport ValidatedInput from \"../ValidatedInput\";\nimport WeightInput from \"./WeightInput\";\n\nimport { getAge } from \"../../logic/entry\";\nimport { validatePositiveInteger } from \"../../validation/positiveInteger\";\n\nimport { updateRegistration } from \"../../actions/registrationActions\";\n\nimport { Entry, Validation, Flight } from \"../../types/dataTypes\";\nimport { GlobalState, MeetState } from \"../../types/stateTypes\";\nimport { Dispatch } from \"redux\";\nimport { FormControlTypeHack, assertFlight, assertString } from \"../../types/utils\";\n\ninterface OwnProps {\n  id: number;\n  inLiftingPage?: boolean;\n}\n\ninterface StateProps {\n  meet: MeetState;\n  entry: Entry;\n}\n\ninterface DispatchProps {\n  updateRegistration: (entryId: number, obj: Partial<Entry>) => void;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nclass LifterRow extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.updateRegistrationFlight = this.updateRegistrationFlight.bind(this);\n    this.updateRegistrationSquatRackInfo = this.updateRegistrationSquatRackInfo.bind(this);\n    this.updateRegistrationBenchRackInfo = this.updateRegistrationBenchRackInfo.bind(this);\n    this.updateRegistrationAge = this.updateRegistrationAge.bind(this);\n  }\n\n  updateRegistrationFlight = (event: React.FormEvent<FormControlTypeHack>) => {\n    const flight = event.currentTarget.value;\n    if (this.props.entry.flight !== flight && assertString(flight) && assertFlight(flight)) {\n      this.props.updateRegistration(this.props.id, { flight: flight });\n    }\n  };\n\n  updateRegistrationSquatRackInfo = (value: string) => {\n    if (this.props.entry.squatRackInfo !== value) {\n      this.props.updateRegistration(this.props.id, { squatRackInfo: value });\n    }\n  };\n\n  updateRegistrationBenchRackInfo = (value: string) => {\n    if (this.props.entry.benchRackInfo !== value) {\n      this.props.updateRegistration(this.props.id, { benchRackInfo: value });\n    }\n  };\n\n  updateRegistrationAge = (value: string) => {\n    const age: number = value === \"\" ? 0 : Number(value);\n    if (this.props.entry.age !== age) {\n      this.props.updateRegistration(this.props.id, { age: age });\n    }\n  };\n\n  validateAge = (value?: string): Validation => {\n    if (value === \"\") return null;\n\n    const pos: Validation = validatePositiveInteger(value);\n    if (pos === \"success\") {\n      // Complain a little if the age is implausible.\n      const n = Number(value);\n      if (n <= 4 || n > 100) return \"warning\";\n    }\n    return pos;\n  };\n\n  validateRack = (value?: string): Validation => {\n    if (value === \"\") return null;\n    return \"success\";\n  };\n\n  render() {\n    const entry = this.props.entry;\n\n    // Check whether the event(s) include a given lift.\n    let hasSquat = false;\n    let hasBench = false;\n    let hasDeadlift = false;\n    for (let i = 0; i < entry.events.length; i++) {\n      const event = entry.events[i];\n      if (event.includes(\"S\")) {\n        hasSquat = true;\n      }\n      if (event.includes(\"B\")) {\n        hasBench = true;\n      }\n      if (event.includes(\"D\")) {\n        hasDeadlift = true;\n      }\n    }\n\n    // Check whether the first attempt already occurred.\n    const disableSquatWeight = !hasSquat || entry.squatStatus[0] !== 0;\n    const disableBenchWeight = !hasBench || entry.benchStatus[0] !== 0;\n    const disableDeadliftWeight = !hasDeadlift || entry.deadliftStatus[0] !== 0;\n\n    // Only show the Flight selector if the Weigh-ins page is non-embedded.\n    let flight: Flight | JSX.Element = entry.flight;\n    if (this.props.inLiftingPage !== true) {\n      // Can be undefined.\n      flight = (\n        <FormControl\n          defaultValue={entry.flight}\n          as=\"select\"\n          onChange={this.updateRegistrationFlight}\n          className=\"custom-select\"\n        >\n          <option value=\"A\">A</option>\n          <option value=\"B\">B</option>\n          <option value=\"C\">C</option>\n          <option value=\"D\">D</option>\n          <option value=\"E\">E</option>\n          <option value=\"F\">F</option>\n          <option value=\"G\">G</option>\n          <option value=\"H\">H</option>\n        </FormControl>\n      );\n    }\n\n    const age = getAge(entry, this.props.meet.date);\n    const ageStr = age === 0 ? \"Age\" : String(age);\n\n    return (\n      <tr>\n        <td>{entry.platform}</td>\n        <td>{flight}</td>\n        <td>{entry.name}</td>\n\n        <td>\n          <ValidatedInput\n            initialValue={entry.age === 0 ? \"\" : String(entry.age)}\n            placeholder={ageStr}\n            validate={this.validateAge}\n            onSuccess={this.updateRegistrationAge}\n          />\n        </td>\n\n        <td>\n          <WeightInput id={this.props.id} field=\"bodyweightKg\" placeholder=\"Bwt\" disabled={false} />\n        </td>\n\n        <td>\n          <ValidatedInput\n            initialValue={entry.squatRackInfo}\n            placeholder={hasSquat ? \"S.Rack\" : undefined}\n            disabled={!hasSquat}\n            validate={this.validateRack}\n            onSuccess={this.updateRegistrationSquatRackInfo}\n          />\n        </td>\n\n        <td>\n          <WeightInput\n            id={this.props.id}\n            lift=\"S\"\n            multipleOf={2.5}\n            attemptOneIndexed={1}\n            placeholder={hasSquat ? \"Squat\" : undefined}\n            disabled={disableSquatWeight}\n          />\n        </td>\n\n        <td>\n          <ValidatedInput\n            initialValue={entry.benchRackInfo}\n            placeholder={hasBench ? \"B.Rack\" : undefined}\n            disabled={!hasBench}\n            validate={this.validateRack}\n            onSuccess={this.updateRegistrationBenchRackInfo}\n          />\n        </td>\n\n        <td>\n          <WeightInput\n            id={this.props.id}\n            lift=\"B\"\n            multipleOf={2.5}\n            attemptOneIndexed={1}\n            placeholder={hasBench ? \"Bench\" : undefined}\n            disabled={disableBenchWeight}\n          />\n        </td>\n\n        <td>\n          <WeightInput\n            id={this.props.id}\n            lift=\"D\"\n            multipleOf={2.5}\n            attemptOneIndexed={1}\n            placeholder={hasDeadlift ? \"Dead\" : undefined}\n            disabled={disableDeadliftWeight}\n          />\n        </td>\n      </tr>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  // Only have props for the entry corresponding to this one row.\n  const lookup = state.registration.lookup;\n  const entry = state.registration.entries[lookup[ownProps.id]];\n\n  return {\n    meet: state.meet,\n    entry: entry\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    updateRegistration: (entryId: number, obj: Partial<Entry>) => dispatch(updateRegistration(entryId, obj))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LifterRow);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the Weigh-ins page, contained by the WeighinsContainer.\n// The Weigh-ins page updates more information in the Registration state.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Card from \"react-bootstrap/Card\";\n\nimport { getLiftersOnDay } from \"../../logic/entry\";\nimport LifterTable from \"./LifterTable\";\nimport LifterRow from \"./LifterRow\";\n\nimport { Entry } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\n\nconst marginStyle = { margin: \"0 20px 0 20px\" };\n\n// For use when embedded inside the Lifting page.\ninterface OwnProps {\n  day?: number;\n  platform?: number;\n  inLiftingPage?: boolean; // The weigh-ins page can be embedded.\n}\n\ninterface StateProps {\n  entries: Array<Entry>;\n}\n\ntype Props = Readonly<OwnProps> & Readonly<StateProps>;\n\nclass WeighinsView extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.getNumDaysFromEntries = this.getNumDaysFromEntries.bind(this);\n  }\n\n  // Figure out how many days there are by looking at the entries themselves.\n  //\n  // The meet page information may be unreliable: someone might have created\n  // a second day, added a lifter to it, then removed the second day without\n  // yet updating that lifter.\n  //\n  // This is an attempt to make that error more obvious, so it can be corrected.\n  getNumDaysFromEntries = () => {\n    let max_day = 0;\n    const entries = this.props.entries;\n    for (let i = 0; i < entries.length; i++) {\n      const entry = entries[i];\n      if (entry.day > max_day) {\n        max_day = entry.day;\n      }\n    }\n    return max_day;\n  };\n\n  render() {\n    // Determine whether this is being shown embedded in the Lifting page.\n    const inLiftingPage = this.props.inLiftingPage === true;\n\n    // Make a separate panel for each day.\n    const numDays = this.getNumDaysFromEntries();\n    let dayCards = [];\n    for (let i = 1; i <= numDays; i++) {\n      const lifters = getLiftersOnDay(this.props.entries, i);\n\n      // Skip if the OwnProps excluded this selection.\n      if (lifters.length === 0) {\n        continue;\n      }\n\n      // Present the lifters in sorted order.\n      lifters.sort((a, b) => {\n        if (a.platform !== b.platform) return a.platform - b.platform;\n        if (a.flight !== b.flight) return a.flight < b.flight ? -1 : 1;\n        if (a.name < b.name) return -1;\n        if (a.name > b.name) return 1;\n        return 0;\n      });\n\n      dayCards.push(\n        <Card key={i}>\n          <Card.Header>Day {i} Weigh-ins</Card.Header>\n          <Card.Body>\n            <LifterTable entries={lifters} rowRenderer={LifterRow} inLiftingPage={inLiftingPage} />\n          </Card.Body>\n        </Card>\n      );\n    }\n\n    // If there are no days thus far, show a default warning panel.\n    if (dayCards.length === 0) {\n      dayCards.push(\n        <Card key={0} border=\"info\">\n          <Card.Header>Waiting for Registration</Card.Header>\n          <Card.Body>Add lifters on the Registration page before weighing them in.</Card.Body>\n        </Card>\n      );\n    }\n\n    return <div style={marginStyle}>{dayCards}</div>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  const { day, platform } = ownProps;\n  let entries = state.registration.entries;\n\n  // Filter if requested by the OwnProps.\n  if (typeof day === \"number\" && typeof platform === \"number\") {\n    entries = entries.filter(e => e.day === day && e.platform === platform);\n  }\n\n  return { entries };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(WeighinsView);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the Weighins page.\n\nimport React from \"react\";\nimport WeighinsView from \"../components/weighins/WeighinsView\";\n\nclass WeighinsContainer extends React.Component<{}> {\n  render() {\n    return <WeighinsView />;\n  }\n}\n\nexport default WeighinsContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The top bar of the Lifting page, containing huge text about the current lifter.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { Entry } from \"../../types/dataTypes\";\nimport { GlobalState, RegistrationState } from \"../../types/stateTypes\";\n\nimport styles from \"./TopBar.module.scss\";\n\ninterface OwnProps {\n  attemptOneIndexed: number;\n  orderedEntries: Array<Entry>;\n  currentEntryId: number | null;\n}\n\ninterface StateProps {\n  registration: RegistrationState;\n}\n\ntype Props = OwnProps & StateProps;\n\nclass LiftingHeader extends React.Component<Props> {\n  render() {\n    // Defaults, in case of no lifter.\n    let lifterName = \"Flight Complete\";\n    let info = \"\";\n\n    // In the case of a lifter, set fields.\n    if (this.props.currentEntryId !== null && this.props.currentEntryId !== undefined) {\n      const idx = this.props.registration.lookup[this.props.currentEntryId];\n      const entry = this.props.registration.entries[idx];\n      lifterName = entry.name;\n\n      let infoBuilder: Array<string> = [];\n\n      if (typeof entry.instagram === \"string\" && entry.instagram !== \"\") {\n        infoBuilder.push(\"@\" + entry.instagram);\n      }\n      if (entry.age > 0) {\n        infoBuilder.push(String(entry.age));\n      }\n      infoBuilder.push(entry.equipment);\n      if (entry.divisions.length > 0) {\n        infoBuilder.push(entry.divisions.join(\", \"));\n      }\n\n      info = infoBuilder.join(\" · \");\n    }\n\n    return (\n      <div className={styles.topBar}>\n        <div className={styles.lifterName}>{lifterName}</div>\n        <div className={styles.info}>{info}</div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    registration: state.registration\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LiftingHeader);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { kg2lbs, displayWeight } from \"../logic/units\";\n\nimport { PlateColors } from \"../constants/plateColors\";\n\nimport { Plate, LoadedPlate } from \"../types/dataTypes\";\n\n// Convert from kg to lbs with rounding to 2 decimal places.\n// It's OK that this is slow, since it rarely executes.\nconst safeKg2Lbs = (kg: number): number => {\n  return Number(displayWeight(kg2lbs(kg)));\n};\n\n// Returns a list of plate weights in loading order.\n// Any unloadable remainder is reported as a final number with a negative value.\nexport const selectPlates = (\n  loadingKg: number,\n  barAndCollarsWeightKg: number,\n  plates: ReadonlyArray<Plate>,\n  inKg: boolean\n): Array<LoadedPlate> => {\n  // Flow doesn't like it when arguments get redefined.\n  let loadingAny = loadingKg;\n  let barAndCollarsWeightAny = barAndCollarsWeightKg;\n  let platesAny = plates;\n\n  // Convert to pounds, avoiding floating point errors.\n  if (inKg === false) {\n    loadingAny = safeKg2Lbs(loadingKg);\n    barAndCollarsWeightAny = safeKg2Lbs(barAndCollarsWeightKg);\n    platesAny = plates.map(x => ({ ...x, weightKg: safeKg2Lbs(x.weightKg) }));\n  }\n\n  // Sort a copy of the platesAny array by descending weight.\n  const sortedPlates = platesAny.slice().sort((a, b) => {\n    return b.weightKg - a.weightKg;\n  });\n\n  let sideWeightKg = (loadingAny - barAndCollarsWeightAny) / 2;\n  let loading: Array<LoadedPlate> = [];\n\n  // Run through each plate in order, applying as many of that plate as will fit.\n  for (let i = 0; i < sortedPlates.length; i++) {\n    let { weightKg, pairCount, color } = sortedPlates[i];\n    while (pairCount > 0 && weightKg <= sideWeightKg) {\n      pairCount--;\n      sideWeightKg -= weightKg;\n      loading.push({ weightAny: weightKg, isAlreadyLoaded: false, color: color });\n    }\n  }\n\n  // Report any remainder as a negative number.\n  if (sideWeightKg > 0) {\n    loading.push({ weightAny: -sideWeightKg, isAlreadyLoaded: false, color: PlateColors.PLATE_DEFAULT_RED });\n  }\n  return loading;\n};\n\n// Helper function: like Array.findIndex(), but starting from a specific index.\nconst findWeightFrom = (loading: Array<LoadedPlate>, startFrom: number, weight: number): number => {\n  for (let i = startFrom; i < loading.length; i++) {\n    if (loading[i].weightAny === weight) return i;\n  }\n  return -1;\n};\n\n// Sets the 'isAlreadyLoaded' property of each LoadedPlate relative to another loading.\n//\n// Both 'loading' and 'relativeTo' are sorted in non-ascending order of weight.\nexport const makeLoadingRelative = (loading: Array<LoadedPlate>, relativeTo: Array<LoadedPlate>): void => {\n  let finger = 0; // Increasing index into the relativeTo array.\n\n  // For each plate in the loading, look for a matching plate in relativeTo[finger..].\n  // When found, move the finger past that point.\n  for (let i = 0; i < loading.length; i++) {\n    let loadedPlate = loading[i];\n    const index = findWeightFrom(relativeTo, finger, loadedPlate.weightAny);\n    if (index >= 0) {\n      finger = index + 1;\n      loadedPlate.isAlreadyLoaded = true;\n    }\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// This is the widget that gives a visual display of the weights on the bar,\n// used by the loading crew.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { displayWeight } from \"../../logic/units\";\nimport { PlateColors } from \"../../constants/plateColors\";\n\nimport { Lift, LoadedPlate } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\n\nimport styles from \"./BarLoad.module.scss\";\n\ninterface OwnProps {\n  loading: Array<LoadedPlate>;\n  rackInfo: string;\n  inKg: boolean;\n}\n\ninterface StateProps {\n  lift: Lift;\n}\n\ntype Props = OwnProps & StateProps;\n\nclass BarLoad extends React.Component<Props> {\n  weightKgToStyle = (weightKg: number): string => {\n    switch (weightKg) {\n      case 50:\n        return styles.kg50;\n      case 25:\n        return styles.kg25;\n      case 20:\n        return styles.kg20;\n      case 15:\n        return styles.kg15;\n      case 10:\n        return styles.kg10;\n      case 5:\n        return styles.kg5;\n      case 2.5:\n        return styles.kg2p5;\n      case 1.25:\n        return styles.kg1p25;\n      case 1:\n        return styles.kg1;\n      case 0.75:\n        return styles.kg0p75;\n      case 0.5:\n        return styles.kg0p5;\n      case 0.25:\n        return styles.kg0p25;\n      default:\n        return styles.error;\n    }\n  };\n\n  weightLbsToStyle = (weightLbs: number): string => {\n    switch (weightLbs) {\n      case 100:\n        return styles.lbs100;\n      case 55:\n        return styles.lbs55;\n      case 45:\n        return styles.lbs45;\n      case 35:\n        return styles.lbs35;\n      case 25:\n        return styles.lbs25;\n      case 10:\n        return styles.lbs10;\n      case 5:\n        return styles.lbs5;\n      case 2.5:\n        return styles.lbs2p5;\n      case 1.25:\n        return styles.lbs1p25;\n      case 0.5:\n        return styles.lbs0p5;\n      default:\n        return styles.error;\n    }\n  };\n\n  weightAnyToText = (weightAny: number): string => {\n    switch (weightAny) {\n      case 1.25:\n        return \"1¼\";\n      case 0.75:\n        return \"¾\";\n      case 0.5:\n        return \"½\";\n      case 0.25:\n        return \"¼\";\n      default:\n        return String(weightAny);\n    }\n  };\n\n  // Turns the selectPlates() array into divs.\n  renderPlates = () => {\n    const plates: Array<LoadedPlate> = this.props.loading;\n    const inKg: boolean = this.props.inKg;\n\n    let divs = [];\n    let i = 0;\n\n    // Iterate on a group of plates of the same weight at a time.\n    while (i < plates.length) {\n      const weightAny = plates[i].weightAny;\n\n      // If the weight is negative, it's an error report.\n      if (weightAny < 0) {\n        divs.push(\n          <div key={\"error\"} className={styles.error}>\n            ?{displayWeight(-1 * weightAny)}\n          </div>\n        );\n        break;\n      }\n\n      // Count how many times this same plate kind appears consecutively.\n      let plateCount = 1;\n      for (let j = i + 1; j < plates.length && plates[j].weightAny === weightAny; j++) {\n        plateCount++;\n      }\n\n      // If that plate is large and occurs a bunch, show a counter.\n      const showCounter = plateCount >= 3;\n\n      // Push each of the plates individually.\n      for (let j = 0; j < plateCount; j++) {\n        const plate = plates[i + j];\n        const counter = String(j + 1);\n\n        // Light backgrounds need dark text.\n        const is_light =\n          plate.color === PlateColors.PLATE_DEFAULT_WHITE || plate.color === PlateColors.PLATE_DEFAULT_YELLOW;\n\n        const style = {\n          backgroundColor: plate.color,\n          opacity: plate.isAlreadyLoaded ? 0.25 : undefined,\n          color: is_light ? \"#232323\" : \"#FFFFFF\",\n          // White plates need a border.\n          border: plate.color === PlateColors.PLATE_DEFAULT_WHITE ? \"1.5px solid #232323\" : undefined\n        };\n        divs.push(\n          <div\n            key={weightAny + \"-\" + counter}\n            className={inKg ? this.weightKgToStyle(weightAny) : this.weightLbsToStyle(weightAny)}\n            style={style}\n          >\n            <div>{this.weightAnyToText(weightAny)}</div>\n            {showCounter ? <div>{counter}</div> : null}\n          </div>\n        );\n      }\n\n      i += plateCount;\n    }\n\n    return divs;\n  };\n\n  render() {\n    // Only show rack info for lifts that use a rack.\n    let rackInfo = null;\n    if (this.props.lift !== \"D\") {\n      rackInfo = (\n        <div key={this.props.rackInfo} className={styles.rackInfo}>\n          Rack {this.props.rackInfo}\n        </div>\n      );\n    }\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.bar} />\n        {this.renderPlates()}\n        <div className={styles.collar} />\n        <div className={styles.bar} />\n        {rackInfo}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    lift: state.lifting.lift\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(BarLoad);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The left card on the lifting page, showing information about the current lifter\n// and helpful information for the loading crew.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport { selectPlates, makeLoadingRelative } from \"../../logic/barLoad\";\nimport { liftToAttemptFieldName } from \"../../logic/entry\";\nimport { kg2lbs, displayWeightOnePlace } from \"../../logic/units\";\n\nimport BarLoad from \"./BarLoad\";\n\nimport styles from \"./LeftCard.module.scss\";\n\nimport { Entry, LoadedPlate, Plate } from \"../../types/dataTypes\";\nimport { GlobalState, LiftingState, RegistrationState } from \"../../types/stateTypes\";\n\ninterface OwnProps {\n  attemptOneIndexed: number;\n  orderedEntries: Array<Entry>;\n  currentEntryId: number | null;\n  nextEntryId: number | null;\n  nextAttemptOneIndexed: number | null;\n}\n\ninterface StateProps {\n  inKg: boolean;\n  showAlternateUnits: boolean;\n  squatBarAndCollarsWeightKg: number;\n  benchBarAndCollarsWeightKg: number;\n  deadliftBarAndCollarsWeightKg: number;\n  plates: Array<Plate>;\n  registration: RegistrationState;\n  lifting: LiftingState;\n}\n\ntype Props = OwnProps & StateProps;\n\ninterface BarLoadOptions {\n  weightKg: number;\n  weightLbs: number;\n  rackInfo: string;\n}\n\nclass LeftCard extends React.Component<Props> {\n  getBarLoadProps = (entryId: number | null, attemptOneIndexed: number | null): BarLoadOptions => {\n    const lift = this.props.lifting.lift;\n    const fieldKg = liftToAttemptFieldName(lift);\n\n    // Defaults, in case of no lifter.\n    if (entryId === null || entryId === undefined || attemptOneIndexed === null || attemptOneIndexed === undefined) {\n      return { weightKg: 0, weightLbs: 0, rackInfo: \"\" };\n    }\n\n    const idx = this.props.registration.lookup[entryId];\n    const entry = this.props.registration.entries[idx];\n\n    const weightKg = entry[fieldKg][attemptOneIndexed - 1];\n    const weightLbs = kg2lbs(weightKg);\n\n    let rackInfo = \"\";\n    if (lift === \"S\") rackInfo = entry.squatRackInfo;\n    if (lift === \"B\") rackInfo = entry.benchRackInfo;\n\n    return { weightKg, weightLbs, rackInfo };\n  };\n\n  getBarAndCollarsWeightKg = (): number => {\n    switch (this.props.lifting.lift) {\n      case \"S\":\n        return this.props.squatBarAndCollarsWeightKg;\n      case \"B\":\n        return this.props.benchBarAndCollarsWeightKg;\n      case \"D\":\n        return this.props.deadliftBarAndCollarsWeightKg;\n      default:\n        return 0;\n    }\n  };\n\n  render() {\n    const current = this.getBarLoadProps(this.props.currentEntryId, this.props.attemptOneIndexed);\n    const next = this.getBarLoadProps(this.props.nextEntryId, this.props.nextAttemptOneIndexed);\n\n    // Show one decimal point, and omit it if possible.\n    const weightKgText = displayWeightOnePlace(current.weightKg);\n    const weightLbsText = displayWeightOnePlace(current.weightLbs);\n\n    const barAndCollarsWeightKg = this.getBarAndCollarsWeightKg();\n\n    // Calculate both loadings.\n    const currentLoading: Array<LoadedPlate> = selectPlates(\n      current.weightKg,\n      barAndCollarsWeightKg,\n      this.props.plates,\n      this.props.inKg\n    );\n    const nextLoading: Array<LoadedPlate> = selectPlates(\n      next.weightKg,\n      barAndCollarsWeightKg,\n      this.props.plates,\n      this.props.inKg\n    );\n\n    // Set the next loading relative to the current loading.\n    if (next.weightKg >= current.weightKg) {\n      makeLoadingRelative(nextLoading, currentLoading);\n    }\n\n    let nextEntryName = undefined;\n    if (typeof this.props.nextEntryId === \"number\") {\n      const idx = this.props.registration.lookup[this.props.nextEntryId];\n      nextEntryName = this.props.registration.entries[idx].name;\n    }\n\n    const nextBarLoad =\n      next.weightKg === 0 ? (\n        undefined\n      ) : (\n        <div className={styles.activeCard}>\n          <div className={styles.loadingBar}>\n            <div className={styles.nextText}>NEXT UP – {nextEntryName}</div>\n            <div className={styles.barArea}>\n              <BarLoad\n                key={String(next.weightKg) + next.rackInfo}\n                loading={nextLoading}\n                rackInfo={next.rackInfo}\n                inKg={this.props.inKg}\n              />\n            </div>\n          </div>\n        </div>\n      );\n\n    let attemptText = this.props.inKg ? weightKgText + \"kg\" : weightLbsText + \"lb\";\n    if (this.props.showAlternateUnits) {\n      attemptText += \" / \";\n      attemptText += this.props.inKg ? weightLbsText + \"lb\" : weightKgText + \"kg\";\n    }\n\n    return (\n      <div className={styles.container}>\n        <div className={styles.activeCard}>\n          <div className={styles.loadingBar}>\n            <div className={styles.attemptText}>{attemptText}</div>\n            <div className={styles.barArea}>\n              <BarLoad\n                key={String(current.weightKg) + current.rackInfo}\n                loading={currentLoading}\n                rackInfo={current.rackInfo}\n                inKg={this.props.inKg}\n              />\n            </div>\n          </div>\n        </div>\n        {nextBarLoad}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    inKg: state.meet.inKg,\n    showAlternateUnits: state.meet.showAlternateUnits,\n    squatBarAndCollarsWeightKg: state.meet.squatBarAndCollarsWeightKg,\n    benchBarAndCollarsWeightKg: state.meet.benchBarAndCollarsWeightKg,\n    deadliftBarAndCollarsWeightKg: state.meet.deadliftBarAndCollarsWeightKg,\n    plates: state.meet.plates,\n    registration: state.registration,\n    lifting: state.lifting\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LeftCard);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// An editable component for attempt manipulation in the LiftingContent.\n\nimport React, { FormEvent } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { liftToAttemptFieldName, liftToStatusFieldName } from \"../../logic/entry\";\nimport { enterAttempt } from \"../../actions/liftingActions\";\nimport { kg2lbs, lbs2kg, displayWeight } from \"../../logic/units\";\n\nimport { Entry, Lift, Validation } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\n\nimport styles from \"./LiftingTable.module.scss\";\nimport { FormControlTypeHack } from \"../../types/utils\";\nimport { Dispatch } from \"redux\";\n\ninterface StateProps {\n  inKg: boolean;\n}\n\ninterface OwnProps {\n  entry: Entry;\n  lift: Lift;\n  attemptOneIndexed: number;\n  id: string;\n}\n\ninterface DispatchProps {\n  enterAttempt: (entryId: number, lift: Lift, attemptOneIndexed: number, weightKg: number) => void;\n}\n\ntype Props = StateProps & OwnProps & DispatchProps;\n\ninterface InternalState {\n  lastGoodValue: string;\n  value: string;\n}\n\nclass AttemptInput extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.validate = this.validate.bind(this);\n    this.handleKeyDown = this.handleKeyDown.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleBlur = this.handleBlur.bind(this);\n\n    const fieldKg = liftToAttemptFieldName(this.props.lift);\n    const weightKg: number = this.props.entry[fieldKg][this.props.attemptOneIndexed - 1];\n\n    let weightStr = \"\";\n    if (weightKg !== 0) {\n      weightStr = displayWeight(this.props.inKg ? weightKg : kg2lbs(weightKg));\n    }\n\n    this.state = {\n      lastGoodValue: weightStr,\n      value: weightStr\n    };\n  }\n\n  validate = (): Validation => {\n    const { value } = this.state;\n    if (value === \"\") return null;\n\n    // Handle all errors before all warnings.\n    // Check that the input is a number.\n    const asNumber = Number(value);\n    if (isNaN(asNumber)) return \"error\";\n    if (!isFinite(asNumber)) return \"error\";\n    if (asNumber < 0) return \"error\";\n\n    // The bar weight must be monotonically increasing between attempts.\n    if (this.props.attemptOneIndexed > 1) {\n      const asKg = this.props.inKg ? asNumber : lbs2kg(asNumber);\n\n      const entry = this.props.entry;\n      const fieldKg = liftToAttemptFieldName(this.props.lift);\n      const fieldStatus = liftToStatusFieldName(this.props.lift);\n\n      const prevAttemptOneIndexed = this.props.attemptOneIndexed - 1;\n      const prevKg = entry[fieldKg][prevAttemptOneIndexed - 1];\n      const prevStatus = entry[fieldStatus][prevAttemptOneIndexed - 1];\n\n      // The previous weight cannot be greater than the current weight.\n      if (prevKg > asKg) return \"error\";\n\n      // The current weight cannot repeat a successful attempt.\n      if (prevKg === asKg && prevStatus === 1) return \"error\";\n\n      // However, they can be equal if the previous attempt was failed.\n      if (prevKg === asKg && prevStatus !== -1) return \"warning\";\n    }\n\n    if (asNumber % 2.5 !== 0) return \"warning\";\n    return null;\n  };\n\n  handleKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === \"Enter\") {\n      event.currentTarget.blur();\n    }\n  };\n\n  handleChange = (event: FormEvent<FormControlTypeHack>) => {\n    const value = event.currentTarget.value;\n    if (typeof value === \"string\") {\n      let fixups = value.replace(\",\", \".\").replace(\" \", \"\");\n\n      // Dvorak \"e\" corresponds to QWERTY \".\", but also is used in exponential\n      // notation, which is a fairly impactful typo.\n      fixups = value.replace(\"e\", \".\");\n\n      this.setState({ value: fixups });\n    }\n  };\n\n  handleBlur = (event: React.FocusEvent<HTMLInputElement>) => {\n    if (this.validate() === \"error\") {\n      this.setState({ value: this.state.lastGoodValue });\n      return;\n    }\n\n    const entryId = this.props.entry.id;\n    const lift = this.props.lift;\n    const attemptOneIndexed = this.props.attemptOneIndexed;\n    const asNumber = Number(this.state.value);\n    const weightKg = this.props.inKg ? asNumber : lbs2kg(asNumber);\n\n    this.props.enterAttempt(entryId, lift, attemptOneIndexed, weightKg);\n    this.setState({ lastGoodValue: this.state.value });\n  };\n\n  render() {\n    const validation: Validation = this.validate();\n\n    return (\n      <Form.Group style={{ marginBottom: 0 }}>\n        <Form.Control\n          id={this.props.id}\n          type=\"text\"\n          placeholder=\"\"\n          value={this.state.value}\n          onKeyDown={this.handleKeyDown}\n          onChange={this.handleChange}\n          onBlur={this.handleBlur}\n          // Nothing for Valid == we don't want borders.\n          isInvalid={validation === \"error\"}\n          // Special rules in the _openlifter.scss override warning styles.\n          // Makes the borders look normal but shows a yellow background.\n          className={(validation === \"warning\" ? \"is-warning \" : \"\") + styles.attemptInput + \" attempt-input\"}\n        />\n      </Form.Group>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  inKg: state.meet.inKg\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  enterAttempt: (entryId, lift, attemptOneIndexed, weightKg) =>\n    dispatch(enterAttempt(entryId, lift, attemptOneIndexed, weightKg))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(AttemptInput);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of Dots points.\n//\n// Dots were introduced by the German IPF Affiliate BVDK after the IPF switched to\n// IPF Points, which do not allow comparing between sexes. The BVDK hosts team\n// competitions that allow lifters of all sexes to compete on a singular team.\n//\n// Since Wilks points have been ostracized from the IPF, and IPF Points are\n// unsuitable, German lifters therefore came up with their own formula.\n//\n// The author of the Dots formula is Tim Konertz <tim.konertz@outlook.com>.\n//\n// Tim says that Dots is an acronym for \"Dynamic Objective Team Scoring,\"\n// but that they chose the acronym before figuring out the expansion.\n//\n// Implementation taken from the main OpenPowerlifting repo, also AGPLv3+.\n\nimport { Sex } from \"../../types/dataTypes\";\nimport { checkExhausted } from \"../../types/utils\";\n\nfunction dotsPoly(a: number, b: number, c: number, d: number, e: number, x: number): number {\n  const x2 = x * x;\n  const x3 = x2 * x;\n  const x4 = x3 * x;\n  return 500.0 / (a * x4 + b * x3 + c * x2 + d * x + e);\n}\n\nexport function dotsMen(bodyweightKg: number): number {\n  const A = -0.000001093;\n  const B = 0.0007391293;\n  const C = -0.1918759221;\n  const D = 24.0900756;\n  const E = -307.75076;\n\n  const adjusted = Math.max(Math.min(bodyweightKg, 210.0), 40.0);\n  return dotsPoly(A, B, C, D, E, adjusted);\n}\n\nexport function dotsWomen(bodyweightKg: number): number {\n  const A = -0.0000010706;\n  const B = 0.0005158568;\n  const C = -0.1126655495;\n  const D = 13.6175032;\n  const E = -57.96288;\n\n  const adjusted = Math.max(Math.min(bodyweightKg, 150.0), 40.0);\n  return dotsPoly(A, B, C, D, E, adjusted);\n}\n\nexport const dots = (sex: Sex, bodyweightKg: number, totalKg: number): number => {\n  if (bodyweightKg === 0 || totalKg === 0) {\n    return 0.0;\n  }\n\n  switch (sex) {\n    case \"M\":\n    case \"Mx\":\n      return dotsMen(bodyweightKg) * totalKg;\n    case \"F\":\n      return dotsWomen(bodyweightKg) * totalKg;\n    default:\n      checkExhausted(sex);\n      return 0;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines Foster-McCulloch age coefficients.\n//\n// These are taken from the OpenPowerlifting coefficients module,\n// translated from the original Rust code.\n\nconst AGE_COEFFICIENTS = [\n  // Coefficients in the range of 0-4 are clearly nonsense.\n  0.0, // 0\n  0.0, // 1\n  0.0, // 2\n  0.0, // 3\n  0.0, // 4\n  // These coefficients don't actually exist, and are just low-balled best guesses.\n  // Kids really shouldn't be competing in this sport...\n  // Ranges from age 5 to 13.\n  1.73, // 5\n  1.67, // 6\n  1.61, // 7\n  1.55, // 8\n  1.49, // 9\n  1.43, // 10\n  1.38, // 11\n  1.33, // 12\n  1.28, // 13\n  // Foster coefficients:\n  // http://www.usapl-sd.com/Formulas/Foster.htm\n  // Ranges from age 14 to 22.\n  1.23, // 14\n  1.18, // 15\n  1.13, // 16\n  1.08, // 17\n  1.06, // 18\n  1.04, // 19\n  1.03, // 20\n  1.02, // 21\n  1.01, // 22\n  // Lifters in the range 23-40 receive no handicap.\n  1.0, // 23\n  1.0, // 24\n  1.0, // 25\n  1.0, // 26\n  1.0, // 27\n  1.0, // 28\n  1.0, // 29\n  1.0, // 30\n  1.0, // 31\n  1.0, // 32\n  1.0, // 33\n  1.0, // 34\n  1.0, // 35\n  1.0, // 36\n  1.0, // 37\n  1.0, // 38\n  1.0, // 39\n  1.0, // 40\n  // McCulloch coefficients:\n  //  http://www.usapl-sd.com/Formulas/Mcculloch.htm (contains some errors).\n  // Errors were corrected using the Masters coefficients from:\n  //  http://worldpowerliftingcongress.com/wp-content/uploads/2015/02/Glossbrenner.htm\n  // Ranges from age 41 to 80.\n  1.01, // 41\n  1.02, // 42\n  1.031, // 43\n  1.043, // 44\n  1.055, // 45\n  1.068, // 46\n  1.082, // 47\n  1.097, // 48\n  1.113, // 49\n  1.13, // 50\n  1.147, // 51\n  1.165, // 52\n  1.184, // 53\n  1.204, // 54\n  1.225, // 55\n  1.246, // 56\n  1.268, // 57\n  1.291, // 58\n  1.315, // 59\n  1.34, // 60\n  1.366, // 61\n  1.393, // 62\n  1.421, // 63\n  1.45, // 64\n  1.48, // 65\n  1.511, // 66\n  1.543, // 67\n  1.576, // 68\n  1.61, // 69\n  1.645, // 70\n  1.681, // 71\n  1.718, // 72\n  1.756, // 73\n  1.795, // 74\n  1.835, // 75\n  1.876, // 76\n  1.918, // 77\n  1.961, // 78\n  2.005, // 79\n  2.05, // 80\n  // These coefficients taken from:\n  // http://www.usapltwinportsrawopen.com/resources/USAPL+Age+Coefficients.pdf\n  // Ranges from age 81 to 90.\n  2.096, // 81\n  2.143, // 82\n  2.19, // 83\n  2.238, // 84\n  2.287, // 85\n  2.337, // 86\n  2.388, // 87\n  2.44, // 88\n  2.494, // 89\n  2.549, // 90\n  // Coefficients above 90 were just guessed at, and are unstandardized.\n  2.605, // 91\n  2.662, // 92\n  2.72, // 93\n  2.779, // 94\n  2.839, // 95\n  2.9, // 96\n  2.962, // 97\n  3.025, // 98\n  3.089, // 99\n  3.154 // 100\n];\n\n// Maps the given age into the table above.\nexport const fosterMcCulloch = (age: number): number => {\n  if (!Number.isInteger(age) || age <= 0) {\n    return 1.0;\n  }\n\n  // Greater-than is correct here: (age) is used to index into table, not (age-1).\n  if (age > AGE_COEFFICIENTS.length) {\n    return 1.0;\n  }\n\n  return AGE_COEFFICIENTS[age];\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of Schwartz-Malone points.\n// Taken from https://gitlab.com/openpowerlifting/opl-data.\n\nimport { Sex } from \"../../types/dataTypes\";\n\n// Calculated the Schwartz coefficient, used for men.\nexport const schwartz_coefficient = (bodyweightKg: number): number => {\n  // Values calculated by fitting to coefficient tables.\n  const A = 3565.902903983125;\n  const B = -2.244917050872728;\n  const C = 0.445775838479913;\n\n  // Arbitrary choice of lower bound.\n  let adjusted = Math.max(bodyweightKg, 40.0);\n\n  return A * Math.pow(adjusted, B) + C;\n};\n\n// Calculates the Malone coefficient, used for women.\nexport const malone_coefficient = (bodyweightKg: number): number => {\n  // Values calculated by fitting to coefficient tables.\n  const A = 106.011586323613;\n  const B = -1.293027130579051;\n  const C = 0.322935585328304;\n\n  // Lower bound chosen at point where Malone = max(Wilks).\n  let adjusted = Math.max(bodyweightKg, 29.24);\n\n  return A * Math.pow(adjusted, B) + C;\n};\n\n// Calculates Schwartz-Malone points.\n//\n// Schwartz-Malone is an older system that was superseded by Wilks.\nexport const schwartzmalone = (sex: Sex, bodyweightKg: number, totalKg: number): number => {\n  switch (sex) {\n    case \"M\":\n      return schwartz_coefficient(bodyweightKg) * totalKg;\n    case \"F\":\n      return malone_coefficient(bodyweightKg) * totalKg;\n    default:\n      return 0;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of Wilks points.\n// Taken from https://gitlab.com/openpowerlifting/ipf-points-calculator.\n\nimport { Sex } from \"../../types/dataTypes\";\nimport { checkExhausted } from \"../../types/utils\";\n\nfunction wilksPoly(a: number, b: number, c: number, d: number, e: number, f: number, x: number): number {\n  var x2 = x * x,\n    x3 = x2 * x,\n    x4 = x3 * x,\n    x5 = x4 * x;\n  return 500.0 / (a + b * x + c * x2 + d * x3 + e * x4 + f * x5);\n}\n\nexport function wilksMen(bodyweightKg: number): number {\n  const normalized = Math.min(Math.max(bodyweightKg, 40.0), 201.9);\n  return wilksPoly(-216.0475144, 16.2606339, -0.002388645, -0.00113732, 7.01863e-6, -1.291e-8, normalized);\n}\n\nexport function wilksWomen(bodyweightKg: number): number {\n  const normalized = Math.min(Math.max(bodyweightKg, 26.51), 154.53);\n  return wilksPoly(\n    594.31747775582,\n    -27.23842536447,\n    0.82112226871,\n    -0.00930733913,\n    0.00004731582,\n    -0.00000009054,\n    normalized\n  );\n}\n\nexport const wilks = (sex: Sex, bodyweightKg: number, totalKg: number): number => {\n  switch (sex) {\n    case \"M\":\n    case \"Mx\":\n      return wilksMen(bodyweightKg) * totalKg;\n    case \"F\":\n      return wilksWomen(bodyweightKg) * totalKg;\n    default:\n      checkExhausted(sex);\n      return 0;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of Glossbrenner points.\n// Taken from https://gitlab.com/openpowerlifting/opl-data.\n\nimport { schwartz_coefficient, malone_coefficient } from \"./schwartzmalone\";\nimport { wilksMen, wilksWomen } from \"./wilks\";\n\nimport { Sex } from \"../../types/dataTypes\";\nimport { checkExhausted } from \"../../types/utils\";\n\nconst glossbrenner_coefficient_men = (bodyweightKg: number): number => {\n  // Glossbrenner is defined piecewise.\n  if (bodyweightKg < 153.05) {\n    return (schwartz_coefficient(bodyweightKg) + wilksMen(bodyweightKg)) / 2.0;\n  } else {\n    // Linear coefficients found by fitting to a table.\n    const A = -0.000821668402557;\n    const B = 0.676940740094416;\n    return (schwartz_coefficient(bodyweightKg) + A * bodyweightKg + B) / 2.0;\n  }\n};\n\nconst glossbrenner_coefficient_women = (bodyweightKg: number): number => {\n  // Glossbrenner is defined piecewise.\n  if (bodyweightKg < 106.3) {\n    return (malone_coefficient(bodyweightKg) + wilksWomen(bodyweightKg)) / 2.0;\n  } else {\n    // Linear coefficients found by fitting to a table.\n    const A = -0.000313738002024;\n    const B = 0.852664892884785;\n    return (malone_coefficient(bodyweightKg) + A * bodyweightKg + B) / 2.0;\n  }\n};\n\n// Calculates Glossbrenner points.\n//\n// Glossbrenner is the average of two older systems, Schwartz-Malone and Wilks,\n// with a piecewise linear section.\n//\n// This points system is most often used by GPC affiliates.\nexport const glossbrenner = (sex: Sex, bodyweightKg: number, totalKg: number): number => {\n  switch (sex) {\n    case \"M\":\n    case \"Mx\":\n      return glossbrenner_coefficient_men(bodyweightKg) * totalKg;\n    case \"F\":\n      return glossbrenner_coefficient_women(bodyweightKg) * totalKg;\n    default:\n      checkExhausted(sex);\n      return 0;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of IPF Points.\n// Taken from https://gitlab.com/openpowerlifting/ipf-points-calculator.\n\nimport { Sex, Event, Equipment } from \"../../types/dataTypes\";\n\ntype Coefficients = Array<number>;\ntype ByEvent = {\n  SBD: Coefficients;\n  S: Coefficients;\n  B: Coefficients;\n  D: Coefficients;\n};\ntype ByEquipment = {\n  Sleeves: ByEvent;\n  \"Single-ply\": ByEvent;\n};\ntype BySex = {\n  M: ByEquipment;\n  F: ByEquipment;\n};\n\nconst PARAMETERS: BySex = {\n  M: {\n    Sleeves: {\n      SBD: [310.67, 857.785, 53.216, 147.0835],\n      S: [123.1, 363.085, 25.1667, 75.4311],\n      B: [86.4745, 259.155, 17.57845, 53.122],\n      D: [103.5355, 244.765, 15.3714, 31.5022]\n    },\n    \"Single-ply\": {\n      SBD: [387.265, 1121.28, 80.6324, 222.4896],\n      S: [150.485, 446.445, 36.5155, 103.7061],\n      B: [133.94, 441.465, 35.3938, 113.0057],\n      D: [110.135, 263.66, 14.996, 23.011]\n    }\n  },\n  F: {\n    Sleeves: {\n      SBD: [125.1435, 228.03, 34.5246, 86.8301],\n      S: [50.479, 105.632, 19.1846, 56.2215],\n      B: [25.0485, 43.848, 6.7172, 13.952],\n      D: [47.136, 67.349, 9.1555, 13.67]\n    },\n    \"Single-ply\": {\n      SBD: [176.58, 373.315, 48.4534, 110.0103],\n      S: [74.6855, 171.585, 21.9475, 52.2948],\n      B: [49.106, 124.209, 23.199, 67.4926],\n      D: [51.002, 69.8265, 8.5802, 5.7258]\n    }\n  }\n};\n\nexport const ipfpoints = (\n  totalKg: number,\n  bodyweightKg: number,\n  sex: Sex,\n  equipment: Equipment,\n  event: Event\n): number => {\n  if (totalKg === 0) return 0;\n  if (bodyweightKg < 40) return 0;\n\n  // Restrict inputs to only the defined subset.\n  let normalizedEquipment = equipment;\n  if (equipment === \"Bare\" || equipment === \"Wraps\") {\n    normalizedEquipment = \"Sleeves\";\n  } else if (equipment === \"Multi-ply\") {\n    normalizedEquipment = \"Single-ply\";\n  }\n  if (normalizedEquipment !== \"Sleeves\" && normalizedEquipment !== \"Single-ply\") {\n    return 0;\n  }\n\n  // Consider Mx athletes as M, since that's the harsher formula.\n  let normalizedSex = sex;\n  if (sex === \"Mx\") normalizedSex = \"M\";\n\n  if (event !== \"SBD\" && event !== \"S\" && event !== \"B\" && event !== \"D\") return 0;\n  if (normalizedSex !== \"M\" && normalizedSex !== \"F\") return 0;\n\n  const params = PARAMETERS[normalizedSex][normalizedEquipment][event];\n  const bw_log = Math.log(bodyweightKg);\n\n  const mean = params[0] * bw_log - params[1];\n  const dev = params[2] * bw_log - params[3];\n\n  const points = 500 + (100 * (totalKg - mean)) / dev;\n  if (isNaN(points) || points < 0) {\n    return 0;\n  }\n  return points;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of Reshel points.\n//\n// Reshel is published as a table, with rounded x-values and rounded y-values.\n// No formula is given. We attempted to fit a function to the curve.\n//\n// The formula here is accurate to about 0.01, and is most inaccurate between\n// 70-80kg for men. Elsewhere it fits very closely.\n\nimport { Sex } from \"../../types/dataTypes\";\nimport { checkExhausted } from \"../../types/utils\";\n\nexport function reshelMen(bodyweightKg: number): number {\n  // Coefficients determined by GNUPlot. They need improvement.\n  const a: number = 23740.8329088123;\n  const b: number = -9.75618720662844;\n  const c: number = 0.787990994925928;\n  const d: number = -2.68445158813578;\n\n  const normalized = Math.min(Math.max(bodyweightKg, 50.0), 174.75);\n  return a * Math.pow(normalized + b, d) + c;\n}\n\nexport function reshelWomen(bodyweightKg: number): number {\n  // Coefficients determined by GNUPlot. They need improvement.\n  const a: number = 239.894659799145;\n  const b: number = -20.5105859285582;\n  const c: number = 1.16052601684125;\n  const d: number = -1.61417872668708;\n\n  const normalized = Math.min(Math.max(bodyweightKg, 40.0), 118.75);\n  return a * Math.pow(normalized + b, d) + c;\n}\n\nexport const reshel = (sex: Sex, bodyweightKg: number, totalKg: number): number => {\n  switch (sex) {\n    case \"M\":\n    case \"Mx\":\n      return reshelMen(bodyweightKg) * totalKg;\n    case \"F\":\n      return reshelWomen(bodyweightKg) * totalKg;\n    default:\n      checkExhausted(sex);\n      return 0;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Wraps all the points functions into a common interface.\n\nimport { bodyweight_multiple } from \"./bodyweight-multiple\";\nimport { dots } from \"./dots\";\nimport { fosterMcCulloch } from \"./foster-mcculloch\";\nimport { glossbrenner } from \"./glossbrenner\";\nimport { ipfpoints } from \"./ipf\";\nimport { nasapoints } from \"./nasa\";\nimport { reshel } from \"./reshel\";\nimport { schwartzmalone } from \"./schwartzmalone\";\nimport { wilks } from \"./wilks\";\n\nimport { getAge } from \"../entry\";\nimport { kg2lbs } from \"../units\";\n\nimport { AgeCoefficients, Entry, Event, Equipment, Formula, Sex } from \"../../types/dataTypes\";\nimport { checkExhausted } from \"../../types/utils\";\n\nexport const getPoints = (formula: Formula, entry: Entry, event: Event, totalKg: number, inKg: boolean): number => {\n  // Some of the data are singular properties of the entry.\n  const sex: Sex = entry.sex;\n  const equipment: Equipment = entry.equipment;\n  const bodyweightKg: number = entry.bodyweightKg;\n\n  switch (formula) {\n    case \"Bodyweight Multiple\":\n      return bodyweight_multiple(bodyweightKg, totalKg);\n    case \"Dots\":\n      return dots(sex, bodyweightKg, totalKg);\n    case \"Glossbrenner\":\n      return glossbrenner(sex, bodyweightKg, totalKg);\n    case \"IPF Points\":\n      return ipfpoints(totalKg, bodyweightKg, sex, equipment, event);\n    case \"NASA Points\":\n      return nasapoints(bodyweightKg, totalKg);\n    case \"Reshel\":\n      return reshel(sex, bodyweightKg, totalKg);\n    case \"Schwartz/Malone\":\n      return schwartzmalone(sex, bodyweightKg, totalKg);\n    case \"Total\":\n      return inKg ? totalKg : kg2lbs(totalKg);\n    case \"Wilks\":\n      return wilks(sex, bodyweightKg, totalKg);\n    default:\n      checkExhausted(formula);\n      return 0;\n  }\n};\n\nexport const getAgeAdjustedPoints = (\n  ageCoefficients: AgeCoefficients,\n  meetDate: string,\n  formula: Formula,\n  entry: Entry,\n  event: Event,\n  totalKg: number,\n  inKg: boolean\n): number => {\n  const points = getPoints(formula, entry, event, totalKg, inKg);\n\n  switch (ageCoefficients) {\n    case \"None\":\n      return points;\n    case \"FosterMcCulloch\":\n      return fosterMcCulloch(getAge(entry, meetDate)) * points;\n    default:\n      checkExhausted(ageCoefficients);\n      return 0;\n  }\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of points as a multiple of bodyweight.\n//\n// Although this logic is very simple, there is some finesse to avoid\n// division by zero that is easier to write once and import than repeat.\n\nexport const bodyweight_multiple = (bodyweightKg: number, totalKg: number): number => {\n  if (bodyweightKg <= 0 || totalKg <= 0) {\n    return 0;\n  }\n  return totalKg / bodyweightKg;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the calculation of NASA Points.\n// They are defined in a coefficient table: http://nasa-sports.com/coefficient-system/\n// It turns out that they are a simple line.\n\nexport const nasapoints = (bodyweightKg: number, totalKg: number): number => {\n  // The function was determined using fitting in GNUPlot:\n  //\n  // Final set of parameters            Asymptotic Standard Error\n  // =======================            ==========================\n  // m               = 0.00620912       +/- 1.265e-06    (0.02037%)\n  // b               = 0.565697         +/- 0.0001322    (0.02337%)\n  const m = 0.00620912;\n  const b = 0.565697;\n\n  if (bodyweightKg < 30) return 0; // Arbitrary lower bound.\n  return (totalKg / bodyweightKg) * (m * bodyweightKg + b);\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport { liftToAttemptFieldName, liftToStatusFieldName, MAX_ATTEMPTS } from \"./entry\";\n\nimport { LiftingOrder, Entry, FieldKg, FieldStatus } from \"../types/dataTypes\";\nimport { LiftingState } from \"../types/stateTypes\";\n\n// Helper function: for a given entry, see what attempt number would be next.\n//\n// Returns a number >1 if the entry is still lifting, representing the next attempt.\n// Returns zero if the entry does not have any pending attempts.\nconst getNextAttemptNumberForEntry = (entry: Entry, fieldKg: FieldKg, fieldStatus: FieldStatus): number => {\n  const weightsKg = entry[fieldKg];\n  const statuses = entry[fieldStatus];\n\n  // Lifters only set the next attempt, so loop backwards,\n  // looking for the first attempt that meets the criteria.\n  for (var i = MAX_ATTEMPTS - 1; i >= 0; i--) {\n    if (weightsKg[i] !== 0 && statuses[i] === 0) {\n      return i + 1;\n    }\n  }\n  return 0;\n};\n\n// Determine the current active attempt for the current lift.\n//\n// An attempt is active if either:\n// 1. It has been overridden by the Attempt selector.\n// 2. There exists an attempt of that number with no success/failure value,\n//    and there is no lower attempt number with that property.\n//\n// Returns a number in the (inclusive) range of [1, MAX_ATTEMPTS].\n// If there is not enough data to make a decision, returns 1.\nconst getActiveAttemptNumber = (entriesInFlight: Array<Entry>, lifting: LiftingState): number => {\n  const lift = lifting.lift;\n  const fieldKg = liftToAttemptFieldName(lift);\n  const fieldStatus = liftToStatusFieldName(lift);\n\n  // Allow manual override.\n  if (lifting.overrideAttempt !== null) {\n    return Number(lifting.overrideAttempt);\n  }\n\n  // Iterate in reverse, looking for the earliest attempt that hasn't been lifted.\n  let earliestAttemptOneIndexed = MAX_ATTEMPTS + 1;\n  for (var i = 0; i < entriesInFlight.length; i++) {\n    const entry = entriesInFlight[i];\n    const next = getNextAttemptNumberForEntry(entry, fieldKg, fieldStatus);\n    // Zero return value means \"no pending attempts for this entry.\"\n    if (next > 0 && next < earliestAttemptOneIndexed) {\n      earliestAttemptOneIndexed = next;\n    }\n  }\n\n  // In the case of no pending lifts, just default to first attempt.\n  if (earliestAttemptOneIndexed === MAX_ATTEMPTS + 1) {\n    return 1;\n  }\n  return earliestAttemptOneIndexed;\n};\n\n// Helper function for recursive comparison.\nexport const compareEntriesByAttempt = (a: Entry, b: Entry, fieldKg: FieldKg, attemptOneIndexed: number): number => {\n  const aKg = a[fieldKg][attemptOneIndexed - 1];\n  const bKg = b[fieldKg][attemptOneIndexed - 1];\n\n  // If non-equal, sort by weight, ascending.\n  if (aKg !== bKg) return aKg - bKg;\n\n  // If the federation uses lot numbers, break ties using lot.\n  if (a.lot !== 0 && b.lot !== 0) return a.lot - b.lot;\n\n  // If this is not the first attempt, preserve the order from the last attempt.\n  if (attemptOneIndexed > 1) {\n    return compareEntriesByAttempt(a, b, fieldKg, attemptOneIndexed - 1);\n  }\n\n  // Try to break ties using bodyweight, with the lighter lifter going first.\n  if (a.bodyweightKg !== b.bodyweightKg) return a.bodyweightKg - b.bodyweightKg;\n\n  // If we've run out of properties by which to compare them, resort to Name.\n  if (a.name < b.name) return -1;\n  if (a.name > b.name) return 1;\n  return 0;\n};\n\n// Helper function: performs an in-place sort on an array of entries.\n// Assumes that zero entries are not mixed in with non-zero entries.\nexport const orderEntriesByAttempt = (\n  entries: Array<Entry>,\n  fieldKg: FieldKg,\n  attemptOneIndexed: number\n): Array<Entry> => {\n  return entries.sort((a, b) => {\n    return compareEntriesByAttempt(a, b, fieldKg, attemptOneIndexed);\n  });\n};\n\n// Returns a copy of the entries in lifting order for the current attempt.\nconst orderEntriesForAttempt = (\n  entriesInFlight: Array<Entry>,\n  lifting: LiftingState,\n  attemptOneIndexed: number\n): Array<Entry> => {\n  const lift = lifting.lift;\n  const fieldKg = liftToAttemptFieldName(lift);\n\n  const attemptZeroIndexed = attemptOneIndexed - 1;\n  const existsNextAttempt = attemptOneIndexed + 1 <= MAX_ATTEMPTS;\n  const existsPrevAttempt = attemptOneIndexed > 1;\n\n  // Divide the entries into disjoint groups:\n  let byNextAttempt: Array<Entry> = []; // Entries sorted by their next attempt.\n  let byThisAttempt: Array<Entry> = []; // Entries sorted by this attempt.\n  let byPrevAttempt: Array<Entry> = []; // Entries sorted by previous attempt.\n  let notLifting: Array<Entry> = []; // Entries that don't have this or next attempts in.\n\n  for (let i = 0; i < entriesInFlight.length; i++) {\n    const entry = entriesInFlight[i];\n\n    if (existsNextAttempt && entry[fieldKg][attemptZeroIndexed + 1] !== 0) {\n      byNextAttempt.push(entry);\n    } else if (entry[fieldKg][attemptZeroIndexed] !== 0) {\n      byThisAttempt.push(entry);\n    } else if (existsPrevAttempt && entry[fieldKg][attemptZeroIndexed - 1] !== 0) {\n      byPrevAttempt.push(entry);\n    } else {\n      notLifting.push(entry);\n    }\n  }\n\n  // Perform sorting on the relative groups.\n  if (existsNextAttempt) {\n    orderEntriesByAttempt(byNextAttempt, fieldKg, attemptOneIndexed + 1);\n  }\n  orderEntriesByAttempt(byThisAttempt, fieldKg, attemptOneIndexed);\n  if (existsPrevAttempt) {\n    orderEntriesByAttempt(byPrevAttempt, fieldKg, attemptOneIndexed - 1);\n  }\n  orderEntriesByAttempt(notLifting, fieldKg, attemptOneIndexed);\n\n  // Arrange these three groups consecutively.\n  return Array.prototype.concat(byNextAttempt, byThisAttempt, byPrevAttempt, notLifting);\n};\n\n// Returns either the current entry ID or null if no active entry.\n//\n// In the ordered entries, the earliest lifter that hasn't gone yet is going.\n// This can be manually overridden by UI controls.\nconst getCurrentEntryId = (\n  lifting: LiftingState,\n  orderedEntries: Array<Entry>,\n  attemptOneIndexed: number\n): number | null => {\n  const lift = lifting.lift;\n  const fieldKg = liftToAttemptFieldName(lift);\n  const fieldStatus = liftToStatusFieldName(lift);\n\n  if (lifting.overrideEntryId !== null) {\n    return Number(lifting.overrideEntryId);\n  }\n\n  for (let i = 0; i < orderedEntries.length; i++) {\n    const entry = orderedEntries[i];\n    const idx = attemptOneIndexed - 1;\n    if (entry[fieldKg][idx] !== 0 && entry[fieldStatus][idx] === 0) {\n      return entry.id;\n    }\n  }\n  return null;\n};\n\ntype NextEntryInfo = {\n  entryId: number;\n  attemptOneIndexed: number;\n};\n\n// Returns either an Object of {entryId, attemptOneIndexed}, or null.\nconst getNextEntryInfo = (\n  lifting: LiftingState,\n  currentEntryId: number | null,\n  orderedEntries: Array<Entry>,\n  attemptOneIndexed: number\n): NextEntryInfo | null => {\n  const lift = lifting.lift;\n  const fieldKg = liftToAttemptFieldName(lift);\n  const fieldStatus = liftToStatusFieldName(lift);\n\n  if (currentEntryId === null) {\n    return null;\n  }\n\n  // Find the index of the currentEntryId in the orderedEntries.\n  const currentEntryIndex = orderedEntries.findIndex(e => e.id === currentEntryId);\n  if (currentEntryIndex === -1) {\n    return null;\n  }\n\n  // Walk forward, looking for additional valid attempts.\n  for (let i = currentEntryIndex + 1; i < orderedEntries.length; i++) {\n    const hasAttempt = orderedEntries[i][fieldKg][attemptOneIndexed - 1] !== 0;\n    const notTaken = orderedEntries[i][fieldStatus][attemptOneIndexed - 1] === 0;\n\n    if (hasAttempt && notTaken) {\n      return {\n        entryId: orderedEntries[i].id,\n        attemptOneIndexed: attemptOneIndexed\n      };\n    }\n  }\n\n  // If none were found walking forward, check the next attempt by wrapping around.\n  if (attemptOneIndexed + 1 > MAX_ATTEMPTS) {\n    return null;\n  }\n  const nextAttemptOneIndexed = attemptOneIndexed + 1;\n\n  for (let i = 0; i < currentEntryIndex; i++) {\n    const hasAttempt = orderedEntries[i][fieldKg][nextAttemptOneIndexed - 1] !== 0;\n    const notTaken = orderedEntries[i][fieldStatus][nextAttemptOneIndexed - 1] === 0;\n\n    if (hasAttempt && notTaken) {\n      return {\n        entryId: orderedEntries[i].id,\n        attemptOneIndexed: nextAttemptOneIndexed\n      };\n    }\n  }\n\n  return null;\n};\n\n// Main application logic. Resolves the LiftingState to a LiftingOrder.\nexport const getLiftingOrder = (entriesInFlight: Array<Entry>, lifting: LiftingState): LiftingOrder => {\n  const attemptOneIndexed = getActiveAttemptNumber(entriesInFlight, lifting);\n  const orderedEntries = orderEntriesForAttempt(entriesInFlight, lifting, attemptOneIndexed);\n  const currentEntryId = getCurrentEntryId(lifting, orderedEntries, attemptOneIndexed);\n  const nextEntryInfo = getNextEntryInfo(lifting, currentEntryId, orderedEntries, attemptOneIndexed);\n\n  return {\n    orderedEntries: orderedEntries,\n    attemptOneIndexed: attemptOneIndexed,\n    currentEntryId: currentEntryId,\n    nextAttemptOneIndexed: nextEntryInfo ? nextEntryInfo.attemptOneIndexed : null,\n    nextEntryId: nextEntryInfo ? nextEntryInfo.entryId : null\n  };\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the logic for calculating the division Place of a lifter, shared between\n// the Lifting page, the Rankings page, and data export code.\n//\n// The algorithm used is particularly bad -- the foremost goal was to make an interface\n// that allowed for maximum code reuse between the Rankings and Lifting pages,\n// which have slightly different needs.\n\nimport { getProjectedEventTotalKg, getFinalEventTotalKg, liftToAttemptFieldName } from \"./entry\";\nimport { compareEntriesByAttempt } from \"./liftingOrder\";\nimport { getWeightClassStr } from \"../reducers/meetReducer\";\n\nimport { Sex, Event, Equipment, Entry, Lift } from \"../types/dataTypes\";\nimport { checkExhausted } from \"../types/utils\";\n\nexport type Place = number | \"DQ\";\n\n// Determines how the total is calculated.\ntype ResultsType = \"Projected\" | \"Final\";\n\n// Specifies a competition category under which entries can be ranked together.\nexport type Category = {\n  sex: Sex;\n  event: Event;\n  equipment: Equipment;\n  division: string;\n  weightClassStr: string;\n};\n\n// Wraps up all the entries in a category with the category's descriptors.\nexport type CategoryResults = {\n  category: Category;\n  orderedEntries: Array<Entry>;\n};\n\n// Generates a unique String out of a Category, for purposes of using as a Map key.\nconst categoryToKey = (category: Category): string => {\n  return JSON.stringify(category);\n};\nconst keyToCategory = (key: string): Category => {\n  return JSON.parse(key);\n};\n\n// Helper function for sortByPlaceInCategory().\n//\n// Determines the last successful Lift (for example, \"B\") for the Entry in\n// the given Event category.\n//\n// Lifters have already been checked to have a non-zero total.\nconst getLastSuccessfulLift = (event: Event, entry: Entry): Lift => {\n  // Iterate backwards over the Event types.\n  for (let i = event.length - 1; i >= 0; --i) {\n    const lift = event[i];\n    switch (lift) {\n      case \"S\":\n        if (entry.squatStatus.includes(1)) {\n          return \"S\";\n        }\n        break;\n      case \"B\":\n        if (entry.benchStatus.includes(1)) {\n          return \"B\";\n        }\n        break;\n      case \"D\":\n        if (entry.deadliftStatus.includes(1)) {\n          return \"D\";\n        }\n        break;\n      default:\n        return \"S\";\n    }\n  }\n  return \"S\";\n};\n\n// Helper function for sortByPlaceInCategory().\n//\n// Determines the last successful attempt (only counting the first three) for\n// the Entry for the given Lift.\n//\n// The caller already knows that a successful attempt was made, since it\n// passed getLastSuccessfulLift().\nconst getLastSuccessfulAttempt = (lift: Lift, entry: Entry): number => {\n  let statuses = null;\n  switch (lift) {\n    case \"S\":\n      statuses = entry.squatStatus;\n      break;\n    case \"B\":\n      statuses = entry.benchStatus;\n      break;\n    case \"D\":\n      statuses = entry.deadliftStatus;\n      break;\n    default:\n      checkExhausted(lift);\n      return 0;\n  }\n\n  // Consider only the first three attempts, in reverse.\n  for (let i = 2; i >= 0; --i) {\n    if (statuses[i] === 1) return i;\n  }\n  return 0;\n};\n\n// Returns a copy of the entries array sorted by Place.\n// All entries are assumed to be part of the same category.\nconst sortByPlaceInCategory = (entries: Array<Entry>, category: Category, type: ResultsType): Array<Entry> => {\n  const event = category.event;\n\n  // Clone the entries array to avoid modifying the original.\n  let clonedEntries = entries.slice();\n\n  // Sort in the given category, first place having the lowest index.\n  clonedEntries.sort((a, b) => {\n    let aTotal = 0;\n\n    // First sort by Total, higher sorting lower.\n    if (type === \"Projected\") {\n      aTotal = getProjectedEventTotalKg(a, event);\n      const bTotal = getProjectedEventTotalKg(b, event);\n      if (aTotal !== bTotal) return bTotal - aTotal;\n    } else if (type === \"Final\") {\n      aTotal = getFinalEventTotalKg(a, event);\n      const bTotal = getFinalEventTotalKg(b, event);\n      if (aTotal !== bTotal) return bTotal - aTotal;\n    }\n\n    // If totals are equal, sort by Bodyweight, lower sorting lower.\n    if (a.bodyweightKg !== b.bodyweightKg) return a.bodyweightKg - b.bodyweightKg;\n\n    // If totals are zero, neither lifter took a successful attempt,\n    // so just sort arbitrarily by name.\n    if (aTotal === 0) {\n      if (a.name < b.name) return -1;\n      if (a.name > b.name) return 1;\n      return 0;\n    }\n\n    // If totals are equal and bodyweights are equal, the winner is the\n    // lifter who reached the total first. Because our implementation is\n    // stateless and doesn't remember lifting order, this gets complicated.\n    //\n    // For purposes of simplicity, this is broken into cases.\n    //\n    // At this point, the logic requires that each lifter have taken at least\n    // one successful attempt -- this is validated by checking the total\n    // against zero above.\n    //\n    // Case 1: If the lifters' last successful lifts were for different Lifts,\n    //         then the lifter with the earlier lift in SBD order wins.\n    const aLastSuccessfulLift = getLastSuccessfulLift(event, a);\n    const bLastSuccessfulLift = getLastSuccessfulLift(event, b);\n    const aLastSuccessfulLiftIndex = [\"S\", \"B\", \"D\"].indexOf(aLastSuccessfulLift);\n    const bLastSuccessfulLiftIndex = [\"S\", \"B\", \"D\"].indexOf(bLastSuccessfulLift);\n    if (aLastSuccessfulLiftIndex !== bLastSuccessfulLiftIndex) {\n      return aLastSuccessfulLiftIndex - bLastSuccessfulLiftIndex;\n    }\n\n    // Case 2: If the lifters reached the total on the same lift but on different\n    //         attempts, the lifter with the earlier attempt wins.\n    const lift: Lift = aLastSuccessfulLift;\n    const aLastSuccessfulAttempt: number = getLastSuccessfulAttempt(lift, a);\n    const bLastSuccessfulAttempt: number = getLastSuccessfulAttempt(lift, b);\n    if (aLastSuccessfulAttempt !== bLastSuccessfulAttempt) {\n      return aLastSuccessfulAttempt - bLastSuccessfulAttempt;\n    }\n\n    // Case 3: If the lifters reached the total on the same lift and on the same\n    //         attempt, defer to the lifting order to determine who lifted first.\n    const attempt = aLastSuccessfulAttempt;\n    return compareEntriesByAttempt(a, b, liftToAttemptFieldName(lift), attempt);\n  });\n\n  return clonedEntries;\n};\n\n// Determines the sort order by Event.\nconst getEventSortOrder = (ev: Event): number => {\n  return [\"SBD\", \"BD\", \"SB\", \"SD\", \"S\", \"B\", \"D\"].indexOf(ev);\n};\n\n// Determines the sort order by Equipment.\nconst getEquipmentSortOrder = (eq: Equipment): number => {\n  return [\"Bare\", \"Sleeves\", \"Wraps\", \"Single-ply\", \"Multi-ply\"].indexOf(eq);\n};\n\n// Determines the sort order by Sex.\nconst getSexSortOrder = (sex: Sex): number => {\n  switch (sex) {\n    case \"F\":\n      return 0;\n    case \"M\":\n      return 1;\n    case \"Mx\":\n      return 2;\n    default:\n      checkExhausted(sex);\n      return 3;\n  }\n};\n\n// Determines the sort (and therefore presentation) order for the Category Results.\n// The input array is sorted in-place; nothing is returned.\nexport const sortCategoryResults = (results: Array<CategoryResults>) => {\n  results.sort((a, b) => {\n    const catA = a.category;\n    const catB = b.category;\n\n    // First, sort by Sex.\n    const aSex = getSexSortOrder(catA.sex);\n    const bSex = getSexSortOrder(catB.sex);\n    if (aSex !== bSex) return aSex - bSex;\n\n    // Next, sort by Event.\n    const aEvent = getEventSortOrder(catA.event);\n    const bEvent = getEventSortOrder(catB.event);\n    if (aEvent !== bEvent) return aEvent - bEvent;\n\n    // Next, sort by Equipment.\n    const aEquipment = getEquipmentSortOrder(catA.equipment);\n    const bEquipment = getEquipmentSortOrder(catB.equipment);\n    if (aEquipment !== bEquipment) return aEquipment - bEquipment;\n\n    // Next, sort by Division as string.\n    if (catA.division < catB.division) return -1;\n    if (catA.division > catB.division) return 1;\n\n    // Finally, sort by WeightClass.\n    // Any SHW class should be placed at the end.\n    const aIsSHW: boolean = catA.weightClassStr.includes(\"+\");\n    const bIsSHW: boolean = catB.weightClassStr.includes(\"+\");\n    if (aIsSHW && !bIsSHW) return 1;\n    if (!aIsSHW && bIsSHW) return -1;\n    // parseInt() ignores the \"+\" at the end of SHW class strings.\n    const aWeightClass = catA.weightClassStr === \"\" ? 0 : parseInt(catA.weightClassStr);\n    const bWeightClass = catB.weightClassStr === \"\" ? 0 : parseInt(catB.weightClassStr);\n    return aWeightClass - bWeightClass;\n  });\n};\n\nconst mapSexToClasses = (sex: Sex, men: Array<number>, women: Array<number>, mx: Array<number>): Array<number> => {\n  switch (sex) {\n    case \"M\":\n      return men;\n    case \"F\":\n      return women;\n    case \"Mx\":\n      return mx;\n    default:\n      checkExhausted(sex);\n      return men;\n  }\n};\n\n// Generates objects representing every present category of competition,\n// with each entry given a Place designation.\n//\n// The returned objects are sorted in intended order of presentation.\nconst getAllResults = (\n  entries: Array<Entry>,\n  weightClassesKgMen: Array<number>,\n  weightClassesKgWomen: Array<number>,\n  weightClassesKgMx: Array<number>,\n  combineSleevesAndWraps: boolean,\n  type: ResultsType\n): Array<CategoryResults> => {\n  // Generate a map from category to the entries within that category.\n  // The map is populated by iterating over each entry and having the entry\n  // append itself to per-category lists.\n  let categoryMap = new Map();\n  for (let i = 0; i < entries.length; i++) {\n    const e = entries[i];\n\n    // Remember consistent properties.\n    const sex = e.sex;\n    const classesForSex = mapSexToClasses(sex, weightClassesKgMen, weightClassesKgWomen, weightClassesKgMx);\n    const weightClassStr = getWeightClassStr(classesForSex, e.bodyweightKg);\n\n    // If the results combine Sleeves and Wraps, promote Sleeves to Wraps.\n    let equipment = e.equipment;\n    if (combineSleevesAndWraps && equipment === \"Sleeves\") {\n      equipment = \"Wraps\";\n    }\n\n    // Iterate over every combination of division and event, adding to the map.\n    for (let dividx = 0; dividx < e.divisions.length; dividx++) {\n      const division = e.divisions[dividx];\n\n      for (let evidx = 0; evidx < e.events.length; evidx++) {\n        const event = e.events[evidx];\n        const category = { sex, event, equipment, division, weightClassStr };\n        const key = categoryToKey(category);\n\n        const catEntries = categoryMap.get(key);\n        catEntries === undefined ? categoryMap.set(key, [e]) : catEntries.push(e);\n      }\n    }\n  }\n\n  // Iterate over each category and assign a Place to the entries therein.\n  let results = [];\n  for (let [key, catEntries] of categoryMap) {\n    const category = keyToCategory(key);\n    const orderedEntries = sortByPlaceInCategory(catEntries, category, type);\n    results.push({ category, orderedEntries });\n  }\n\n  sortCategoryResults(results);\n  return results;\n};\n\nexport const getProjectedResults = (\n  entries: Array<Entry>,\n  weightClassesKgMen: Array<number>,\n  weightClassesKgWomen: Array<number>,\n  weightClassesKgMx: Array<number>,\n  combineSleevesAndWraps: boolean\n): Array<CategoryResults> => {\n  return getAllResults(\n    entries,\n    weightClassesKgMen,\n    weightClassesKgWomen,\n    weightClassesKgMx,\n    combineSleevesAndWraps,\n    \"Projected\"\n  );\n};\n\nexport const getFinalResults = (\n  entries: Array<Entry>,\n  weightClassesKgMen: Array<number>,\n  weightClassesKgWomen: Array<number>,\n  weightClassesKgMx: Array<number>,\n  combineSleevesAndWraps: boolean\n): Array<CategoryResults> => {\n  return getAllResults(\n    entries,\n    weightClassesKgMen,\n    weightClassesKgWomen,\n    weightClassesKgMx,\n    combineSleevesAndWraps,\n    \"Final\"\n  );\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The main component of the Lifting page, contained by the LiftingView.\n\nimport React, { CSSProperties } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport AttemptInput from \"./AttemptInput\";\n\nimport { getWeightClassStr, getWeightClassLbsStr } from \"../../reducers/meetReducer\";\nimport { getPoints } from \"../../logic/coefficients/coefficients\";\nimport { getProjectedTotalKg, getFinalTotalKg, liftToAttemptFieldName, liftToStatusFieldName } from \"../../logic/entry\";\n\nimport { getProjectedResults, getFinalResults } from \"../../logic/divisionPlace\";\nimport { kg2lbs, displayWeight } from \"../../logic/units\";\n\nimport { CategoryResults } from \"../../logic/divisionPlace\";\nimport { Entry, Lift, Sex, Equipment } from \"../../types/dataTypes\";\nimport { GlobalState, MeetState, LiftingState } from \"../../types/stateTypes\";\n\nimport styles from \"./LiftingTable.module.scss\";\nimport { checkExhausted } from \"../../types/utils\";\n\ninterface OwnProps {\n  attemptOneIndexed: number;\n  orderedEntries: Array<Entry>;\n  currentEntryId: number | null;\n}\n\ninterface StateProps {\n  meet: MeetState;\n  lifting: LiftingState;\n}\n\ntype Props = OwnProps & StateProps;\n\n// List of possible columns that can be rendered.\n// The main render() function decides what columns to render,\n// and communicates its selection with each row's renderer.\ntype ColumnType =\n  | \"Lifter\"\n  | \"Bodyweight\"\n  | \"WeightClass\"\n  | \"Division\"\n  | \"Lot\"\n  | \"Equipment\"\n  | \"Age\"\n  | \"S1\" | \"S2\" | \"S3\" | \"S4\" // eslint-disable-line\n  | \"B1\" | \"B2\" | \"B3\" | \"B4\" // eslint-disable-line\n  | \"D1\" | \"D2\" | \"D3\" | \"D4\" // eslint-disable-line\n  | \"BestSquat\" | \"BestBench\" // eslint-disable-line\n  | \"Spacer1\"\n  | \"Spacer2\"\n  | \"ProjectedTotal\"\n  | \"ProjectedPoints\"\n  | \"FinalTotal\"\n  | \"FinalPoints\"\n  | \"Place\";\n\n// This is a global for remembering the last AttemptInput that was rendered.\n// After the \"No Lift\" or \"Good Lift\" buttons are clicked, the last-rendered\n// AttemptInput is given focus by an event handler.\n//\n// This works because the LiftingTable is always re-rendered when one of\n// those buttons is clicked, and because there's only one LiftingTable.\nexport var globalFocusAttemptInputId: string | null = null;\n\n// The logic for globalFocusAttemptInputId is looking for the AttemptInput\n// that's all the way on the right, and as far down the table as possible.\nvar globalHighestAttemptInputAttempt: number = 0;\n\nclass LiftingTable extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.renderRows = this.renderRows.bind(this);\n    this.renderBest3AttemptField = this.renderBest3AttemptField.bind(this);\n    this.renderAttemptField = this.renderAttemptField.bind(this);\n    this.renderCell = this.renderCell.bind(this);\n  }\n\n  renderBest3AttemptField = (entry: Entry, lift: Lift, columnType: ColumnType) => {\n    const fieldKg = liftToAttemptFieldName(lift);\n    const fieldStatus = liftToStatusFieldName(lift);\n\n    // Look for either the best lift or the lightest no-lift.\n    let best3 = 0.0;\n    let lightestFailed = 0.0;\n\n    for (let i = 0; i < 3; i++) {\n      const kg = entry[fieldKg][i];\n\n      if (entry[fieldStatus][i] === 1) {\n        best3 = Math.max(best3, kg);\n      } else if (entry[fieldStatus][i] === -1) {\n        lightestFailed = lightestFailed === 0 ? kg : Math.min(lightestFailed, kg);\n      }\n    }\n\n    // Render cells using attempt coloring.\n    if (best3 !== 0) {\n      const asNumber = this.props.meet.inKg ? best3 : kg2lbs(best3);\n      return (\n        <td key={columnType} className={styles.goodlift}>\n          {displayWeight(asNumber)}\n        </td>\n      );\n    }\n    if (lightestFailed !== 0) {\n      const asNumber = this.props.meet.inKg ? lightestFailed : kg2lbs(lightestFailed);\n      return (\n        <td key={columnType} className={styles.nolift}>\n          {displayWeight(asNumber)}\n        </td>\n      );\n    }\n\n    // Show an empty cell by default.\n    return <td key={columnType} />;\n  };\n\n  renderAttemptField = (entry: Entry, lift: Lift, attemptOneIndexed: number, columnType: ColumnType) => {\n    const fieldKg = liftToAttemptFieldName(lift);\n    const fieldStatus = liftToStatusFieldName(lift);\n\n    const kg = entry[fieldKg][attemptOneIndexed - 1];\n    const status = entry[fieldStatus][attemptOneIndexed - 1];\n    const wStr = displayWeight(this.props.meet.inKg ? kg : kg2lbs(kg));\n    const displayStr = kg === 0 ? \"\" : wStr;\n\n    // Get a unique ID for each AttemptInput.\n    // This is used in combination with the globalFocusAttemptInputId to give\n    // focus to the last-rendered AttemptInput after a button is clicked.\n    const id = \"AttemptInput-\" + entry.id + \"-\" + lift + attemptOneIndexed;\n\n    // If the lifter was manually selected, always show an AttemptInput.\n    // This allows manual correction of weights when a misload occurs,\n    // even though the lift has already been marked good lift / no lift.\n    if (this.props.lifting.overrideEntryId === entry.id && attemptOneIndexed === this.props.attemptOneIndexed) {\n      // Is this a better match for giving focus?\n      if (attemptOneIndexed >= globalHighestAttemptInputAttempt) {\n        globalHighestAttemptInputAttempt = attemptOneIndexed;\n        globalFocusAttemptInputId = id;\n      }\n\n      return (\n        <td key={columnType} className={styles.attemptInputCell}>\n          <AttemptInput id={id} entry={entry} lift={lift} attemptOneIndexed={attemptOneIndexed} />\n        </td>\n      );\n    }\n\n    // If the attempt was already made, render a colored text field.\n    // The weight cannot be changed after the fact.\n    if (status !== 0) {\n      const className = status === 1 ? styles.goodlift : styles.nolift;\n      const maybeNegative = status === 1 ? \"\" : \"-\";\n      return (\n        <td key={columnType} className={className}>\n          {maybeNegative}\n          {displayStr}\n        </td>\n      );\n    }\n\n    // If the attempt isn't for the current lift, just show the number.\n    if (lift !== this.props.lifting.lift) {\n      return <td key={columnType}>{displayStr}</td>;\n    }\n\n    // Was any previous attempt taken?\n    let anyPreviousAttemptTaken = false;\n    for (var i = 1; i < attemptOneIndexed; i++) {\n      if (entry[fieldStatus][i - 1] !== 0) {\n        anyPreviousAttemptTaken = true;\n        break;\n      }\n    }\n\n    // Show a text input box if either:\n    // 1. This column is for the current attempt, and the lifter has a previous attempt.\n    // 2. This column is for the next attempt, and the lifter took the current attempt.\n    // 3. For whatever reason, someone managed to specify a weight.\n    const currentAndHasPrevious = attemptOneIndexed === this.props.attemptOneIndexed && anyPreviousAttemptTaken;\n    const nextAndTookLast =\n      attemptOneIndexed === this.props.attemptOneIndexed + 1 &&\n      entry[fieldStatus][this.props.attemptOneIndexed - 1] !== 0;\n\n    if (kg !== 0 || currentAndHasPrevious || nextAndTookLast) {\n      // Is this a better match for giving focus?\n      if (attemptOneIndexed >= globalHighestAttemptInputAttempt) {\n        globalHighestAttemptInputAttempt = attemptOneIndexed;\n        globalFocusAttemptInputId = id;\n      }\n\n      return (\n        <td key={columnType} className={styles.attemptInputCell}>\n          <AttemptInput id={id} entry={entry} lift={lift} attemptOneIndexed={attemptOneIndexed} />\n        </td>\n      );\n    }\n\n    // Default handler.\n    return <td key={columnType}>{displayStr}</td>;\n  };\n\n  mapSexToClasses = (sex: Sex, meetState: MeetState): Array<number> => {\n    switch (sex) {\n      case \"M\":\n        return meetState.weightClassesKgMen;\n      case \"F\":\n        return meetState.weightClassesKgWomen;\n      case \"Mx\":\n        return meetState.weightClassesKgMx;\n      default:\n        checkExhausted(sex);\n        return meetState.weightClassesKgMen;\n    }\n  };\n\n  renderCell = (entry: Entry, columnType: ColumnType, categoryResults: Array<CategoryResults>): JSX.Element => {\n    switch (columnType) {\n      case \"Lifter\": {\n        let cell: string | JSX.Element = entry.name;\n\n        // Bold the name of the current lifter.\n        if (this.props.currentEntryId === entry.id) {\n          cell = <b>{entry.name}</b>;\n        }\n\n        return (\n          <td key={columnType} className={styles.textCell}>\n            {cell}\n          </td>\n        );\n      }\n      case \"Bodyweight\": {\n        const bw = entry.bodyweightKg;\n        const bwStr = displayWeight(this.props.meet.inKg ? bw : kg2lbs(bw));\n        return <td key={columnType}>{bw === 0 ? null : bwStr}</td>;\n      }\n      case \"WeightClass\": {\n        const bw = entry.bodyweightKg;\n        const classesForSex = this.mapSexToClasses(entry.sex, this.props.meet);\n        const weightClass = this.props.meet.inKg\n          ? getWeightClassStr(classesForSex, bw)\n          : getWeightClassLbsStr(classesForSex, bw);\n        return <td key={columnType}>{bw === 0 ? null : weightClass}</td>;\n      }\n      case \"Division\": {\n        // Just show the first division in the list, if any.\n        // Changing this requires coordination with the \"Place\" column code.\n        const firstDiv = entry.divisions.length > 0 ? entry.divisions[0] : null;\n        return (\n          <td key={columnType} className={styles.textCell}>\n            {firstDiv}\n          </td>\n        );\n      }\n      case \"Lot\": {\n        return (\n          <td key={columnType} className={styles.textCell}>\n            {entry.lot === 0 ? \"\" : entry.lot}\n          </td>\n        );\n      }\n      case \"Equipment\": {\n        // Use shorter names to actually fit in the table.\n        let equipment: string | Equipment = entry.equipment;\n        if (equipment === \"Single-ply\") equipment = \"Single\";\n        if (equipment === \"Multi-ply\") equipment = \"Multi\";\n        return <td key={columnType}>{equipment}</td>;\n      }\n      case \"Age\":\n        return <td key={columnType}>{entry.age}</td>;\n      case \"S1\":\n        return this.renderAttemptField(entry, \"S\", 1, columnType);\n      case \"S2\":\n        return this.renderAttemptField(entry, \"S\", 2, columnType);\n      case \"S3\":\n        return this.renderAttemptField(entry, \"S\", 3, columnType);\n      case \"S4\":\n        return this.renderAttemptField(entry, \"S\", 4, columnType);\n      case \"B1\":\n        return this.renderAttemptField(entry, \"B\", 1, columnType);\n      case \"B2\":\n        return this.renderAttemptField(entry, \"B\", 2, columnType);\n      case \"B3\":\n        return this.renderAttemptField(entry, \"B\", 3, columnType);\n      case \"B4\":\n        return this.renderAttemptField(entry, \"B\", 4, columnType);\n      case \"D1\":\n        return this.renderAttemptField(entry, \"D\", 1, columnType);\n      case \"D2\":\n        return this.renderAttemptField(entry, \"D\", 2, columnType);\n      case \"D3\":\n        return this.renderAttemptField(entry, \"D\", 3, columnType);\n      case \"D4\":\n        return this.renderAttemptField(entry, \"D\", 4, columnType);\n      case \"BestSquat\":\n        return this.renderBest3AttemptField(entry, \"S\", columnType);\n      case \"BestBench\":\n        return this.renderBest3AttemptField(entry, \"B\", columnType);\n      case \"Spacer1\": // fallthrough\n      case \"Spacer2\":\n        return <td key={columnType} className={styles.spacerCell} />;\n      case \"ProjectedTotal\": {\n        const totalKg = getProjectedTotalKg(entry);\n        const asNumber = this.props.meet.inKg ? totalKg : kg2lbs(totalKg);\n        return <td key={columnType}>{totalKg === 0 ? null : displayWeight(asNumber)}</td>;\n      }\n      case \"ProjectedPoints\": {\n        const totalKg: number = getProjectedTotalKg(entry);\n        const event = entry.events.length > 0 ? entry.events[0] : \"SBD\";\n        const points: number = getPoints(this.props.meet.formula, entry, event, totalKg, this.props.meet.inKg);\n\n        // Normally this column is hidden for \"Total\", but it's handled just in case.\n        if (this.props.meet.formula === \"Total\") {\n          return <td key={columnType}>{points !== 0 ? displayWeight(points) : null}</td>;\n        }\n        return <td key={columnType}>{points !== 0 ? points.toFixed(2) : null}</td>;\n      }\n      case \"FinalTotal\": {\n        const totalKg = getFinalTotalKg(entry);\n        const asNumber = this.props.meet.inKg ? totalKg : kg2lbs(totalKg);\n        return <td key={columnType}>{totalKg === 0 ? null : displayWeight(asNumber)}</td>;\n      }\n      case \"FinalPoints\": {\n        const totalKg: number = getFinalTotalKg(entry);\n        const event = entry.events.length > 0 ? entry.events[0] : \"SBD\";\n        const points: number = getPoints(this.props.meet.formula, entry, event, totalKg, this.props.meet.inKg);\n\n        // Normally this column is hidden for \"Total\", but it's handled just in case.\n        if (this.props.meet.formula === \"Total\") {\n          return <td key={columnType}>{points !== 0 ? displayWeight(points) : null}</td>;\n        }\n        return <td key={columnType}>{points !== 0 ? points.toFixed(2) : null}</td>;\n      }\n      case \"Place\": {\n        // If the lifter has no total, then don't report a place.\n        if (getFinalTotalKg(entry) === 0) return <td key={columnType} />;\n\n        // Just show the Place from the first division in the list.\n        // This is the same division as shown in the \"Division\" column.\n        if (entry.divisions.length === 0) return <td key={columnType} />;\n        const firstDiv = entry.divisions[0];\n\n        // Look at all the categories, and find the first one including this division\n        // and entry. Because the categories are in sorted order, SBD takes priority\n        // over B by default.\n        for (let i = 0; i < categoryResults.length; i++) {\n          const result = categoryResults[i];\n          if (result.category.division !== firstDiv) {\n            continue;\n          }\n\n          const catEntries = result.orderedEntries;\n          for (let j = 0; j < catEntries.length; j++) {\n            const catEntry = catEntries[j];\n\n            if (catEntry.id === entry.id) {\n              return <td key={columnType}>{j + 1}</td>;\n            }\n          }\n        }\n\n        return <td key={columnType} />; // Shouldn't happen.\n      }\n      default:\n        checkExhausted(columnType);\n        return <td key={columnType} />;\n    }\n  };\n\n  renderRows = (columns: Array<ColumnType>, categoryResults: Array<CategoryResults>) => {\n    const orderedEntries = this.props.orderedEntries;\n    const currentEntryId = this.props.currentEntryId;\n\n    let rows = [];\n    for (let i = 0; i < orderedEntries.length; i++) {\n      const entry = orderedEntries[i];\n\n      // Iterate over each columnType, handling each.\n      let cells = [];\n      for (let col = 0; col < columns.length; col++) {\n        const columnType = columns[col];\n        cells.push(this.renderCell(entry, columnType, categoryResults));\n      }\n\n      const isCurrent = entry.id === currentEntryId;\n      const rowClassName = isCurrent ? styles.current : \"\";\n      rows.push(\n        <tr key={entry.id} className={rowClassName}>\n          {cells}\n        </tr>\n      );\n    }\n    return rows;\n  };\n\n  getColumnHeaderString = (columnType: ColumnType): string => {\n    switch (columnType) {\n      case \"Lifter\":\n        return \"Lifter\";\n      case \"Bodyweight\":\n        return \"Bwt\";\n      case \"WeightClass\":\n        return \"Class\";\n      case \"Division\":\n        return \"Division\";\n      case \"Lot\":\n        return \"Lot\";\n      case \"Equipment\":\n        return \"Equip\";\n      case \"Age\":\n        return \"Age\";\n      case \"S1\":\n        return \"S1\";\n      case \"S2\":\n        return \"S2\";\n      case \"S3\":\n        return \"S3\";\n      case \"S4\":\n        return \"S4\";\n      case \"B1\":\n        return \"B1\";\n      case \"B2\":\n        return \"B2\";\n      case \"B3\":\n        return \"B3\";\n      case \"B4\":\n        return \"B4\";\n      case \"D1\":\n        return \"D1\";\n      case \"D2\":\n        return \"D2\";\n      case \"D3\":\n        return \"D3\";\n      case \"D4\":\n        return \"D4\";\n      case \"BestSquat\":\n        return \"Squat\";\n      case \"BestBench\":\n        return \"Bench\";\n      case \"Spacer1\": // fallthrough\n      case \"Spacer2\":\n        return \"\";\n      case \"ProjectedTotal\":\n        return \"Total\";\n      case \"ProjectedPoints\":\n        return \"Points\";\n      case \"FinalTotal\":\n        return \"Total\";\n      case \"FinalPoints\":\n        return \"Points\";\n      case \"Place\":\n        return \"Place\";\n      default:\n        checkExhausted(columnType);\n        return \"\";\n    }\n  };\n\n  render() {\n    // Reset this: hunting for a new AttemptIndex.\n    globalHighestAttemptInputAttempt = 0;\n\n    // Select the columns for display.\n    let columns: Array<ColumnType> = [\"Lifter\"];\n    // If the score table set the division column with to zero, hide it.\n    if (this.props.lifting.columnDivisionWidthPx !== 0) {\n      columns.push(\"Division\");\n    }\n    columns.push(\"Bodyweight\", \"WeightClass\");\n\n    // The \"Lot\" column is only shown if lot numbers are used.\n    for (let i = 0; i < this.props.orderedEntries.length; ++i) {\n      if (this.props.orderedEntries[i].lot !== 0) {\n        columns.push(\"Lot\");\n        break;\n      }\n    }\n\n    // Select lift columns based off the current lift.\n    if (this.props.lifting.lift === \"S\") {\n      columns.push(\"Spacer1\");\n      columns.push(\"S1\", \"S2\", \"S3\");\n      if (this.props.attemptOneIndexed === 4) {\n        columns.push(\"S4\");\n      }\n      columns.push(\"Spacer2\");\n      columns.push(\"B1\", \"D1\");\n    } else if (this.props.lifting.lift === \"B\") {\n      columns.push(\"BestSquat\", \"Spacer1\", \"B1\", \"B2\", \"B3\");\n      if (this.props.attemptOneIndexed === 4) {\n        columns.push(\"B4\");\n      }\n      columns.push(\"Spacer2\", \"D1\");\n    } else if (this.props.lifting.lift === \"D\") {\n      columns.push(\"BestSquat\", \"BestBench\", \"Spacer1\", \"D1\", \"D2\", \"D3\");\n      if (this.props.attemptOneIndexed === 4) {\n        columns.push(\"D4\");\n      }\n      columns.push(\"Spacer2\");\n    }\n\n    // Use projected totals for everything before 2nd attempt deadlifts.\n    const useProjected = this.props.lifting.lift !== \"D\" || this.props.attemptOneIndexed < 2;\n    columns.push(useProjected ? \"ProjectedTotal\" : \"FinalTotal\");\n    if (this.props.meet.formula !== \"Total\") {\n      columns.push(useProjected ? \"ProjectedPoints\" : \"FinalPoints\");\n    }\n    columns.push(\"Place\");\n\n    // Build headers.\n    let headers = [];\n    let highlightColumn = this.props.lifting.lift + String(this.props.attemptOneIndexed);\n    for (let i = 0; i < columns.length; i++) {\n      const column = columns[i];\n      let className = styles.smallCell;\n      let style: CSSProperties | undefined;\n\n      if (column === \"Lifter\") {\n        className = styles.nameCell;\n      } else if (column === \"Division\") {\n        className = styles.divisionCell;\n        if (this.props.lifting.columnDivisionWidthPx) {\n          style = { width: this.props.lifting.columnDivisionWidthPx + \"px\" };\n        }\n      } else if (column === \"Spacer1\" || column === \"Spacer2\") {\n        className = styles.spacerCell;\n      } else if (column === highlightColumn) {\n        className = styles.activeColumn;\n      }\n\n      headers.push(\n        <th key={column} className={className} style={style}>\n          {this.getColumnHeaderString(column)}\n        </th>\n      );\n    }\n\n    // Calculate the Division placings for each of the lifters.\n    const categoryResults = useProjected\n      ? getProjectedResults(\n          this.props.orderedEntries,\n          this.props.meet.weightClassesKgMen,\n          this.props.meet.weightClassesKgWomen,\n          this.props.meet.weightClassesKgMx,\n          this.props.meet.combineSleevesAndWraps\n        )\n      : getFinalResults(\n          this.props.orderedEntries,\n          this.props.meet.weightClassesKgMen,\n          this.props.meet.weightClassesKgWomen,\n          this.props.meet.weightClassesKgMx,\n          this.props.meet.combineSleevesAndWraps\n        );\n\n    return (\n      <table className={styles.liftingtable}>\n        <thead>\n          <tr>{headers}</tr>\n        </thead>\n        <tbody>{this.renderRows(columns, categoryResults)}</tbody>\n      </table>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    meet: state.meet,\n    lifting: state.lifting\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LiftingTable);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The footer of the Lifting page, contained by the LiftingView.\n// This is the parent element of the controls that affect present lifting state.\n\nimport React, { FormEvent } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Form from \"react-bootstrap/Form\";\n\nimport { globalFocusAttemptInputId } from \"./LiftingTable\";\n\nimport { markLift, overrideAttempt, overrideEntryId, setLiftingGroup } from \"../../actions/liftingActions\";\n\nimport { Entry, Flight, Lift } from \"../../types/dataTypes\";\nimport { GlobalState, LiftingState } from \"../../types/stateTypes\";\n\nimport styles from \"./LiftingFooter.module.scss\";\nimport { Dispatch } from \"redux\";\nimport { FormControlTypeHack, assertFlight, assertString, assertLift } from \"../../types/utils\";\n\ninterface OwnProps {\n  attemptOneIndexed: number;\n  orderedEntries: Array<Entry>;\n  currentEntryId: number | null;\n  flightsOnPlatform: Array<Flight>;\n  toggleReplaceTableWithWeighins: () => void;\n}\n\ninterface StateProps {\n  lifting: LiftingState;\n  lengthDays: number;\n  platformsOnDays: Array<number>;\n  allow4thAttempts: boolean;\n}\n\ninterface DispatchProps {\n  setLiftingGroup: (day: number, platform: number, flight: Flight, lift: Lift) => void;\n  overrideAttempt: (attempt: number) => void;\n  overrideEntryId: (entryId: number) => void;\n  markLift: (entryId: number, lift: Lift, attempt: number, success: boolean) => void;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\nconst liftOptions = [\n  <option key={\"S\"} value={\"S\"}>\n    Squat\n  </option>,\n  <option key={\"B\"} value={\"B\"}>\n    Bench\n  </option>,\n  <option key={\"D\"} value={\"D\"}>\n    Deadlift\n  </option>\n];\n\nclass LiftingFooter extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.handlePlatformChange = this.handlePlatformChange.bind(this);\n    this.handleFlightChange = this.handleFlightChange.bind(this);\n    this.handleLiftChange = this.handleLiftChange.bind(this);\n\n    this.handleGoodLift = this.handleGoodLift.bind(this);\n    this.handleNoLift = this.handleNoLift.bind(this);\n\n    this.handleAttemptChange = this.handleAttemptChange.bind(this);\n    this.handleLifterChange = this.handleLifterChange.bind(this);\n\n    this.makeLifterOptions = this.makeLifterOptions.bind(this);\n  }\n\n  handleDayChange = (event: FormEvent<FormControlTypeHack>) => {\n    const day = Number(event.currentTarget.value);\n    const flight = this.props.lifting.flight;\n    const lift = this.props.lifting.lift;\n\n    // If the new day has fewer platforms, reset the platform selector also.\n    let platform = this.props.lifting.platform;\n    if (platform > this.props.platformsOnDays[day - 1]) {\n      platform = 1;\n    }\n\n    this.props.setLiftingGroup(day, platform, flight, lift);\n  };\n\n  handlePlatformChange = (event: FormEvent<FormControlTypeHack>) => {\n    const day = this.props.lifting.day;\n    const platform = Number(event.currentTarget.value);\n    const flight = this.props.lifting.flight;\n    const lift = this.props.lifting.lift;\n    this.props.setLiftingGroup(day, platform, flight, lift);\n  };\n\n  handleFlightChange = (event: FormEvent<FormControlTypeHack>) => {\n    const day = this.props.lifting.day;\n    const platform = this.props.lifting.platform;\n    const flight = event.currentTarget.value;\n    const lift = this.props.lifting.lift;\n    if (assertString(flight) && assertFlight(flight)) {\n      this.props.setLiftingGroup(day, platform, flight, lift);\n    }\n  };\n\n  handleLiftChange = (event: FormEvent<FormControlTypeHack>) => {\n    const day = this.props.lifting.day;\n    const platform = this.props.lifting.platform;\n    const flight = \"A\"; // Always reset to Flight A.\n    const lift = event.currentTarget.value;\n    if (assertString(lift) && assertLift(lift)) {\n      this.props.setLiftingGroup(day, platform, flight, lift);\n    }\n  };\n\n  handleAttemptChange = (event: FormEvent<FormControlTypeHack>) => {\n    const attempt = Number(event.currentTarget.value);\n    this.props.overrideAttempt(attempt);\n  };\n\n  handleLifterChange = (event: FormEvent<FormControlTypeHack>) => {\n    const entryId = Number(event.currentTarget.value);\n    this.props.overrideEntryId(entryId);\n  };\n\n  // After a \"No Lift\" or \"Good Lift\" button is clicked, try to change focus\n  // to the AttemptInput that the score table is likely to want to type into.\n  setFocusAttemptInputTimeout = () => {\n    if (globalFocusAttemptInputId === null) {\n      return;\n    }\n\n    setTimeout(function() {\n      if (globalFocusAttemptInputId === null) {\n        return;\n      }\n\n      const elem = document.getElementById(globalFocusAttemptInputId);\n      if (elem) {\n        elem.focus();\n      }\n    }, 100);\n  };\n\n  handleGoodLift = () => {\n    // If there's no active entry, there's nothing to set.\n    if (this.props.currentEntryId === null) {\n      return;\n    }\n\n    const entryId = Number(this.props.currentEntryId);\n    const lift = this.props.lifting.lift;\n    const attempt = this.props.attemptOneIndexed;\n    this.props.markLift(entryId, lift, attempt, true);\n    this.setFocusAttemptInputTimeout();\n  };\n\n  handleNoLift = () => {\n    // If there's no active entry, there's nothing to set.\n    if (this.props.currentEntryId === null) {\n      return;\n    }\n\n    const entryId = Number(this.props.currentEntryId);\n    const lift = this.props.lifting.lift;\n    const attempt = this.props.attemptOneIndexed;\n    this.props.markLift(entryId, lift, attempt, false);\n    this.setFocusAttemptInputTimeout();\n  };\n\n  // Check whether \"document.fullscreenElement\" exists, including prefixes.\n  hasFullscreenElement = (): boolean => {\n    let doc: any = document;\n    if (doc.fullscreenElement) return true;\n    if (doc.webkitFullscreenElement) return true;\n    if (doc.mozFullscreenElement) return true;\n    if (doc.msFullscreenElement) return true;\n    return false;\n  };\n\n  // Calls exitFullscreen(), but with prefixes.\n  exitFullscreen = () => {\n    let doc: any = document;\n    if (typeof doc.exitFullscreen === \"function\") doc.exitFullscreen();\n    else if (typeof doc.webkitExitFullscreen === \"function\") doc.webkitExitFullscreen();\n    else if (typeof doc.mozExitFullscreen === \"function\") doc.mozExitFullscreen();\n    else if (typeof doc.msExitFullscreen === \"function\") doc.msExitFullscreen();\n  };\n\n  // Calls requestFullscreen(), but with prefixes.\n  requestFullscreen = (e: any) => {\n    if (typeof e.requestFullscreen === \"function\") e.requestFullscreen();\n    else if (typeof e.webkitRequestFullscreen === \"function\") e.webkitRequestFullscreen();\n    else if (typeof e.mozRequestFullscreen === \"function\") e.mozRequestFullscreen();\n    else if (typeof e.msRequestFullscreen === \"function\") e.msRequestFullscreen();\n  };\n\n  // Called when the \"Toggle Fullscreen\" button is clicked.\n  handleFullscreen = () => {\n    // Document must be typecast to \"any\" because the fullscreen properties\n    // used here aren't defined in the Flow Document type definition.\n    if (this.hasFullscreenElement() === true) {\n      this.exitFullscreen();\n    } else {\n      const liftingView = document.getElementById(\"liftingView\");\n      if (liftingView !== null) {\n        this.requestFullscreen(liftingView);\n      }\n    }\n  };\n\n  makeLifterOptions = () => {\n    const orderedEntries = this.props.orderedEntries;\n\n    if (orderedEntries.length === 0) {\n      return (\n        <option value={0} key={0}>\n          No Lifters\n        </option>\n      );\n    }\n\n    let lifterOptions = [];\n    for (let i = 0; i < orderedEntries.length; i++) {\n      const entry = orderedEntries[i];\n      lifterOptions.push(\n        <option value={entry.id} key={entry.id}>\n          {entry.name}\n        </option>\n      );\n    }\n    return lifterOptions;\n  };\n\n  render() {\n    const numPlatforms = this.props.platformsOnDays[this.props.lifting.day - 1];\n\n    let dayOptions = [];\n    for (let i = 1; i <= this.props.lengthDays; i++) {\n      const label = \"Day \" + String(i);\n      dayOptions.push(\n        <option value={i} key={i}>\n          {label}\n        </option>\n      );\n    }\n\n    let platformOptions = [];\n    for (let i = 1; i <= numPlatforms; i++) {\n      platformOptions.push(\n        <option value={i} key={i}>\n          Platform {i}\n        </option>\n      );\n    }\n\n    let flightOptions = [];\n    for (let i = 0; i < this.props.flightsOnPlatform.length; i++) {\n      const flight = this.props.flightsOnPlatform[i];\n      const key = this.props.lifting.day + \"-\" + this.props.lifting.platform + \"-\" + i;\n      flightOptions.push(\n        <option value={flight} key={key}>\n          Flight {flight}\n        </option>\n      );\n    }\n    if (flightOptions.length === 0) {\n      flightOptions.push(<option key=\"none\">No Flights</option>);\n    }\n\n    let attemptOptions = [];\n    for (let i = 1; i <= 3; i++) {\n      attemptOptions.push(\n        <option key={i} value={i}>\n          Attempt {i}\n        </option>\n      );\n    }\n    if (this.props.allow4thAttempts === true) {\n      attemptOptions.push(\n        <option key={4} value={4}>\n          Attempt 4\n        </option>\n      );\n    }\n\n    const currentEntryId = this.props.currentEntryId === null ? undefined : this.props.currentEntryId.toString();\n\n    return (\n      <div className={styles.footerplusimage}>\n        <div className={styles.bluecollarbarbelldiv}>\n          <img alt=\"Blue Collar Barbell\" src=\"bluecollar-horizontal.jpg\" />\n        </div>\n        <div className={styles.footer}>\n          <div className={styles.leftControls}>\n            <Form.Control\n              as=\"select\"\n              defaultValue={this.props.lifting.day.toString()}\n              onChange={this.handleDayChange}\n              className={`custom-select ${styles.selector}`}\n            >\n              {dayOptions}\n            </Form.Control>\n            <Form.Control\n              as=\"select\"\n              defaultValue={this.props.lifting.platform.toString()}\n              onChange={this.handlePlatformChange}\n              className={`custom-select ${styles.selector}`}\n            >\n              {platformOptions}\n            </Form.Control>\n            <Form.Control\n              as=\"select\"\n              defaultValue={this.props.lifting.lift}\n              onChange={this.handleLiftChange}\n              className={`custom-select ${styles.selector}`}\n            >\n              {liftOptions}\n            </Form.Control>\n            <Form.Control\n              key={\"flight-\" + this.props.lifting.flight}\n              as=\"select\"\n              defaultValue={this.props.lifting.flight}\n              onChange={this.handleFlightChange}\n              className={`custom-select ${styles.selector}`}\n            >\n              {flightOptions}\n            </Form.Control>\n            <Form.Control\n              value={this.props.attemptOneIndexed.toString()}\n              as=\"select\"\n              onChange={this.handleAttemptChange}\n              className={`custom-select ${styles.selector}`}\n            >\n              {attemptOptions}\n            </Form.Control>\n            <Form.Control\n              value={currentEntryId}\n              as=\"select\"\n              onChange={this.handleLifterChange}\n              className={`custom-select ${styles.selector}`}\n            >\n              {this.makeLifterOptions()}\n            </Form.Control>\n          </div>\n\n          <div className={styles.rightControls}>\n            <ButtonGroup>\n              <Button variant=\"outline-primary\" onClick={this.props.toggleReplaceTableWithWeighins}>\n                Toggle Weigh-ins\n              </Button>\n              <Button variant=\"outline-secondary\" onClick={this.handleFullscreen} className={styles.fullscreen}>\n                Toggle Fullscreen\n              </Button>\n            </ButtonGroup>\n            <button type=\"button\" onMouseDown={this.handleNoLift} className={styles.noLift}>\n              No Lift\n            </button>\n            <button type=\"button\" onMouseDown={this.handleGoodLift} className={styles.goodLift}>\n              Good Lift\n            </button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState) => {\n  return {\n    lengthDays: state.meet.lengthDays,\n    platformsOnDays: state.meet.platformsOnDays,\n    allow4thAttempts: state.meet.allow4thAttempts,\n    lifting: state.lifting\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setLiftingGroup: (day: number, platform: number, flight: Flight, lift: Lift) =>\n      dispatch(setLiftingGroup(day, platform, flight, lift)),\n    overrideAttempt: (attempt: number) => dispatch(overrideAttempt(attempt)),\n    overrideEntryId: (entryId: number) => dispatch(overrideEntryId(entryId)),\n    markLift: (entryId: number, lift: Lift, attempt: number, success: boolean) =>\n      dispatch(markLift(entryId, lift, attempt, success))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(LiftingFooter);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// This defines a widget for manually adjusting the width of a column\n// in the LiftingTable. The width information is stored in the LiftingState.\n//\n// The value is stored in the LiftingState in pixels, but is presented\n// here as (pixels / 9) to make it look nicer. 9 is used because most columns\n// are set to 72px, which is divisible by 9.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Form from \"react-bootstrap/Form\";\n\nimport { setTableInfo } from \"../../actions/liftingActions\";\n\nimport { Validation } from \"../../types/dataTypes\";\nimport { GlobalState, LiftingState } from \"../../types/stateTypes\";\nimport { FormControlTypeHack, isString } from \"../../types/utils\";\nimport { Dispatch } from \"redux\";\nimport { isNumber } from \"util\";\n\ntype WidthFields = \"columnDivisionWidthPx\";\n\ninterface OwnProps {\n  label: string; // The label to display.\n  fieldName: WidthFields; // Field on the LiftingState to change.\n}\n\ninterface StateProps {\n  lifting: LiftingState;\n}\n\ninterface DispatchProps {\n  setTableInfo: (changes: Partial<LiftingState>) => void;\n}\n\ntype Props = OwnProps & StateProps & DispatchProps;\n\ninterface InternalState {\n  value: number | string;\n}\n\n// To show smaller numbers, the actual pixel count is divided by this.\nconst MULTIPLE: number = 9;\n\nclass ColumnWidth extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.validate = this.validate.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n\n    this.state = {\n      value: Math.ceil(this.props.lifting[this.props.fieldName] / MULTIPLE)\n    };\n  }\n\n  validate = (): Validation => {\n    const { value } = this.state;\n    const asNumber = Number(value);\n\n    if (isNaN(asNumber) || asNumber < 0 || asNumber > 1000) {\n      return \"error\";\n    }\n    return \"success\";\n  };\n\n  handleChange = (event: React.FormEvent<FormControlTypeHack>) => {\n    const value = event.currentTarget.value;\n    if (!isNumber(value) && !isString(value)) {\n      throw new Error(`Expected either a number or a string, but got \"${value}\"`);\n    }\n\n    this.setState({ value: value }, () => {\n      // As callback, save successful value into Redux store.\n      if (this.validate() !== \"error\") {\n        // TODO: figure out how to type this nicely. For now, use any\n        let changes: any = {};\n        changes[this.props.fieldName] = Math.floor(Number(value) * MULTIPLE);\n        this.props.setTableInfo(changes);\n      }\n    });\n  };\n\n  render() {\n    const validation: Validation = this.validate();\n\n    return (\n      <Form.Group>\n        <Form.Label>{this.props.label}</Form.Label>\n        <Form.Control\n          type=\"number\"\n          pattern=\"[0-9]+\"\n          min=\"0\"\n          step=\"1\"\n          value={this.state.value.toString()}\n          onChange={this.handleChange}\n          isValid={validation === \"success\"}\n          isInvalid={validation === \"error\"}\n          className={validation === \"warning\" ? \"is-warning\" : undefined}\n        />\n      </Form.Group>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  lifting: state.lifting\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    setTableInfo: (changes: Partial<LiftingState>) => dispatch(setTableInfo(changes))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ColumnWidth);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the Lifting page, contained by the LiftingContainer.\n//\n// The LiftingTable, LiftingFooter, etc. all share calculated state.\n// This class performs the state calculations and communicates that to its\n// sub-components via props.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Card from \"react-bootstrap/Card\";\n\nimport TopBar from \"./TopBar\";\nimport LeftCard from \"./LeftCard\";\nimport LiftingTable from \"./LiftingTable\";\nimport LiftingFooter from \"./LiftingFooter\";\nimport WeighinsView from \"../weighins/WeighinsView\";\n\nimport ColumnWidth from \"./ColumnWidth\";\n\nimport styles from \"./LiftingView.module.scss\";\n\nimport { getLiftingOrder } from \"../../logic/liftingOrder\";\n\nimport { Entry, Flight } from \"../../types/dataTypes\";\nimport { GlobalState, MeetState, LiftingState } from \"../../types/stateTypes\";\n\ninterface StateProps {\n  meet: MeetState;\n  lifting: LiftingState;\n  flightsOnPlatform: Array<Flight>;\n  entriesInFlight: Array<Entry>;\n}\n\ntype Props = StateProps;\n\ninterface InternalState {\n  // If true, the LiftingTable is replaced with the Weighins page.\n  // This lets the score table change arbitrary rack height and attempt information\n  // without removing the current lifter or bar load displays.\n  replaceTableWithWeighins: boolean;\n}\n\nclass LiftingView extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n    this.toggleReplaceTableWithWeighins = this.toggleReplaceTableWithWeighins.bind(this);\n    this.state = {\n      replaceTableWithWeighins: false\n    };\n  }\n\n  toggleReplaceTableWithWeighins = (): void => {\n    this.setState({\n      replaceTableWithWeighins: !this.state.replaceTableWithWeighins\n    });\n  };\n\n  render() {\n    const now = getLiftingOrder(this.props.entriesInFlight, this.props.lifting);\n\n    let rightElement = null;\n    if (this.state.replaceTableWithWeighins === false) {\n      rightElement = (\n        <LiftingTable\n          attemptOneIndexed={now.attemptOneIndexed}\n          orderedEntries={now.orderedEntries}\n          currentEntryId={now.currentEntryId}\n        />\n      );\n    } else {\n      rightElement = (\n        <WeighinsView day={this.props.lifting.day} platform={this.props.lifting.platform} inLiftingPage={true} />\n      );\n    }\n\n    return (\n      <div>\n        <Card border=\"primary\" style={{ marginLeft: \"12px\", marginRight: \"12px\" }}>\n          <Card.Body>\n            <div style={{ width: \"160px\" }}>\n              <ColumnWidth label=\"Division Column Width\" fieldName=\"columnDivisionWidthPx\" />\n            </div>\n            <h3>To fit to the screen, zoom the browser in or out and then press Toggle Fullscreen.</h3>\n          </Card.Body>\n        </Card>\n        <div id=\"liftingView\" className={styles.liftingView}>\n          <TopBar\n            attemptOneIndexed={now.attemptOneIndexed}\n            orderedEntries={now.orderedEntries}\n            currentEntryId={now.currentEntryId}\n          />\n\n          <div className={styles.middleParentContainer}>\n            <div className={styles.leftCardContainer}>\n              <LeftCard\n                attemptOneIndexed={now.attemptOneIndexed}\n                orderedEntries={now.orderedEntries}\n                currentEntryId={now.currentEntryId}\n                nextEntryId={now.nextEntryId}\n                nextAttemptOneIndexed={now.nextAttemptOneIndexed}\n              />\n            </div>\n\n            <div className={styles.rightCardContainer}>{rightElement}</div>\n          </div>\n\n          <LiftingFooter\n            attemptOneIndexed={now.attemptOneIndexed}\n            orderedEntries={now.orderedEntries}\n            currentEntryId={now.currentEntryId}\n            flightsOnPlatform={this.props.flightsOnPlatform}\n            toggleReplaceTableWithWeighins={this.toggleReplaceTableWithWeighins}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  const day = state.lifting.day;\n  const platform = state.lifting.platform;\n  const flight = state.lifting.flight;\n\n  const entriesOnPlatform = state.registration.entries.filter(\n    entry => entry.day === day && entry.platform === platform\n  );\n\n  // Determine available flights from the entries themselves.\n  let flights: Array<Flight> = [];\n  for (let i = 0; i < entriesOnPlatform.length; i++) {\n    const entry = entriesOnPlatform[i];\n    if (flights.indexOf(entry.flight) === -1) {\n      flights.push(entry.flight);\n    }\n  }\n  flights.sort();\n\n  // Only receive entries that are in the currently-lifting group.\n  const entriesInFlight = entriesOnPlatform.filter(entry => entry.flight === flight);\n\n  return {\n    meet: state.meet,\n    lifting: state.lifting,\n    flightsOnPlatform: flights,\n    entriesInFlight: entriesInFlight\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(LiftingView);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the Lifting page.\n\nimport React from \"react\";\nimport LiftingView from \"../components/lifting/LiftingView\";\n\nclass LiftingContainer extends React.Component<{}> {\n  render() {\n    return <LiftingView />;\n  }\n}\n\nexport default LiftingContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Shows the first attempt ordering of lifters for a single flight.\n\nimport React from \"react\";\n\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\n\nimport { liftToAttemptFieldName } from \"../../logic/entry\";\nimport { orderEntriesByAttempt } from \"../../logic/liftingOrder\";\nimport { kg2lbs, displayWeight } from \"../../logic/units\";\n\nimport { Entry, Flight, Lift } from \"../../types/dataTypes\";\n\nimport styles from \"./OneFlightOrder.module.scss\";\n\ninterface OwnProps {\n  flight: Flight;\n  entriesInFlight: Array<Entry>;\n}\n\ntype Props = OwnProps;\n\nclass OneFlightOrder extends React.Component<Props> {\n  getOrderBy = (lift: Lift): Array<Entry> => {\n    const fieldKg = liftToAttemptFieldName(lift);\n\n    // Only consider entries that registered a first attempt.\n    const entriesForLift = this.props.entriesInFlight.filter(e => {\n      return e[fieldKg][0] !== 0;\n    });\n\n    // Sort them in-place on the basis of that first attempt.\n    return orderEntriesByAttempt(entriesForLift, fieldKg, 1);\n  };\n\n  render() {\n    const bySquat = this.getOrderBy(\"S\");\n    const byBench = this.getOrderBy(\"B\");\n    const byDeadlift = this.getOrderBy(\"D\");\n\n    const hasSquat = bySquat.length !== 0;\n    const hasBench = byBench.length !== 0;\n    const hasDeadlift = byDeadlift.length !== 0;\n\n    const maxRows = Math.max(bySquat.length, byBench.length, byDeadlift.length);\n\n    // Construct a table row-by-row.\n    let rows = [];\n    for (let i = 0; i < maxRows; i++) {\n      let builder = [];\n      let key = 0;\n\n      if (hasSquat) {\n        if (i < bySquat.length) {\n          const entry = bySquat[i];\n          const kg: string = displayWeight(entry.squatKg[0]);\n          const lbs: string = displayWeight(kg2lbs(entry.squatKg[0]));\n          builder.push(\n            <td key={\"S-\" + entry.id}>\n              {i + 1}. {entry.name}\n            </td>\n          );\n          builder.push(<td key={\"S-kg-\" + entry.id}>{kg}</td>);\n          builder.push(<td key={\"S-lbs-\" + entry.id}>{lbs}</td>);\n        } else {\n          builder.push(<td key={key++} />);\n          builder.push(<td key={key++} />);\n          builder.push(<td key={key++} />);\n        }\n      }\n\n      if (hasBench) {\n        if (i < byBench.length) {\n          const entry = byBench[i];\n          const kg: string = displayWeight(entry.benchKg[0]);\n          const lbs: string = displayWeight(kg2lbs(entry.benchKg[0]));\n          builder.push(\n            <td key={\"B-\" + entry.id} className={styles.leftDivider}>\n              {i + 1}. {entry.name}\n            </td>\n          );\n          builder.push(<td key={\"B-kg-\" + entry.id}>{kg}</td>);\n          builder.push(<td key={\"B-lbs-\" + entry.id}>{lbs}</td>);\n        } else {\n          builder.push(<td key={key++} className={styles.leftDivider} />);\n          builder.push(<td key={key++} />);\n          builder.push(<td key={key++} />);\n        }\n      }\n\n      if (hasDeadlift) {\n        if (i < byDeadlift.length) {\n          const entry = byDeadlift[i];\n          const kg: string = displayWeight(entry.deadliftKg[0]);\n          const lbs: string = displayWeight(kg2lbs(entry.deadliftKg[0]));\n          builder.push(\n            <td key={\"D-\" + entry.id} className={styles.leftDivider}>\n              {i + 1}. {entry.name}\n            </td>\n          );\n          builder.push(<td key={\"D-kg-\" + entry.id}>{kg}</td>);\n          builder.push(<td key={\"D-lbs-\" + entry.id}>{lbs}</td>);\n        } else {\n          builder.push(<td key={key++} className={styles.leftDivider} />);\n          builder.push(<td key={key++} />);\n          builder.push(<td key={key++} />);\n        }\n      }\n\n      rows.push(<tr key={i}>{builder}</tr>);\n    }\n\n    // Construct the table header.\n    let header = [];\n    if (hasSquat) {\n      header.push(<th key={\"S\"}>Squat</th>);\n      header.push(<th key={\"S-kg\"}>Kg</th>);\n      header.push(<th key={\"S-lbs\"}>Lbs</th>);\n    }\n    if (hasBench) {\n      header.push(\n        <th key={\"B\"} className={styles.leftDivider}>\n          Bench\n        </th>\n      );\n      header.push(<th key={\"B-kg\"}>Kg</th>);\n      header.push(<th key={\"B-lbs\"}>Lbs</th>);\n    }\n    if (hasDeadlift) {\n      header.push(\n        <th key={\"D\"} className={styles.leftDivider}>\n          Deadlift\n        </th>\n      );\n      header.push(<th key={\"D-kg\"}>Kg</th>);\n      header.push(<th key={\"D-lbs\"}>Lbs</th>);\n    }\n\n    return (\n      <Card>\n        <Card.Header>Flight {this.props.flight} Lifting Order</Card.Header>\n        <Card.Body>\n          <Table striped hover size=\"sm\" style={{ margin: \"0px\" }}>\n            <thead>\n              <tr>{header}</tr>\n            </thead>\n            <tbody>{rows}</tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default OneFlightOrder;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Shows all the lifters who are competing in the same Category.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Card from \"react-bootstrap/Card\";\n\nimport { CategoryResults } from \"../../logic/divisionPlace\";\nimport { Sex } from \"../../types/dataTypes\";\nimport { checkExhausted } from \"../../types/utils\";\n\nconst sexToLabel = (sex: Sex): string => {\n  switch (sex) {\n    case \"M\":\n      return \"Men's\";\n    case \"F\":\n      return \"Women's\";\n    case \"Mx\":\n      return \"Mx\";\n    default:\n      checkExhausted(sex);\n      return \"\";\n  }\n};\n\ntype Props = {\n  platform: number;\n  categoryResults: CategoryResults;\n};\n\nclass OneCategory extends React.Component<Props> {\n  render() {\n    const category = this.props.categoryResults.category;\n    const entries = this.props.categoryResults.orderedEntries;\n\n    const sex = sexToLabel(category.sex);\n\n    let namelist = [];\n    for (let i = 0; i < entries.length; i++) {\n      namelist.push(entries[i].name);\n    }\n\n    return (\n      <Card border=\"info\">\n        <Card.Header>\n          Platform {this.props.platform} Lifters in {sex} {category.weightClassStr}kg {category.equipment}{\" \"}\n          {category.division} {category.event}\n        </Card.Header>\n        <Card.Body>{namelist.join(\", \")}</Card.Body>\n      </Card>\n    );\n  }\n}\n\nexport default connect(\n  null,\n  null\n)(OneCategory);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the FlightOrder page, contained by the FlightOrderContainer.\n\nimport React, { FormEvent } from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport FormControl from \"react-bootstrap/FormControl\";\n\nimport OneFlightOrder from \"./OneFlightOrder\";\nimport OneCategory from \"./OneCategory\";\n\nimport { getProjectedResults } from \"../../logic/divisionPlace\";\n\nimport { Entry, Flight } from \"../../types/dataTypes\";\nimport { GlobalState, MeetState } from \"../../types/stateTypes\";\nimport { FormControlTypeHack } from \"../../types/utils\";\n\ninterface StateProps {\n  meet: MeetState;\n  entries: Array<Entry>;\n}\n\ntype Props = StateProps;\n\ninterface InternalState {\n  day: number;\n  platform: number;\n}\n\nconst marginStyle = { margin: \"0\" };\n\nclass FlightOrderView extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.updateDay = this.updateDay.bind(this);\n    this.updatePlatform = this.updatePlatform.bind(this);\n    this.handlePrint = this.handlePrint.bind(this);\n\n    this.state = {\n      day: 1,\n      platform: 1\n    };\n  }\n\n  updateDay = (event: FormEvent<FormControlTypeHack>) => {\n    const day = Number(event.currentTarget.value);\n    if (this.state.day !== day) {\n      // If the currently-selected platform number becomes invalid, reset it.\n      if (this.state.platform > this.props.meet.platformsOnDays[day - 1]) {\n        this.setState({ day: day, platform: 1 });\n      } else {\n        this.setState({ day: day });\n      }\n    }\n  };\n\n  updatePlatform = (event: React.FormEvent<FormControlTypeHack>) => {\n    const platform = Number(event.currentTarget.value);\n    if (this.state.platform !== platform) {\n      this.setState({ platform: platform });\n    }\n  };\n\n  handlePrint = () => {\n    window.print();\n  };\n\n  render() {\n    const selectorStyle = { width: \"120px\" };\n\n    // Make options for all of the days.\n    let dayOptions = [];\n    for (let i = 1; i <= this.props.meet.lengthDays; i++) {\n      dayOptions.push(\n        <option value={i} key={i}>\n          Day {i}\n        </option>\n      );\n    }\n\n    // Make options for all of the available platforms on the current day.\n    let platformOptions = [];\n    let numPlatforms = this.props.meet.platformsOnDays[this.state.day - 1];\n    for (let i = 1; i <= numPlatforms; i++) {\n      platformOptions.push(\n        <option value={i} key={i}>\n          Platform {i}\n        </option>\n      );\n    }\n\n    // Get all the entries under the current (day, platform) selection.\n    let shownEntries = this.props.entries.filter(e => {\n      return e.day === this.state.day && e.platform === this.state.platform;\n    });\n\n    // Look through the entries to discover what flights exist.\n    let knownFlights: Flight[] = [];\n    for (let i = 0; i < shownEntries.length; i++) {\n      const entry = shownEntries[i];\n      if (knownFlights.indexOf(entry.flight) === -1) {\n        knownFlights.push(entry.flight);\n      }\n    }\n    knownFlights.sort();\n\n    // For each flight, see if there are any lifters, and build a OneFlightOrder.\n    let flightOrders = [];\n    for (let i = 0; i < knownFlights.length; i++) {\n      const flight = knownFlights[i];\n      const entriesInFlight = shownEntries.filter(e => e.flight === flight);\n      const id = \"\" + this.state.day + \"-\" + this.state.platform + \"-\" + flight;\n      flightOrders.push(<OneFlightOrder key={id} flight={flight} entriesInFlight={entriesInFlight} />);\n    }\n\n    // Look through the entries to discover what divisions exist.\n    const categoryResults = getProjectedResults(\n      shownEntries,\n      this.props.meet.weightClassesKgMen,\n      this.props.meet.weightClassesKgWomen,\n      this.props.meet.weightClassesKgMx,\n      this.props.meet.combineSleevesAndWraps\n    );\n\n    let categories = [];\n    for (let i = 0; i < categoryResults.length; i++) {\n      const id = \"\" + this.state.day + \"-\" + this.state.platform + \"-\" + i;\n      categories.push(<OneCategory key={id} platform={this.state.platform} categoryResults={categoryResults[i]} />);\n    }\n\n    return (\n      <div style={marginStyle}>\n        <Card border=\"info\">\n          <Card.Body style={{ display: \"flex\" }}>\n            <FormControl\n              defaultValue={this.state.day}\n              as=\"select\"\n              onChange={this.updateDay}\n              style={selectorStyle}\n              className=\"custom-select\"\n            >\n              {dayOptions}\n            </FormControl>\n\n            <FormControl\n              defaultValue={this.state.platform.toString()}\n              as=\"select\"\n              onChange={this.updatePlatform}\n              style={selectorStyle}\n              className=\"custom-select\"\n            >\n              {platformOptions}\n            </FormControl>\n\n            <Button variant=\"info\" onClick={this.handlePrint}>\n              Print Page\n            </Button>\n          </Card.Body>\n        </Card>\n\n        {flightOrders}\n        {categories}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    meet: state.meet,\n    entries: state.registration.entries\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(FlightOrderView);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the FlightOrder page.\n\nimport React from \"react\";\nimport FlightOrderView from \"../components/flight-order/FlightOrderView\";\n\nclass FlightOrderContainer extends React.Component<{}> {\n  render() {\n    return <FlightOrderView />;\n  }\n}\n\nexport default FlightOrderContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Displays the results by division.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\n\nimport { getFinalResults } from \"../../logic/divisionPlace\";\nimport { getWeightClassStr, getWeightClassLbsStr, wtclsStrKg2Lbs } from \"../../reducers/meetReducer\";\nimport {\n  getBest5SquatKg,\n  getBest5BenchKg,\n  getBest5DeadliftKg,\n  getFinalEventTotalKg,\n  entryHasLifted\n} from \"../../logic/entry\";\nimport { kg2lbs, displayWeight } from \"../../logic/units\";\n\nimport { getPoints } from \"../../logic/coefficients/coefficients\";\n\nimport { Category, CategoryResults } from \"../../logic/divisionPlace\";\nimport { Entry, Formula, Sex } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { checkExhausted } from \"../../types/utils\";\n\ninterface StateProps {\n  inKg: boolean;\n  showAlternateUnits: boolean;\n  meetName: string;\n  formula: Formula;\n  combineSleevesAndWraps: boolean;\n  lengthDays: number;\n  weightClassesKgMen: Array<number>;\n  weightClassesKgWomen: Array<number>;\n  weightClassesKgMx: Array<number>;\n  entries: Array<Entry>;\n}\n\ninterface OwnProps {\n  day: string | number; // Really a number, 0 meaning \"all\".\n}\n\ntype Props = StateProps & OwnProps;\n\nconst mapSexToClasses = (sex: Sex, props: Props): Array<number> => {\n  switch (sex) {\n    case \"M\":\n      return props.weightClassesKgMen;\n    case \"F\":\n      return props.weightClassesKgWomen;\n    case \"Mx\":\n      return props.weightClassesKgMx;\n    default:\n      checkExhausted(sex);\n      return props.weightClassesKgMen;\n  }\n};\n\nclass ByDivision extends React.Component<Props> {\n  renderEntryRow = (entry: Entry, category: Category, key: number): JSX.Element | null => {\n    // Skip no-show entries.\n    if (!entryHasLifted(entry)) return null;\n\n    // Skip DQ'd lifters. Meet directors have reported that it's embarrassing\n    // to the DQ'd lifter to have that projected.\n    const totalKg = getFinalEventTotalKg(entry, category.event);\n    if (totalKg === 0) return null;\n\n    const inKg = this.props.inKg;\n\n    // The place proceeds in order by key, except for DQ entries.\n    const place = totalKg === 0 ? \"DQ\" : key + 1;\n\n    const points: number = getPoints(this.props.formula, entry, category.event, totalKg, inKg);\n\n    let pointsStr = \"\";\n    if (totalKg !== 0 && points === 0) pointsStr = \"N/A\";\n    else if (totalKg !== 0 && points !== 0) pointsStr = points.toFixed(2);\n\n    const classes = mapSexToClasses(entry.sex, this.props);\n    const wtcls = inKg\n      ? getWeightClassStr(classes, entry.bodyweightKg)\n      : getWeightClassLbsStr(classes, entry.bodyweightKg);\n    const bw = inKg ? entry.bodyweightKg : kg2lbs(entry.bodyweightKg);\n\n    const squatKg = getBest5SquatKg(entry);\n    const squat = inKg ? squatKg : kg2lbs(squatKg);\n\n    const benchKg = getBest5BenchKg(entry);\n    const bench = inKg ? benchKg : kg2lbs(benchKg);\n\n    const deadliftKg = getBest5DeadliftKg(entry);\n    const deadlift = inKg ? deadliftKg : kg2lbs(deadliftKg);\n\n    const total = inKg ? totalKg : kg2lbs(totalKg); // For display.\n\n    const unit = inKg ? \"kg\" : \"lb\";\n    const otherUnit = inKg ? \"lb\" : \"kg\";\n\n    // Calculate the total in the alternate units, if requested.\n    let alternateTotal: string | null = null;\n    if (this.props.showAlternateUnits === true && totalKg !== 0) {\n      const amount = inKg ? kg2lbs(totalKg) : totalKg;\n      alternateTotal = unit + \" / \" + displayWeight(amount) + otherUnit;\n    }\n\n    return (\n      <tr key={key}>\n        <td>{place}</td>\n        <td>{entry.name}</td>\n        <td>{entry.bodyweightKg === 0 ? null : wtcls}</td>\n        <td>{entry.bodyweightKg === 0 ? null : displayWeight(bw)}</td>\n        <td>{entry.age === 0 ? null : entry.age}</td>\n        <td>{squatKg === 0 ? \"\" : displayWeight(squat)}</td>\n        <td>{benchKg === 0 ? \"\" : displayWeight(bench)}</td>\n        <td>{deadliftKg === 0 ? \"\" : displayWeight(deadlift)}</td>\n        <td>\n          {totalKg === 0 ? \"\" : displayWeight(total)}\n          {alternateTotal}\n        </td>\n        <td>{pointsStr}</td>\n      </tr>\n    );\n  };\n\n  mapSexToLabel = (sex: Sex): string => {\n    switch (sex) {\n      case \"M\":\n        return \"Men's\";\n      case \"F\":\n        return \"Women's\";\n      case \"Mx\":\n        return \"Mx\";\n      default:\n        checkExhausted(sex);\n        return \"\";\n    }\n  };\n\n  renderCategoryResults = (results: CategoryResults, key: number): JSX.Element | null => {\n    const { category, orderedEntries } = results;\n    const sex = this.mapSexToLabel(category.sex);\n\n    // Gather rows.\n    let rows = [];\n    for (let i = 0; i < orderedEntries.length; i++) {\n      const row = this.renderEntryRow(orderedEntries[i], category, i);\n      if (row !== null) {\n        rows.push(row);\n      }\n    }\n\n    // If all entries were no-show, don't show this panel.\n    if (rows.length === 0) {\n      return null;\n    }\n\n    let eqpstr: string = category.equipment;\n    if (this.props.combineSleevesAndWraps) {\n      eqpstr = \"Sleeves + Wraps\";\n    }\n\n    let units = this.props.inKg ? \"kilo\" : \"pound\";\n\n    // Convert the category.weightClassStr to pounds.\n    let wtcls = category.weightClassStr;\n    if (category.weightClassStr !== \"\" && !this.props.inKg) {\n      wtcls = wtclsStrKg2Lbs(category.weightClassStr);\n    }\n\n    return (\n      <Card key={key}>\n        <Card.Header>\n          {sex} {wtcls} {category.weightClassStr !== \"\" ? units : null} {eqpstr} {category.division} {category.event}\n        </Card.Header>\n        <Card.Body>\n          <Table hover size=\"sm\">\n            <thead>\n              <tr>\n                <th>Place</th>\n                <th>Name</th>\n                <th>Class</th>\n                <th>Bwt</th>\n                <th>Age</th>\n                <th>Squat</th>\n                <th>Bench</th>\n                <th>Deadlift</th>\n                <th>Total</th>\n                <th>Points</th>\n              </tr>\n            </thead>\n            <tbody>{rows}</tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n    );\n  };\n\n  render() {\n    const results = getFinalResults(\n      this.props.entries,\n      this.props.weightClassesKgMen,\n      this.props.weightClassesKgWomen,\n      this.props.weightClassesKgMx,\n      this.props.combineSleevesAndWraps\n    );\n\n    let categoryCards = [];\n    for (let i = 0; i < results.length; i++) {\n      const panel = this.renderCategoryResults(results[i], i);\n      if (panel !== null) {\n        categoryCards.push(panel);\n      }\n    }\n\n    return <div>{categoryCards}</div>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  const day = Number(ownProps.day);\n  let entries = state.registration.entries;\n  if (day > 0) {\n    entries = entries.filter(e => e.day === day);\n  }\n\n  return {\n    inKg: state.meet.inKg,\n    showAlternateUnits: state.meet.showAlternateUnits,\n    meetName: state.meet.name,\n    formula: state.meet.formula,\n    combineSleevesAndWraps: state.meet.combineSleevesAndWraps,\n    lengthDays: state.meet.lengthDays,\n    weightClassesKgMen: state.meet.weightClassesKgMen,\n    weightClassesKgWomen: state.meet.weightClassesKgWomen,\n    weightClassesKgMx: state.meet.weightClassesKgMx,\n    entries: entries\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ByDivision);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the logic for calculating the division Place of a lifter, shared between\n// the Lifting page, the Rankings page, and data export code.\n//\n// The algorithm used is particularly bad -- the foremost goal was to make an interface\n// that allowed for maximum code reuse between the Rankings and Lifting pages,\n// which have slightly different needs.\n\nimport { getFinalEventTotalKg } from \"./entry\";\n\n// Import points formulas.\nimport { getPoints, getAgeAdjustedPoints } from \"./coefficients/coefficients\";\n\n// Import age coefficients.\nimport { checkExhausted } from \"../types/utils\";\nimport { AgeCoefficients, Sex, Event, Equipment, Entry, Formula } from \"../types/dataTypes\";\n\n// Specifies a points category under which entries can be ranked together.\nexport type PointsCategory = {\n  sex: Sex;\n  event: Event;\n  equipment: Equipment;\n};\n\n// Wraps up all the entries in a category with the category's descriptors.\nexport type PointsCategoryResults = {\n  category: PointsCategory;\n  orderedEntries: Array<Entry>;\n};\n\n// Generates a unique String out of a Category, for purposes of using as a Map key.\nconst categoryToKey = (category: PointsCategory): string => {\n  return JSON.stringify(category);\n};\nconst keyToCategory = (key: string): PointsCategory => {\n  return JSON.parse(key);\n};\n\n// Returns a copy of the entries array sorted by Formula Place (Rank).\n// All entries are assumed to be part of the same category.\nconst sortByFormulaPlaceInCategory = (\n  entries: Array<Entry>,\n  category: PointsCategory,\n  formula: Formula,\n  ageCoefficients: AgeCoefficients,\n  inKg: boolean,\n  meetDate: string\n): Array<Entry> => {\n  // Make a map from Entry to initial index.\n  let indexMap = new Map();\n  for (let i = 0; i < entries.length; i++) {\n    indexMap.set(entries[i], i);\n  }\n\n  // Pre-calculate all the points into an array to avoid computing them multiple\n  // times in the sort.\n  let memoizedPoints = new Array(entries.length);\n  for (let i = 0; i < entries.length; i++) {\n    const entry = entries[i];\n    const totalKg = getFinalEventTotalKg(entry, category.event);\n\n    memoizedPoints[i] = getAgeAdjustedPoints(ageCoefficients, meetDate, formula, entry, category.event, totalKg, inKg);\n  }\n\n  // Clone the entries array to avoid modifying the original.\n  let clonedEntries = entries.slice();\n\n  // Sort in the given category, first place having the lowest index.\n  clonedEntries.sort((a, b) => {\n    const aIndex = indexMap.get(a);\n    const bIndex = indexMap.get(b);\n\n    // Appease the type checker even though this can't happen.\n    if (aIndex === undefined || bIndex === undefined) return 0;\n\n    // First sort by points, higher sorting lower.\n    const aPoints = memoizedPoints[aIndex];\n    const bPoints = memoizedPoints[bIndex];\n    if (aPoints !== bPoints) return bPoints - aPoints;\n\n    // If points are equal, sort by Bodyweight, lower sorting lower.\n    if (a.bodyweightKg !== b.bodyweightKg) return a.bodyweightKg - b.bodyweightKg;\n\n    // Otherwise, they're equal.\n    return 0;\n  });\n\n  return clonedEntries;\n};\n\n// Determines the sort order by Event.\nconst getEventSortOrder = (ev: Event): number => {\n  return [\"SBD\", \"BD\", \"SB\", \"SD\", \"S\", \"B\", \"D\"].indexOf(ev);\n};\n\n// Determines the sort order by Equipment.\nconst getEquipmentSortOrder = (eq: Equipment): number => {\n  // Combine classic and equipped lifting.\n  return [\"Bare\", \"Sleeves\", \"Wraps\", \"Single-ply\", \"Multi-ply\"].indexOf(eq);\n};\n\n// Determines the sort order by Sex.\nconst getSexSortOrder = (sex: Sex): number => {\n  switch (sex) {\n    case \"F\":\n      return 0;\n    case \"M\":\n      return 1;\n    case \"Mx\":\n      return 2;\n    default:\n      checkExhausted(sex);\n      return 3;\n  }\n};\n\n// Determines the sort (and therefore presentation) order for the Category Results.\n// The input array is sorted in-place; nothing is returned.\nexport const sortPointsCategoryResults = (results: Array<PointsCategoryResults>) => {\n  results.sort((a, b) => {\n    const catA = a.category;\n    const catB = b.category;\n\n    // First, sort by Sex.\n    const aSex = getSexSortOrder(catA.sex);\n    const bSex = getSexSortOrder(catB.sex);\n    if (aSex !== bSex) return aSex - bSex;\n\n    // Next, sort by Event.\n    const aEvent = getEventSortOrder(catA.event);\n    const bEvent = getEventSortOrder(catB.event);\n    if (aEvent !== bEvent) return aEvent - bEvent;\n\n    // Finally, sort by Equipment.\n    const aEquipment = getEquipmentSortOrder(catA.equipment);\n    const bEquipment = getEquipmentSortOrder(catB.equipment);\n    if (aEquipment !== bEquipment) return aEquipment - bEquipment;\n\n    return 0;\n  });\n};\n\n// Generates objects representing the various ByPoints categories.\n// The returned objects are sorted in intended order of presentation.\nexport const getAllRankings = (\n  entries: Array<Entry>,\n  formula: Formula,\n  ageCoefficients: AgeCoefficients,\n  combineSleevesAndWraps: boolean,\n  inKg: boolean,\n  meetDate: string\n): Array<PointsCategoryResults> => {\n  // Generate a map from category to the entries within that category.\n  // The map is populated by iterating over each entry and having the entry\n  // append itself to per-category lists.\n  let categoryMap = new Map();\n  for (let i = 0; i < entries.length; i++) {\n    const e = entries[i];\n\n    // Remember consistent properties.\n    const sex = e.sex;\n    let equipment: Equipment = e.equipment;\n\n    // If the results combine Sleeves and Wraps, promote Sleeves to Wraps.\n    if (combineSleevesAndWraps && equipment === \"Sleeves\") {\n      equipment = \"Wraps\";\n    }\n\n    // Iterate over each event, adding to the map.\n    for (let evidx = 0; evidx < e.events.length; evidx++) {\n      const event = e.events[evidx];\n      const category = { sex, event, equipment };\n      const key = categoryToKey(category);\n\n      const catEntries = categoryMap.get(key);\n      catEntries === undefined ? categoryMap.set(key, [e]) : catEntries.push(e);\n    }\n  }\n\n  // Iterate over each category and assign a Place to the entries therein.\n  let results = [];\n  for (let [key, catEntries] of categoryMap) {\n    const category = keyToCategory(key);\n    const orderedEntries = sortByFormulaPlaceInCategory(catEntries, category, formula, ageCoefficients, inKg, meetDate);\n    results.push({ category, orderedEntries });\n  }\n\n  sortPointsCategoryResults(results);\n  return results;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Displays the results by points.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Card from \"react-bootstrap/Card\";\nimport Table from \"react-bootstrap/Table\";\n\nimport { getAllRankings } from \"../../logic/pointsPlace\";\nimport { getWeightClassStr, getWeightClassLbsStr } from \"../../reducers/meetReducer\";\nimport {\n  getBest5SquatKg,\n  getBest5BenchKg,\n  getBest5DeadliftKg,\n  getFinalEventTotalKg,\n  entryHasLifted\n} from \"../../logic/entry\";\nimport { kg2lbs, displayWeight } from \"../../logic/units\";\n\nimport { getPoints, getAgeAdjustedPoints } from \"../../logic/coefficients/coefficients\";\n\nimport { PointsCategory, PointsCategoryResults } from \"../../logic/pointsPlace\";\nimport { AgeCoefficients, Entry, Formula, Sex } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { checkExhausted } from \"../../types/utils\";\nimport { fosterMcCulloch } from \"../../logic/coefficients/foster-mcculloch\";\n\ninterface StateProps {\n  inKg: boolean;\n  meetName: string;\n  meetDate: string;\n  formula: Formula;\n  combineSleevesAndWraps: boolean;\n  lengthDays: number;\n  weightClassesKgMen: Array<number>;\n  weightClassesKgWomen: Array<number>;\n  weightClassesKgMx: Array<number>;\n  entries: Array<Entry>;\n}\n\n// Overloads this component so it can render different types of \"Best Lifter\" categories.\nexport type AgePointsCategory = \"BestLifter\" | \"BestMastersLifter\" | \"BestJuniorsLifter\";\n\ninterface OwnProps {\n  day: string | number; // Really a number, 0 meaning \"all\".\n  ageCoefficients: AgeCoefficients; // In OwnProps so that caller can disable it.\n  agePointsCategory: AgePointsCategory;\n}\n\ntype Props = StateProps & OwnProps;\n\nconst mapSexToClasses = (sex: Sex, props: Props): Array<number> => {\n  switch (sex) {\n    case \"M\":\n      return props.weightClassesKgMen;\n    case \"F\":\n      return props.weightClassesKgWomen;\n    case \"Mx\":\n      return props.weightClassesKgMx;\n    default:\n      checkExhausted(sex);\n      return props.weightClassesKgMen;\n  }\n};\n\nclass ByPoints extends React.Component<Props> {\n  renderEntryRow = (entry: Entry, category: PointsCategory, key: number): JSX.Element | null => {\n    // Skip no-show lifters.\n    if (!entryHasLifted(entry)) return null;\n\n    // Skip DQ'd lifters. Meet directors have reported that it's embarrassing\n    // to the DQ'd lifter to have that projected.\n    const totalKg = getFinalEventTotalKg(entry, category.event);\n    if (totalKg === 0) return null;\n\n    const inKg = this.props.inKg;\n\n    // The place proceeds in order by key, except for DQ entries.\n    const rank = totalKg === 0 ? \"DQ\" : key + 1;\n\n    const points: number = getAgeAdjustedPoints(\n      this.props.ageCoefficients,\n      this.props.meetDate,\n      this.props.formula,\n      entry,\n      category.event,\n      totalKg,\n      inKg\n    );\n\n    let pointsStr = \"\";\n    if (totalKg !== 0 && points === 0) pointsStr = \"N/A\";\n    else if (totalKg !== 0 && points !== 0) pointsStr = points.toFixed(2);\n\n    const classes = mapSexToClasses(entry.sex, this.props);\n    const wtcls = inKg\n      ? getWeightClassStr(classes, entry.bodyweightKg)\n      : getWeightClassLbsStr(classes, entry.bodyweightKg);\n    const bw = inKg ? entry.bodyweightKg : kg2lbs(entry.bodyweightKg);\n\n    const squatKg = getBest5SquatKg(entry);\n    const squat = inKg ? squatKg : kg2lbs(squatKg);\n\n    const benchKg = getBest5BenchKg(entry);\n    const bench = inKg ? benchKg : kg2lbs(benchKg);\n\n    const deadliftKg = getBest5DeadliftKg(entry);\n    const deadlift = inKg ? deadliftKg : kg2lbs(deadliftKg);\n\n    const total = inKg ? totalKg : kg2lbs(totalKg);\n\n    return (\n      <tr key={key}>\n        <td>{rank}</td>\n        <td>{entry.name}</td>\n        <td>{entry.sex}</td>\n        <td>{entry.equipment}</td>\n        <td>{entry.bodyweightKg === 0 ? null : wtcls}</td>\n        <td>{entry.bodyweightKg === 0 ? null : displayWeight(bw)}</td>\n        <td>{entry.age === 0 ? null : entry.age}</td>\n        <td>{squatKg === 0 ? \"\" : displayWeight(squat)}</td>\n        <td>{benchKg === 0 ? \"\" : displayWeight(bench)}</td>\n        <td>{deadliftKg === 0 ? \"\" : displayWeight(deadlift)}</td>\n        <td>{totalKg === 0 ? \"\" : displayWeight(total)}</td>\n        <td>{pointsStr}</td>\n      </tr>\n    );\n  };\n\n  mapSexToLabel = (sex: Sex): string => {\n    switch (sex) {\n      case \"M\":\n        return \"Men's\";\n      case \"F\":\n        return \"Women's\";\n      case \"Mx\":\n        return \"Mx\";\n      default:\n        checkExhausted(sex);\n        return \"\";\n    }\n  };\n\n  renderCategoryResults = (results: PointsCategoryResults, key: number): JSX.Element | null => {\n    const { category, orderedEntries } = results;\n    const sex = this.mapSexToLabel(category.sex);\n\n    // Gather rows.\n    let rows = [];\n    for (let i = 0; i < orderedEntries.length; i++) {\n      const row = this.renderEntryRow(orderedEntries[i], category, i);\n      if (row !== null) {\n        rows.push(row);\n      }\n    }\n\n    // If all lifters were No-Show, skip displaying this category.\n    if (rows.length === 0) {\n      return null;\n    }\n\n    let eqpstr: string = category.equipment;\n    if (this.props.combineSleevesAndWraps) {\n      eqpstr = \"Sleeves + Wraps\";\n    }\n\n    return (\n      <Card key={key}>\n        <Card.Header>\n          {sex} {eqpstr} {category.event}\n        </Card.Header>\n        <Card.Body>\n          <Table striped hover size=\"sm\">\n            <thead>\n              <tr>\n                <th>Rank</th>\n                <th>Name</th>\n                <th>Sex</th>\n                <th>Equipment</th>\n                <th>Class</th>\n                <th>Bwt</th>\n                <th>Age</th>\n                <th>Squat</th>\n                <th>Bench</th>\n                <th>Deadlift</th>\n                <th>Total</th>\n                <th>{this.props.ageCoefficients === \"None\" ? \"Points\" : \"Age-Points\"}</th>\n              </tr>\n            </thead>\n            <tbody>{rows}</tbody>\n          </Table>\n        </Card.Body>\n      </Card>\n    );\n  };\n\n  render() {\n    let entries = this.props.entries;\n\n    // If this is for Best Masters lifter, just include non-standard-aged lifters.\n    if (this.props.agePointsCategory !== \"BestLifter\") {\n      entries = entries.filter(e => {\n        // Filter out based on age.\n        switch (this.props.agePointsCategory) {\n          case \"BestLifter\":\n            break;\n          case \"BestMastersLifter\":\n            // The coefficients logic below will handle older lifters\n            // according to the chosen age coefficient system.\n            if (e.age <= 27) {\n              return false;\n            }\n            break;\n          case \"BestJuniorsLifter\":\n            // The coefficients logic below will handle older lifters\n            // according to the chosen age coefficient system.\n            if (e.age >= 27) {\n              return false;\n            }\n            break;\n          default:\n            checkExhausted(this.props.agePointsCategory);\n            break;\n        }\n\n        // Only include lifters who get an age bump.\n        switch (this.props.ageCoefficients) {\n          case \"None\":\n            return true;\n          case \"FosterMcCulloch\":\n            return fosterMcCulloch(e.age) !== 1.0;\n          default:\n            checkExhausted(this.props.ageCoefficients);\n            return true;\n        }\n      });\n    }\n\n    const results = getAllRankings(\n      entries,\n      this.props.formula,\n      this.props.ageCoefficients,\n      this.props.combineSleevesAndWraps,\n      this.props.inKg,\n      this.props.meetDate\n    );\n\n    let categoryCards = [];\n    for (let i = 0; i < results.length; i++) {\n      const panel = this.renderCategoryResults(results[i], i);\n      if (panel !== null) {\n        categoryCards.push(panel);\n      }\n    }\n\n    return <div>{categoryCards}</div>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState, ownProps: OwnProps): StateProps => {\n  const day = Number(ownProps.day);\n  let entries = state.registration.entries;\n  if (day > 0) {\n    entries = entries.filter(e => e.day === day);\n  }\n\n  return {\n    inKg: state.meet.inKg,\n    meetName: state.meet.name,\n    meetDate: state.meet.date,\n    formula: state.meet.formula,\n    combineSleevesAndWraps: state.meet.combineSleevesAndWraps,\n    lengthDays: state.meet.lengthDays,\n    weightClassesKgMen: state.meet.weightClassesKgMen,\n    weightClassesKgWomen: state.meet.weightClassesKgWomen,\n    weightClassesKgMx: state.meet.weightClassesKgMx,\n    entries: entries\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  null\n)(ByPoints);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Exports data to a CSV format easily importable by OpenPowerlifting.\n\nimport { csvString, Csv } from \"./csv\";\nimport { getFinalResults } from \"../divisionPlace\";\nimport { wtclsStrKg2Lbs } from \"../../reducers/meetReducer\";\nimport {\n  getAge,\n  getBest3SquatKg,\n  getBest3BenchKg,\n  getBest3DeadliftKg,\n  getFinalEventTotalKg,\n  entryHasLifted,\n  MAX_ATTEMPTS\n} from \"../entry\";\nimport { displayWeight, kg2lbs } from \"../units\";\n\nimport { Category, CategoryResults } from \"../divisionPlace\";\nimport { Entry, Equipment } from \"../../types/dataTypes\";\nimport { GlobalState, MeetState } from \"../../types/stateTypes\";\nimport { checkExhausted } from \"../../types/utils\";\n\nconst makeMeetCsv = (meet: MeetState): Csv => {\n  let csv = new Csv();\n  csv.fieldnames = [\"Federation\", \"Date\", \"MeetCountry\", \"MeetState\", \"MeetTown\", \"MeetName\", \"Formula\"];\n\n  let row: Array<string> = [\n    csvString(meet.federation),\n    csvString(meet.date),\n    csvString(meet.country),\n    csvString(meet.state),\n    csvString(meet.city),\n    csvString(meet.name),\n    csvString(meet.formula)\n  ];\n  csv.rows = [row];\n\n  // An optional RuleSet column may be provided.\n  if (meet.combineSleevesAndWraps === true) {\n    csv.fieldnames.push(\"RuleSet\");\n    csv.rows[0].push(\"CombineRawAndWraps\");\n  }\n\n  return csv;\n};\n\nconst makeEntriesCsv = (state: GlobalState): Csv => {\n  let csv = new Csv();\n\n  let squatFieldnames = [];\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    squatFieldnames.push(\"Squat\" + (i + 1) + \"LBS\");\n  }\n  squatFieldnames.push(\"Best3SquatLBS\");\n\n  let benchFieldnames = [];\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    benchFieldnames.push(\"Bench\" + (i + 1) + \"LBS\");\n  }\n  benchFieldnames.push(\"Best3BenchLBS\");\n\n  let deadliftFieldnames = [];\n  for (let i = 0; i < MAX_ATTEMPTS; i++) {\n    deadliftFieldnames.push(\"Deadlift\" + (i + 1) + \"LBS\");\n  }\n  deadliftFieldnames.push(\"Best3DeadliftLBS\");\n\n  csv.fieldnames = Array.prototype.concat(\n    [\"Place\", \"Name\", \"Instagram\", \"Sex\", \"BirthDate\", \"Age\", \"Country\", \"State\"],\n    [\"Equipment\", \"Division\", \"BodyweightLBS\", \"WeightClassLBS\"],\n    squatFieldnames,\n    benchFieldnames,\n    deadliftFieldnames,\n    [\"TotalLBS\", \"Event\", \"Team\"]\n  );\n\n  const results: Array<CategoryResults> = getFinalResults(\n    state.registration.entries,\n    state.meet.weightClassesKgMen,\n    state.meet.weightClassesKgWomen,\n    state.meet.weightClassesKgMx,\n    state.meet.combineSleevesAndWraps\n  );\n\n  for (let i = 0; i < results.length; i++) {\n    const { category, orderedEntries } = results[i];\n\n    for (let j = 0; j < orderedEntries.length; j++) {\n      addEntriesRow(csv, category, state.meet.date, orderedEntries[j], j);\n    }\n  }\n\n  return csv;\n};\n\nconst standardizeEquipment = (eq: Equipment): string => {\n  switch (eq) {\n    case \"Bare\":\n      return \"Raw\";\n    case \"Sleeves\":\n      return \"Raw\";\n    case \"Wraps\":\n      return \"Wraps\";\n    case \"Single-ply\":\n      return \"Single-ply\";\n    case \"Multi-ply\":\n      return \"Multi-ply\";\n    default:\n      checkExhausted(eq);\n      return \"Raw\";\n  }\n};\n\nconst addEntriesRow = (csv: Csv, category: Category, meetDate: string, entry: Entry, index: number) => {\n  const finalEventTotalKg = getFinalEventTotalKg(entry, category.event);\n\n  // Initialize an empty row with all columns available.\n  let row: Array<string> = Array(csv.fieldnames.length).fill(\"\");\n\n  if (!entryHasLifted(entry)) {\n    row[csv.index(\"Place\")] = \"NS\"; // No-Show.\n  } else {\n    row[csv.index(\"Place\")] = finalEventTotalKg === 0 ? \"DQ\" : csvString(index + 1);\n  }\n\n  row[csv.index(\"Name\")] = csvString(entry.name);\n  row[csv.index(\"Instagram\")] = csvString(entry.instagram);\n  row[csv.index(\"Sex\")] = csvString(entry.sex);\n  row[csv.index(\"BirthDate\")] = csvString(entry.birthDate);\n  row[csv.index(\"Age\")] = csvString(getAge(entry, meetDate));\n  row[csv.index(\"Country\")] = csvString(entry.country);\n  row[csv.index(\"State\")] = csvString(entry.state);\n  row[csv.index(\"Equipment\")] = csvString(standardizeEquipment(entry.equipment));\n  row[csv.index(\"Division\")] = csvString(category.division);\n  row[csv.index(\"BodyweightLBS\")] = csvString(displayWeight(kg2lbs(entry.bodyweightKg)));\n  row[csv.index(\"WeightClassLBS\")] = csvString(wtclsStrKg2Lbs(category.weightClassStr));\n  row[csv.index(\"TotalLBS\")] = csvString(displayWeight(kg2lbs(finalEventTotalKg)));\n  row[csv.index(\"Event\")] = csvString(category.event);\n  row[csv.index(\"Team\")] = csvString(entry.team);\n\n  // Squat.\n  if (category.event.includes(\"S\")) {\n    row[csv.index(\"Best3SquatLBS\")] = csvString(displayWeight(kg2lbs(getBest3SquatKg(entry))));\n    for (let i = 0; i < MAX_ATTEMPTS; i++) {\n      const field = \"Squat\" + (i + 1) + \"LBS\";\n      row[csv.index(field)] = csvString(displayWeight(kg2lbs(entry.squatKg[i] * entry.squatStatus[i])));\n    }\n  }\n\n  // Bench.\n  if (category.event.includes(\"B\")) {\n    row[csv.index(\"Best3BenchLBS\")] = csvString(displayWeight(kg2lbs(getBest3BenchKg(entry))));\n    for (let i = 0; i < MAX_ATTEMPTS; i++) {\n      const field = \"Bench\" + (i + 1) + \"LBS\";\n      row[csv.index(field)] = csvString(displayWeight(kg2lbs(entry.benchKg[i] * entry.benchStatus[i])));\n    }\n  }\n\n  // Deadlift.\n  if (category.event.includes(\"D\")) {\n    row[csv.index(\"Best3DeadliftLBS\")] = csvString(displayWeight(kg2lbs(getBest3DeadliftKg(entry))));\n    for (let i = 0; i < MAX_ATTEMPTS; i++) {\n      const field = \"Deadlift\" + (i + 1) + \"LBS\";\n      row[csv.index(field)] = csvString(displayWeight(kg2lbs(entry.deadliftKg[i] * entry.deadliftStatus[i])));\n    }\n  }\n\n  csv.rows.push(row);\n};\n\nexport const exportAsOplCsv = (state: GlobalState): string => {\n  const meetCsv: Csv = makeMeetCsv(state.meet);\n\n  let entriesCsv: Csv = makeEntriesCsv(state);\n  entriesCsv.removeEmptyColumns();\n\n  const versionStr = \"OPL Format v1,Submit by email:,issues@openpowerlifting.org\";\n\n  return versionStr + \"\\n\\n\" + meetCsv.toString() + \"\\n\" + entriesCsv.toString();\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Exports data to a spreadsheet format used by the USAPL.\n\nimport { csvString, Csv } from \"./csv\";\nimport { getFinalResults } from \"../divisionPlace\";\nimport { displayWeight } from \"../units\";\n\nimport { Category, CategoryResults } from \"../divisionPlace\";\nimport { Entry, Event } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { checkExhausted } from \"../../types/utils\";\n\n// Translates the event from our format to the NextLifter format.\nconst translateEvent = (ev: Event): string => {\n  switch (ev) {\n    // Variants present in the NextLifter software.\n    case \"SBD\":\n      return \"PL\";\n    case \"BD\":\n      return \"PP\";\n    case \"S\":\n      return \"SQ\";\n    case \"B\":\n      return \"BP\";\n    case \"D\":\n      return \"DL\";\n\n    // These variants aren't selectable in NextLifter, so the USAPL doesn't use them.\n    case \"SB\":\n      return \"SB\";\n    case \"SD\":\n      return \"SD\";\n    default:\n      checkExhausted(ev);\n      return ev;\n  }\n};\n\n// Converts the ISO8601 entry.birthDate to USAPL MM/DD/YYYY format.\nconst makeBirthDate = (entry: Entry): string => {\n  if (entry.birthDate === undefined || entry.birthDate === \"\") {\n    return \"\";\n  }\n  let [year, month, day]: Array<string> = entry.birthDate.split(\"-\");\n  return month + \"/\" + day + \"/\" + year;\n};\n\n// Given an Entry and its index in the CategoryResults.orderedEntries,\n// render all that information as a one-liner CSV string.\nconst addDataRow = (csv: Csv, category: Category, entry: Entry) => {\n  const hasSquat: boolean = category.event.includes(\"S\");\n  const hasBench: boolean = category.event.includes(\"B\");\n  const hasDL: boolean = category.event.includes(\"D\");\n\n  // Initialize an empty row with all columns available.\n  let row: Array<string> = Array(csv.fieldnames.length).fill(\"\");\n\n  row[csv.index(\"Name\")] = csvString(entry.name);\n  row[csv.index(\"Team\")] = csvString(entry.team);\n  row[csv.index(\"Div\")] = csvString(category.division);\n  row[csv.index(\"Bwt - kg\")] = csvString(displayWeight(entry.bodyweightKg));\n  row[csv.index(\"IPF Wt Cls\")] = csvString(category.weightClassStr);\n  row[csv.index(\"DOB\")] = csvString(makeBirthDate(entry));\n  row[csv.index(\"Squat 1\")] = csvString(displayWeight(hasSquat ? entry.squatKg[0] * entry.squatStatus[0] : 0));\n  row[csv.index(\"Squat 2\")] = csvString(displayWeight(hasSquat ? entry.squatKg[1] * entry.squatStatus[1] : 0));\n  row[csv.index(\"Squat 3\")] = csvString(displayWeight(hasSquat ? entry.squatKg[2] * entry.squatStatus[2] : 0));\n  row[csv.index(\"Bench 1\")] = csvString(displayWeight(hasBench ? entry.benchKg[0] * entry.benchStatus[0] : 0));\n  row[csv.index(\"Bench 2\")] = csvString(displayWeight(hasBench ? entry.benchKg[1] * entry.benchStatus[1] : 0));\n  row[csv.index(\"Bench 3\")] = csvString(displayWeight(hasBench ? entry.benchKg[2] * entry.benchStatus[2] : 0));\n  row[csv.index(\"Deadlift 1\")] = csvString(displayWeight(hasDL ? entry.deadliftKg[0] * entry.deadliftStatus[0] : 0));\n  row[csv.index(\"Deadlift 2\")] = csvString(displayWeight(hasDL ? entry.deadliftKg[1] * entry.deadliftStatus[1] : 0));\n  row[csv.index(\"Deadlift 3\")] = csvString(displayWeight(hasDL ? entry.deadliftKg[2] * entry.deadliftStatus[2] : 0));\n  row[csv.index(\"Event\")] = csvString(translateEvent(category.event));\n  row[csv.index(\"State\")] = csvString(entry.state);\n  row[csv.index(\"MemberID\")] = csvString(entry.memberId);\n  // TODO: Drug Test.\n\n  csv.rows.push(row);\n};\n\nexport const exportAsUSAPLCsv = (state: GlobalState): string => {\n  let csv = new Csv();\n  csv.fieldnames = [\n    \"Name\",\n    \"Team\",\n    \"Div\", // Division.\n    \"Bwt - kg\", // Bodyweight, kg.\n    \"IPF Wt Cls\", // IPF Weight Class (SHW as \"120+\", same format).\n    \"DOB\", // Date of Birth, in MM/DD/YYYY format.\n    \"Squat 1\", // Units unspecified, but seem to be kg.\n    \"Squat 2\",\n    \"Squat 3\",\n    \"Bench 1\",\n    \"Bench 2\",\n    \"Bench 3\",\n    \"Deadlift 1\",\n    \"Deadlift 2\",\n    \"Deadlift 3\",\n    \"Event\", // In NextLifter format (PL, BO, etc.).\n    \"State\", // USA state of residence of the lifter, as abbreviation.\n    \"MemberID\",\n    \"Drug Test\" // \"Y\" if a test was performed, blank otherwise.\n  ];\n\n  const results: Array<CategoryResults> = getFinalResults(\n    state.registration.entries,\n    state.meet.weightClassesKgMen,\n    state.meet.weightClassesKgWomen,\n    state.meet.weightClassesKgMx,\n    state.meet.combineSleevesAndWraps\n  );\n\n  for (let i = 0; i < results.length; i++) {\n    const { category, orderedEntries } = results[i];\n\n    for (let j = 0; j < orderedEntries.length; j++) {\n      addDataRow(csv, category, orderedEntries[j]);\n    }\n  }\n\n  return csv.toString();\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The parent component of the Results page, contained by the ResultsContainer.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\nimport Card from \"react-bootstrap/Card\";\nimport FormControl from \"react-bootstrap/FormControl\";\n\nimport { saveAs } from \"file-saver\";\n\nimport ByDivision from \"./ByDivision\";\nimport ByPoints from \"./ByPoints\";\nimport ErrorModal from \"../ErrorModal\";\n\nimport { mergePlatform } from \"../../actions/registrationActions\";\n\nimport { liftingPresentOnPlatform, getWhetherPlatformsHaveLifted } from \"../../logic/entry\";\nimport { exportAsOplCsv } from \"../../logic/export/oplcsv\";\nimport { exportAsUSAPLCsv } from \"../../logic/export/usapl\";\n\nimport { Entry } from \"../../types/dataTypes\";\nimport { GlobalState } from \"../../types/stateTypes\";\n\nimport styles from \"./ResultsView.module.scss\";\nimport { FormControlTypeHack, checkExhausted, assertString } from \"../../types/utils\";\nimport { Dispatch } from \"redux\";\nconst marginStyle = { margin: \"0 20px 0 20px\" };\n\ninterface StateProps {\n  global: GlobalState;\n}\n\ninterface DispatchProps {\n  mergePlatform: (day: number, platform: number, platformEntries: Array<Entry>) => void;\n}\n\ntype Props = StateProps & DispatchProps;\ntype ResultsBy = \"Division\" | \"Points\" | \"BestMastersLifter\" | \"BestJuniorsLifter\";\n\ninterface InternalState {\n  day: number;\n  by: ResultsBy;\n  // Controls the ErrorModal popup. Shown when error !== \"\".\n  error: string;\n}\n\n// FIXME: Unfortunate use of globals :/ I don't have a better idea.\n// This is to pass information from the merge button click handler to the\n// file loader click handler.\nlet globalMergeDay: number = 0;\nlet globalMergePlatform: number = 0;\n\nclass ResultsView extends React.Component<Props, InternalState> {\n  constructor(props: Props) {\n    super(props);\n\n    this.handleDayChange = this.handleDayChange.bind(this);\n    this.handleByChange = this.handleByChange.bind(this);\n    this.handleExportAsOplCsvClick = this.handleExportAsOplCsvClick.bind(this);\n    this.handleExportAsUSAPLCsvClick = this.handleExportAsUSAPLCsvClick.bind(this);\n    this.handleExportPlatformClick = this.handleExportPlatformClick.bind(this);\n    this.handleMergePlatformClick = this.handleMergePlatformClick.bind(this);\n    this.handleLoadFileInput = this.handleLoadFileInput.bind(this);\n    this.closeErrorModal = this.closeErrorModal.bind(this);\n\n    this.state = {\n      day: 0, // Meaning \"all\". Flow complained about mixing numbers and strings.\n      by: \"Division\",\n      error: \"\"\n    };\n  }\n\n  makeDayOptions = () => {\n    let options = [\n      <option key={\"all\"} value={0}>\n        All Days Together\n      </option>\n    ];\n    for (let day = 1; day <= this.props.global.meet.lengthDays; day++) {\n      options.push(\n        <option key={day} value={day}>\n          Just Day {day}\n        </option>\n      );\n    }\n    return options;\n  };\n\n  handleDayChange = (event: React.FormEvent<FormControlTypeHack>) => {\n    const day = Number(event.currentTarget.value);\n    if (this.state.day !== day) {\n      this.setState({ day: day });\n    }\n  };\n\n  handleByChange = (event: React.FormEvent<FormControlTypeHack>) => {\n    const by = event.currentTarget.value;\n    if (this.state.by !== by && assertString(by) && assertValidResultsBy(by)) {\n      this.setState({ by: by });\n    }\n  };\n\n  handleExportAsOplCsvClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    // TODO: Share this logic with HomeContainer.\n    let meetname = this.props.global.meet.name;\n    if (meetname === \"\") {\n      meetname = \"Unnamed-Meet\";\n    }\n    meetname = meetname.replace(/ /g, \"-\");\n\n    const csv: string = exportAsOplCsv(this.props.global);\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8\" });\n    saveAs(blob, meetname + \".opl.csv\");\n  };\n\n  handleExportAsUSAPLCsvClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    // TODO: Share this logic with handleExportAsOplCsvClick.\n    let meetname = this.props.global.meet.name;\n    if (meetname === \"\") {\n      meetname = \"Unnamed-Meet\";\n    }\n    meetname = meetname.replace(/ /g, \"-\");\n\n    const csv: string = exportAsUSAPLCsv(this.props.global);\n    const blob = new Blob([csv], { type: \"text/csv;charset=utf-8\" });\n    saveAs(blob, meetname + \".USAPL.csv\");\n  };\n\n  handleExportPlatformClick = (day: number, platform: number, event: Object) => {\n    // TODO: Share this logic with handleExportAsOplCsvClick.\n    let meetname = this.props.global.meet.name;\n    if (meetname === \"\") {\n      meetname = \"Unnamed-Meet\";\n    }\n    meetname = meetname.replace(/ /g, \"-\");\n    const exportname = meetname + \"-Day-\" + day + \"-Platform-\" + platform;\n\n    const state = JSON.stringify(this.props.global);\n    const blob = new Blob([state], { type: \"application/json;charset=utf-8\" });\n    saveAs(blob, exportname + \".export.openlifter\");\n  };\n\n  // The file input is hidden, and we want to use a button to activate it.\n  // This event handler makes a proxy call to the *real* event handler.\n  handleMergePlatformClick = (day: number, platform: number, event: Object) => {\n    const loadHelper = document.getElementById(\"loadhelper\");\n    if (loadHelper !== null) {\n      globalMergeDay = day;\n      globalMergePlatform = platform;\n      loadHelper.click();\n    }\n  };\n\n  // Called when a file is selected for merging platform data.\n  handleLoadFileInput = () => {\n    const loadHelper = document.getElementById(\"loadhelper\");\n    if (loadHelper === null || !(loadHelper instanceof HTMLInputElement) || loadHelper.files === null) {\n      return;\n    }\n\n    // Get the (day, platform) from global state.\n    const day: number = globalMergeDay;\n    const platform: number = globalMergePlatform;\n\n    // Remember the props in the onload() closure.\n    let props = this.props;\n\n    let rememberThis = this;\n    const selectedFile = loadHelper.files[0];\n    let reader = new FileReader();\n    reader.onload = () => {\n      let error: string | null = null;\n\n      // If this occurs, we've introduced a bug when initiating the file reader, or the read failed.\n      // Add this check as a guard so the typing is narrowed\n      if (typeof reader.result !== \"string\") {\n        window.alert(\"Unable to load file: an unexpected internal error occured\");\n        return;\n      }\n\n      try {\n        let obj: GlobalState = JSON.parse(reader.result);\n\n        // stateVersion must match.\n        if (obj.versions.stateVersion !== props.global.versions.stateVersion) {\n          error =\n            \"This meet uses data version \" +\n            props.global.versions.stateVersion +\n            \", but the selected file uses data version \" +\n            obj.versions.stateVersion;\n        } else if (obj.meet.name !== props.global.meet.name) {\n          // The meet name must match, for sanity checking.\n          error =\n            'This meet is named \"' +\n            props.global.meet.name +\n            '\", but the selected file is for the meet \"' +\n            obj.meet.name +\n            '\". Might be the wrong competition?';\n        } else if (!liftingPresentOnPlatform(obj.registration.entries, day, platform)) {\n          // The meet must actually contain data from the given (day, platform).\n          error = \"The selected file doesn't have any lifting data for Day \" + day + \" Platform \" + platform + \".\";\n        } else {\n          // Sanity checks passed: fire off a mergePlatform action!\n          const platformEntries = obj.registration.entries.filter(e => {\n            return e.day === day && e.platform === platform;\n          });\n          props.mergePlatform(day, platform, platformEntries);\n        }\n      } catch (err) {\n        error = \"Couldn't parse JSON.\";\n      }\n\n      if (typeof error === \"string\") {\n        rememberThis.setState({ error: error });\n      }\n    };\n    reader.readAsText(selectedFile);\n  };\n\n  closeErrorModal = () => {\n    this.setState({ error: \"\" });\n  };\n\n  makePlatformMergeButtons = () => {\n    // Array accessed by platformsHaveLifted[day-1][platform-1].\n    const platformsHaveLifted: Array<Array<boolean>> = getWhetherPlatformsHaveLifted(\n      this.props.global.meet.platformsOnDays,\n      this.props.global.registration.entries\n    );\n\n    let forms = [];\n    const numDays = Math.min(this.props.global.meet.lengthDays, platformsHaveLifted.length);\n\n    for (let i = 0; i < numDays; i++) {\n      const liftedOnDay = platformsHaveLifted[i];\n\n      let buttons = [];\n      for (let j = 0; j < liftedOnDay.length; j++) {\n        const lifted = liftedOnDay[j];\n        const actionText = lifted === true ? \"Export\" : \"Merge\";\n        const variant = lifted === true ? \"success\" : \"warning\";\n        const marginStyle = j > 0 ? { marginLeft: \"14px\" } : undefined;\n        buttons.push(\n          <Button\n            key={i + \"-\" + j}\n            variant={variant}\n            style={marginStyle}\n            onClick={(e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n              lifted === true\n                ? this.handleExportPlatformClick(i + 1, j + 1, e)\n                : this.handleMergePlatformClick(i + 1, j + 1, e);\n            }}\n          >\n            {actionText} Day {i + 1} Platform {j + 1}\n          </Button>\n        );\n      }\n\n      forms.push(\n        <div key={i}>\n          <div>Combine Platforms for Day {i + 1}</div>\n          <div>{buttons}</div>\n          {i < platformsHaveLifted.length - 1 ? <br /> : null}\n        </div>\n      );\n    }\n\n    return forms;\n  };\n\n  render() {\n    let results = null;\n    switch (this.state.by) {\n      case \"Division\":\n        results = <ByDivision key={this.state.day} day={this.state.day} />;\n        break;\n      case \"Points\":\n        results = (\n          <ByPoints key={this.state.day} day={this.state.day} ageCoefficients=\"None\" agePointsCategory=\"BestLifter\" />\n        );\n        break;\n      case \"BestMastersLifter\":\n        results = (\n          <ByPoints\n            key={this.state.day}\n            day={this.state.day}\n            ageCoefficients={this.props.global.meet.ageCoefficients}\n            agePointsCategory=\"BestMastersLifter\"\n          />\n        );\n        break;\n      case \"BestJuniorsLifter\":\n        results = (\n          <ByPoints\n            key={this.state.day}\n            day={this.state.day}\n            ageCoefficients={this.props.global.meet.ageCoefficients}\n            agePointsCategory=\"BestJuniorsLifter\"\n          />\n        );\n        break;\n      default:\n        break;\n    }\n\n    let daySelector = null;\n    if (this.props.global.meet.lengthDays > 1) {\n      daySelector = (\n        <FormControl\n          defaultValue={this.state.day.toString()}\n          as=\"select\"\n          onChange={this.handleDayChange}\n          className={`custom-select ${styles.dropdown}`}\n        >\n          {this.makeDayOptions()}\n        </FormControl>\n      );\n    }\n\n    return (\n      <div style={marginStyle}>\n        <ErrorModal\n          error={this.state.error}\n          title=\"Merge Error\"\n          show={this.state.error !== \"\"}\n          close={this.closeErrorModal}\n        />\n\n        <Card border=\"primary\">\n          <Card.Header>Merge Platforms</Card.Header>\n          <Card.Body>\n            <div style={{ fontWeight: \"bold\" }}>Merging platforms will overwrite data. Please save before merging.</div>\n            <br />\n            {this.makePlatformMergeButtons()}\n          </Card.Body>\n        </Card>\n\n        <Card>\n          <Card.Header>Export Official Results</Card.Header>\n          <Card.Body>\n            <Button onClick={this.handleExportAsOplCsvClick}>Export for OpenPowerlifting (in LBS)</Button>\n\n            <Button onClick={this.handleExportAsUSAPLCsvClick} style={{ marginLeft: \"14px\" }}>\n              Export for USAPL\n            </Button>\n          </Card.Body>\n        </Card>\n\n        <Card border=\"info\">\n          <Card.Header>Results For...</Card.Header>\n          <Card.Body className={styles.controlCard}>\n            {daySelector}\n\n            <FormControl\n              defaultValue={this.state.by}\n              as=\"select\"\n              onChange={this.handleByChange}\n              className={`custom-select ${styles.dropdown}`}\n              style={{ marginLeft: \"14px\" }}\n            >\n              <option value=\"Division\">By Division</option>\n              {this.props.global.meet.ageCoefficients !== \"None\" ? (\n                <option value=\"BestJuniorsLifter\">Best Juniors Lifter</option>\n              ) : null}\n              {this.props.global.meet.ageCoefficients !== \"None\" ? (\n                <option value=\"BestMastersLifter\">Best Masters Lifter</option>\n              ) : null}\n              <option value=\"Points\">Best Lifter</option>\n            </FormControl>\n          </Card.Body>\n        </Card>\n\n        {results}\n\n        <input\n          id=\"loadhelper\"\n          type=\"file\"\n          accept=\".openlifter,.openlifter.txt\"\n          style={{ display: \"none\" }}\n          onChange={this.handleLoadFileInput}\n        />\n      </div>\n    );\n  }\n}\n\nconst assertValidResultsBy = (value: string): value is ResultsBy => {\n  const resultsBy = value as ResultsBy;\n  switch (resultsBy) {\n    case \"BestJuniorsLifter\":\n    case \"BestMastersLifter\":\n    case \"Division\":\n    case \"Points\":\n      return true;\n    default:\n      checkExhausted(resultsBy);\n      throw new Error(`Expected a valid value for ResultsBy. Got \"${value}\"`);\n  }\n};\n\nconst mapStateToProps = (state: GlobalState): StateProps => {\n  return {\n    global: state\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => {\n  return {\n    mergePlatform: (day, platform, platformEntries) => dispatch(mergePlatform(day, platform, platformEntries))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(ResultsView);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Container for the Results page.\n\nimport React from \"react\";\nimport ResultsView from \"../components/results/ResultsView\";\n\nclass ResultsContainer extends React.Component<{}> {\n  render() {\n    return <ResultsView />;\n  }\n}\n\nexport default ResultsContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Common functions shared by the Randomize feature.\n\n// Generate a gibberish string, between 0-11 characters.\nexport const randomString = (): string => {\n  // Converts each digit to a value in base 36.\n  return Math.random()\n    .toString(36)\n    .substr(2);\n};\n\n// Generate a random integer between max and min, inclusive.\nexport const randomInt = (min: number, max: number) => {\n  return Math.floor(Math.random() * (max - min + 1)) + min;\n};\n\n// Generate a random floating-point number with a set number of fractional digits.\nexport const randomFixedPoint = (min: number, max: number, fixedPoints: number) => {\n  const power = Math.pow(10, fixedPoints);\n\n  // Construct an integer from [0, (max - min + 1) * 10^fixedPoints].\n  const k = Math.floor(Math.random() * (max - min + 1) * power);\n\n  // Translate it back to normal space.\n  return k / power + min;\n};\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Randomizes the Meet Setup state, for debugging.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\n\nimport { randomString, randomInt, randomFixedPoint } from \"./RandomizeHelpers\";\n\nimport {\n  setDivisions,\n  setFederation,\n  setLengthDays,\n  setMeetName,\n  setPlatformsOnDays,\n  setWeightClasses\n} from \"../../actions/meetSetupActions\";\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { Dispatch } from \"redux\";\nimport { Sex } from \"../../types/dataTypes\";\n\nconst NonsenseFederations = [\n  \"CTHULHU\",\n  \"USPLAWH\",\n  \"FIREFOX\",\n  \"PIZZAHUT\",\n  \"50% RAW\",\n  \"TODDLERS\",\n  \"COFFEE\",\n  \"THEBORG\",\n  \"LETITSNOW\"\n];\n\nconst NonsenseDivisions = [\"Masters\", \"Juniors\", \"Lawyers\", \"Infants\", \"Turtles\", \"Rabbits\"];\n\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nclass RandomizeMeetSetupButton extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.randomizeMeetSetup = this.randomizeMeetSetup.bind(this);\n  }\n\n  randomizeMeetSetup() {\n    // Set a gibberish MeetName.\n    // ==========================================\n    this.props.setMeetName(randomString() + randomString());\n\n    // Generate a nonsense federation.\n    // ==========================================\n    const fed = NonsenseFederations[randomInt(0, NonsenseFederations.length - 1)];\n    this.props.setFederation(fed);\n\n    // Generate nonsense weight classes.\n    // ==========================================\n    const numClassesMen = randomInt(5, 12);\n    const numClassesWomen = randomInt(4, 8);\n\n    let classesMen = [];\n    for (let i = 0; i < numClassesMen; i++) {\n      classesMen.push(randomFixedPoint(40, 145, 1));\n    }\n    classesMen = classesMen.sort((a, b) => Number(a) - Number(b));\n\n    let classesWomen = [];\n    for (let i = 0; i < numClassesWomen; i++) {\n      classesWomen.push(randomFixedPoint(35, 110, 1));\n    }\n    classesWomen = classesWomen.sort((a, b) => Number(a) - Number(b));\n\n    let classesMx = [];\n    for (let i = 0; i < numClassesWomen; i++) {\n      classesMx.push(randomFixedPoint(40, 120, 1));\n    }\n    classesMx = classesMx.sort((a, b) => Number(a) - Number(b));\n\n    this.props.setWeightClasses(\"M\", classesMen);\n    this.props.setWeightClasses(\"F\", classesWomen);\n    this.props.setWeightClasses(\"Mx\", classesMx);\n\n    // Generate nonsense days and platforms.\n    // ==========================================\n    const numDays = randomInt(1, 4);\n    this.props.setLengthDays(numDays);\n\n    for (let i = 0; i < numDays; i++) {\n      const day = i + 1;\n      const numPlatforms = randomInt(1, 2);\n      this.props.setPlatformsOnDays(day, numPlatforms);\n    }\n\n    // Generate nonsense divisions.\n    // ==========================================\n    const numDivisions = randomInt(1, 20);\n    let divisions = [];\n    for (let i = 0; i < numDivisions; i++) {\n      let div = NonsenseDivisions[randomInt(0, NonsenseDivisions.length - 1)];\n      if (Math.random() > 0.5) {\n        const age_lower = randomInt(1, 40);\n        const age_upper = randomInt(age_lower + 1, 99);\n        div = div + \" \" + String(age_lower) + \"-\" + String(age_upper);\n      }\n\n      // Disallow repeat divisions.\n      if (divisions.indexOf(div) === -1) {\n        divisions.push(div);\n      }\n    }\n    this.props.setDivisions(divisions);\n  }\n\n  render() {\n    return <Button onClick={this.randomizeMeetSetup}>Meet Setup</Button>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState) => ({\n  ...state\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    setDivisions: (divisions: Array<string>) => dispatch(setDivisions(divisions)),\n    setFederation: (federation: string) => dispatch(setFederation(federation)),\n    setLengthDays: (length: number) => dispatch(setLengthDays(length)),\n    setMeetName: (name: string) => dispatch(setMeetName(name)),\n    setPlatformsOnDays: (day: number, count: number) => dispatch(setPlatformsOnDays(day, count)),\n    setWeightClasses: (sex: Sex, classesKg: number[]) => dispatch(setWeightClasses(sex, classesKg))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RandomizeMeetSetupButton);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Randomizes the Registration page, for debugging.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\n\nimport Button from \"react-bootstrap/Button\";\n\nimport { randomInt } from \"./RandomizeHelpers\";\nimport { newRegistration, deleteRegistration } from \"../../actions/registrationActions\";\n\nimport { GlobalState } from \"../../types/stateTypes\";\nimport { Event, Entry, Sex, Equipment, Flight } from \"../../types/dataTypes\";\n\nconst NonsenseFirstNames = [\n  \"Aragorn\",\n  \"Arwen\",\n  \"Aule\",\n  \"Balin\",\n  \"Beorn\",\n  \"Beregond\",\n  \"Bert\",\n  \"Bifur\",\n  \"Bilbo\",\n  \"Bofur\",\n  \"Bolg\",\n  \"Bombur\",\n  \"Boromir\",\n  \"Bregalad\",\n  \"Bullroarer\",\n  \"Bungo\",\n  \"Carc\",\n  \"Celeborn\",\n  \"Dain\",\n  \"Denethor\",\n  \"Dori\",\n  \"Dwalin\",\n  \"Elrohir\",\n  \"Elrond\",\n  \"Eomer\",\n  \"Eowyn\",\n  \"Este\",\n  \"Faramir\",\n  \"Fili\",\n  \"Fredegar\",\n  \"Frodo\",\n  \"Galadriel\",\n  \"Galion\",\n  \"Gandalf\",\n  \"Gimli\",\n  \"Gloin\",\n  \"Glorfindel\",\n  \"Golfimbul\",\n  \"Gollum\",\n  \"Gothmog\",\n  \"Grima\",\n  \"Imrahil\",\n  \"Kili\",\n  \"Legolas\",\n  \"Lorien\",\n  \"Mandos\",\n  \"Manwe\",\n  \"Melkor\",\n  \"Meriadoc\",\n  \"Nessa\",\n  \"Nienna\",\n  \"Nori\",\n  \"Oin\",\n  \"Ori\",\n  \"Orome\",\n  \"Peregrin\",\n  \"Pippin\",\n  \"Radagast\",\n  \"Roac\",\n  \"Samwise\",\n  \"Saruman\",\n  \"Sauron\",\n  \"Shelob\",\n  \"Smaug\",\n  \"Theoden\",\n  \"Thorin\",\n  \"Thranduil\",\n  \"Tom\",\n  \"Treebeard\",\n  \"Tulkas\",\n  \"Ulmo\",\n  \"Vaire\",\n  \"Vana\",\n  \"Varda\",\n  \"William\",\n  \"Yavanna\"\n];\n\nconst NonsenseLastNames = [\n  \"Black\",\n  \"Burbage\",\n  \"Carrow\",\n  \"Cattermole\",\n  \"Chang\",\n  \"Clearwater\",\n  \"Crabbe\",\n  \"Creevey\",\n  \"Crouch\",\n  \"Delacour\",\n  \"Diggory\",\n  \"Dumbledore\",\n  \"Dursley\",\n  \"Edgecombe\",\n  \"Filch\",\n  \"Flitwick\",\n  \"Fudge\",\n  \"Goyle\",\n  \"Granger\",\n  \"Grindelwald\",\n  \"Hagrid\",\n  \"Hufflepuff\",\n  \"Kettleburn\",\n  \"Lockhart\",\n  \"Longbottom\",\n  \"Lovegood\",\n  \"Lupin\",\n  \"Malfoy\",\n  \"Marchbanks\",\n  \"McGonagall\",\n  \"McLaggen\",\n  \"Moody\",\n  \"Nott\",\n  \"Ogden\",\n  \"Ollivander\",\n  \"Parkinson\",\n  \"Pettigrew\",\n  \"Peverell\",\n  \"Pince\",\n  \"Podmore\",\n  \"Pomfrey\",\n  \"Potter\",\n  \"Quirrell\",\n  \"Riddle\",\n  \"Rookwood\",\n  \"Rowle\",\n  \"Runcorn\",\n  \"Scrimgeour\",\n  \"Shacklebolt\",\n  \"Shunpike\",\n  \"Sinistra\",\n  \"Slughorn\",\n  \"Slytherin\",\n  \"Snape\",\n  \"Spinnet\",\n  \"Sprout\",\n  \"Thicknesse\",\n  \"Tonks\",\n  \"Trelawney\",\n  \"Twycross\",\n  \"Umbridge\",\n  \"Vance\",\n  \"Voldemort\",\n  \"Weasley\",\n  \"Wood\",\n  \"Yaxley\",\n  \"Zabini\"\n];\n\ntype Props = ReturnType<typeof mapStateToProps> & ReturnType<typeof mapDispatchToProps>;\n\nclass RandomizeRegistrationButton extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.deleteExistingRegistrations = this.deleteExistingRegistrations.bind(this);\n    this.generateEntries = this.generateEntries.bind(this);\n    this.randomizeRegistration = this.randomizeRegistration.bind(this);\n  }\n\n  deleteExistingRegistrations() {\n    const entryIds = this.props.registration.entries.map(e => e.id);\n    for (let i = 0; i < entryIds.length; i++) {\n      this.props.deleteRegistration(entryIds[i]);\n    }\n  }\n\n  // Generate entries in a flight together, in case we want to give them\n  // similar properties.\n  generateEntries(day: number, platform: number, flight: Flight) {\n    const numLifters = randomInt(6, 18);\n\n    for (let i = 0; i < numLifters; i++) {\n      // Set a nonsense Name.\n      // ==========================================\n      const firstName = NonsenseFirstNames[randomInt(0, NonsenseFirstNames.length - 1)];\n      const lastName = NonsenseLastNames[randomInt(0, NonsenseLastNames.length - 1)];\n      const name = firstName + \" \" + lastName;\n\n      // Set a random Sex.\n      // ==========================================\n      const sexes: Sex[] = [\"M\", \"F\", \"Mx\"];\n      const sex: Sex = sexes[randomInt(0, sexes.length - 1)];\n\n      // Generate random events, making most lifters SBD.\n      // ==========================================\n      let events: Event[] = [];\n      if (Math.random() < 0.5) {\n        events.push(\"SBD\");\n      }\n      if (Math.random() < 0.1) {\n        events.push(\"BD\");\n      }\n      if (Math.random() < 0.1) {\n        events.push(\"S\");\n      }\n      if (Math.random() < 0.1) {\n        events.push(\"B\");\n      }\n      if (Math.random() < 0.1) {\n        events.push(\"D\");\n      }\n      if (events.length === 0) {\n        events.push(\"SBD\");\n      }\n\n      // Generate random equipment, making most lifters SBD,\n      // being careful that it matches their events.\n      // ==========================================\n      let hasSquat = false;\n      for (let i = 0; i < events.length; i++) {\n        if (events[i].includes(\"S\")) {\n          hasSquat = true;\n          break;\n        }\n      }\n\n      const equipmentSelect = Math.random();\n      let equipment: Equipment = \"Sleeves\";\n      if (equipmentSelect < 0.7) {\n        // Nothing, sleeves default case.\n      } else if (equipmentSelect < 0.9) {\n        if (hasSquat) {\n          equipment = \"Wraps\";\n        }\n      } else if (equipmentSelect < 0.95) {\n        equipment = \"Single-ply\";\n      } else {\n        equipment = \"Multi-ply\";\n      }\n\n      // File into random divisions.\n      // ==========================================\n      let divisions = [];\n      if (this.props.meet.divisions.length > 0) {\n        const divisionsUpperBound = Math.max(1, this.props.meet.divisions.length - 1);\n        const numDivisions = randomInt(1, divisionsUpperBound);\n\n        // List of remaining available divisions.\n        let divchooser = this.props.meet.divisions.slice();\n\n        for (let i = 0; i < numDivisions; i++) {\n          const choice = randomInt(0, divchooser.length - 1);\n          divisions.push(divchooser[choice]);\n\n          // Delete the choice from the list of available divisions.\n          divchooser.splice(choice, 1);\n        }\n      }\n\n      this.props.newRegistration({\n        day: day,\n        platform: platform,\n        flight: flight,\n        name: name,\n        sex: sex,\n        events: events,\n        equipment: equipment,\n        divisions: divisions\n      });\n    }\n  }\n\n  randomizeRegistration() {\n    const FLIGHTCHARS: Flight[] = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"];\n\n    this.deleteExistingRegistrations();\n    for (let day = 1; day <= this.props.meet.lengthDays; day++) {\n      const numPlatforms = this.props.meet.platformsOnDays[day - 1];\n      for (let platform = 1; platform <= numPlatforms; platform++) {\n        const numFlights = randomInt(1, 3);\n        for (let flight = 0; flight < numFlights; flight++) {\n          this.generateEntries(day, platform, FLIGHTCHARS[flight]);\n        }\n      }\n    }\n  }\n\n  render() {\n    return <Button onClick={this.randomizeRegistration}>Registration</Button>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState) => ({\n  ...state\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch) => {\n  return {\n    newRegistration: (obj: Partial<Entry>) => dispatch(newRegistration(obj)),\n    deleteRegistration: (entryId: number) => dispatch(deleteRegistration(entryId))\n  };\n};\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RandomizeRegistrationButton);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Randomizes the Registration page, for debugging.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\nimport { Dispatch } from \"redux\";\n\nimport Button from \"react-bootstrap/Button\";\n\nimport { randomInt, randomFixedPoint } from \"./RandomizeHelpers\";\nimport { lbs2kg } from \"../../logic/units\";\n\nimport { updateRegistration } from \"../../actions/registrationActions\";\nimport { enterAttempt } from \"../../actions/liftingActions\";\n\nimport { GlobalState, MeetState, RegistrationState } from \"../../types/stateTypes\";\nimport { Lift } from \"../../types/dataTypes\";\n\ninterface StateProps {\n  meet: MeetState;\n  registration: RegistrationState;\n}\n\ninterface DispatchProps {\n  updateRegistration: (entryId: number, obj: Object) => void;\n  enterAttempt: (entryId: number, lift: Lift, attemptOneIndexed: number, weightKg: number) => void;\n}\n\ntype Props = StateProps & DispatchProps;\n\nclass RandomizeWeighinsButton extends React.Component<Props> {\n  constructor(props: Props) {\n    super(props);\n    this.randomizeWeighins = this.randomizeWeighins.bind(this);\n  }\n\n  randomAttempt = () => {\n    const multiple = 2.5;\n    if (this.props.meet.inKg) {\n      return Math.floor(randomFixedPoint(25, 360, 1) / multiple) * multiple;\n    } else {\n      return lbs2kg(Math.floor(randomFixedPoint(55, 800, 1) / multiple) * multiple);\n    }\n  };\n\n  randomizeWeighins = () => {\n    const entries = this.props.registration.entries;\n    const inKg: boolean = this.props.meet.inKg;\n\n    for (let i = 0; i < entries.length; i++) {\n      const entry = entries[i];\n\n      // Get a random bodyweight.\n      // ==========================================\n      const bodyweightKg = inKg ? randomFixedPoint(20, 150, 1) : lbs2kg(randomFixedPoint(40, 320, 1));\n      this.props.updateRegistration(entry.id, {\n        bodyweightKg: bodyweightKg\n      });\n\n      // Get a random age.\n      const age = randomInt(5, 79);\n      this.props.updateRegistration(entry.id, {\n        age: age\n      });\n\n      // Figure out which events we're generating information for.\n      // ==========================================\n      let hasSquat = false;\n      let hasBench = false;\n      let hasDeadlift = false;\n      for (let j = 0; j < entry.events.length; j++) {\n        const e = entry.events[j];\n        if (e.includes(\"S\")) {\n          hasSquat = true;\n        }\n        if (e.includes(\"B\")) {\n          hasBench = true;\n        }\n        if (e.includes(\"D\")) {\n          hasDeadlift = true;\n        }\n      }\n\n      // Set attempts.\n      // ==========================================\n      if (hasSquat) {\n        this.props.enterAttempt(entry.id, \"S\", 1, this.randomAttempt());\n      }\n      if (hasBench) {\n        this.props.enterAttempt(entry.id, \"B\", 1, this.randomAttempt());\n      }\n      if (hasDeadlift) {\n        this.props.enterAttempt(entry.id, \"D\", 1, this.randomAttempt());\n      }\n\n      // Set rack info.\n      // ==========================================\n      if (hasSquat) {\n        const height = String(randomInt(2, 18));\n        const pos = Math.random() < 0.9 ? \"out\" : \"in\";\n        this.props.updateRegistration(entry.id, {\n          squatRackInfo: height + pos\n        });\n      }\n\n      if (hasBench) {\n        const height = String(randomInt(0, 12));\n        const safety = String(randomInt(0, 4));\n        this.props.updateRegistration(entry.id, {\n          benchRackInfo: height + \"/\" + safety\n        });\n      }\n    }\n  };\n\n  render() {\n    return <Button onClick={this.randomizeWeighins}>Weigh-ins</Button>;\n  }\n}\n\nconst mapStateToProps = (state: GlobalState): StateProps => ({\n  meet: state.meet,\n  registration: state.registration\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  updateRegistration: (entryId, obj) => dispatch(updateRegistration(entryId, obj)),\n  enterAttempt: (entryId, lift, attemptOneIndexed, weightKg) =>\n    dispatch(enterAttempt(entryId, lift, attemptOneIndexed, weightKg))\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(RandomizeWeighinsButton);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Tools for manipulating state information to aid debugging.\n\nimport React from \"react\";\nimport { connect } from \"react-redux\";\n\nimport Button from \"react-bootstrap/Button\";\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\";\nimport Card from \"react-bootstrap/Card\";\n\nimport RandomizeMeetSetupButton from \"./RandomizeMeetSetup\";\nimport RandomizeRegistrationButton from \"./RandomizeRegistration\";\nimport RandomizeWeighinsButton from \"./RandomizeWeighins\";\n\nimport { GlobalState } from \"../../types/stateTypes\";\n\nclass StateTools extends React.Component<ReturnType<typeof mapStateToProps>> {\n  // The simplest possible way to implement a Reset button.\n  reInitializeRedux = () => {\n    localStorage.clear();\n    window.location.reload();\n  };\n\n  render() {\n    return (\n      <div>\n        <Card>\n          <Card.Header>Generate Random Valid Data</Card.Header>\n          <Card.Body>\n            <Button style={{ marginRight: \"15px\" }} variant=\"danger\" onClick={this.reInitializeRedux}>\n              Reset\n            </Button>\n            <ButtonGroup>\n              <RandomizeMeetSetupButton />\n              <RandomizeRegistrationButton />\n              <RandomizeWeighinsButton />\n            </ButtonGroup>\n          </Card.Body>\n        </Card>\n\n        <Card border=\"info\">\n          <Card.Header>Redux State</Card.Header>\n          <Card.Body>\n            <pre>{JSON.stringify(this.props, null, 2)}</pre>\n          </Card.Body>\n        </Card>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state: GlobalState) => ({\n  ...state\n});\n\nexport default connect(\n  mapStateToProps,\n  null\n)(StateTools);\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// A page dedicated to debugging tools.\n\nimport React from \"react\";\nimport StateTools from \"../components/debug/StateTools\";\n\nconst DebugContainer = () => {\n  return (\n    <div style={{ marginRight: \"20px\", marginLeft: \"20px\" }}>\n      <StateTools />\n    </div>\n  );\n};\n\nexport default DebugContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\n\nimport Card from \"react-bootstrap/Card\";\nimport Col from \"react-bootstrap/Col\";\nimport Container from \"react-bootstrap/Container\";\nimport Row from \"react-bootstrap/Row\";\n\n// Extracted out so that <pre> renders linebreaks properly.\nconst licenseText =\n  \"This program is free software: you can redistribute it and/or modify\\n\" +\n  \"it under the terms of the GNU Affero General Public License as\\n\" +\n  \"published by the Free Software Foundation, either version 3 of the\\n\" +\n  \"License, or (at your option) any later version.\\n\" +\n  \"\\n\" +\n  \"This program is distributed in the hope that it will be useful,\\n\" +\n  \"but WITHOUT ANY WARRANTY; without even the implied warranty of\\n\" +\n  \"MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n\" +\n  \"GNU Affero General Public License for more details.\";\n\nclass AboutContainer extends React.Component<{}> {\n  render() {\n    return (\n      <Container>\n        <Row>\n          <Col md={6}>\n            <Card>\n              <Card.Header>Credits</Card.Header>\n              <Card.Body>\n                <p>\n                  OpenLifter is made by the{\" \"}\n                  <a href=\"https://www.openpowerlifting.org\" rel=\"noopener noreferrer\" target=\"_blank\">\n                    OpenPowerlifting project\n                  </a>\n                  .\n                </p>\n                <p>\n                  <ul>\n                    <li>Tommy DeFea &mdash; Graphic design</li>\n                    <li>Trystan Oakley &mdash; Testing</li>\n                    <li>Matt Pearce &mdash; Coefficient calculations</li>\n                    <li>Sean Stangl &mdash; Programming and maintenance</li>\n                    <li>Michael Vessia &mdash; Programming and maintenance</li>\n                    <li>Sarah Wellberg &mdash; UX design and testing</li>\n                  </ul>\n                </p>\n              </Card.Body>\n            </Card>\n          </Col>\n\n          <Col md={6}>\n            <Card>\n              <Card.Header>License</Card.Header>\n              <Card.Body>\n                <p>OpenLifter is Copyright (C) 2018-2019 The OpenPowerlifting Project.</p>\n                <p>OpenLifter is Free Software. Free Software grants you the following freedoms:</p>\n                <ol>\n                  <li>The freedom to run the program as you wish, for any purpose.</li>\n                  <li>The freedom to study how the program works, and change it as you wish.</li>\n                  <li>The freedom to redistribute copies so you can help others.</li>\n                  <li>The freedom to distribute copies of your modified versions to others.</li>\n                </ol>\n                <p>\n                  The AGPLv3+ license we use means that if you distribute this software or host it on a server, you must\n                  give your users the same rights we give you, including full source code. In addition, AGPLv3+ code\n                  must <i>remain</i> free/libre, and cannot be included in proprietary software or in free/libre\n                  software with a weaker or incompatible license.\n                </p>\n                <p>Here is the short license blurb:</p>\n                <pre>{licenseText}</pre>\n                <a href=\"https://www.gnu.org/licenses/agpl-3.0.en.html\" rel=\"noopener noreferrer\" target=\"_blank\">\n                  Full Text of the GNU Affero General Public License, Version 3\n                </a>\n                <br />\n                <a href=\"https://www.gnu.org/licenses/gpl-faq.html\" rel=\"noopener noreferrer\" target=\"_blank\">\n                  FAQ about GNU Licenses\n                </a>\n              </Card.Body>\n            </Card>\n          </Col>\n        </Row>\n      </Container>\n    );\n  }\n}\n\nexport default AboutContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// The RootContainer manually implements route parsing from GET parameters.\n//\n// The issue is that because OpenLifter is statically hosted, only the base\n// \"/\" route actually contains the index.html of the application. The other\n// routes (such as \"/lifting\") have index.html files that redirect to \"/\".\n//\n// We've changed things so that \"/lifting/index.html\" redirects to \"/?lifting\".\n// But React Router isn't able to route based on GET parameters.\n//\n// Therefore it's set up so that \"/\" routes to this RootContainer,\n// and the RootContainer inspects the GET parameters and renders the\n// appropriate container.\n\nimport React from \"react\";\n\nimport HomeContainer from \"./HomeContainer\";\nimport MeetSetupContainer from \"./MeetSetupContainer\";\nimport RegistrationContainer from \"./RegistrationContainer\";\nimport WeighinsContainer from \"./WeighinsContainer\";\nimport LiftingContainer from \"./LiftingContainer\";\nimport FlightOrderContainer from \"./FlightOrderContainer\";\nimport ResultsContainer from \"./ResultsContainer\";\nimport DebugContainer from \"./DebugContainer\";\nimport AboutContainer from \"./AboutContainer\";\n\nclass RootContainer extends React.Component {\n  render() {\n    if (typeof window.location.search !== \"string\") {\n      return <HomeContainer />;\n    }\n\n    switch (window.location.search) {\n      case \"?meet-setup\":\n        return <MeetSetupContainer />;\n      case \"?registration\":\n        return <RegistrationContainer />;\n      case \"?weigh-ins\":\n        return <WeighinsContainer />;\n      case \"?flight-order\":\n        return <FlightOrderContainer />;\n      case \"?lifting\":\n        return <LiftingContainer />;\n      case \"?results\":\n        return <ResultsContainer />;\n      case \"?debug\":\n        return <DebugContainer />;\n      case \"?about\":\n        return <AboutContainer />;\n      default:\n        return <HomeContainer />;\n    }\n  }\n}\n\nexport default RootContainer;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\n// Defines the Navigation component for navigating between pages using react-router.\n\nimport React from \"react\";\n\nimport Nav from \"react-bootstrap/Nav\";\nimport Navbar from \"react-bootstrap/Navbar\";\n\n// The LinkContainer is used to wrap Components that change the URL,\n// hooking them up with the Router.\nimport { LinkContainer } from \"react-router-bootstrap\";\n\nconst Navigation = () => {\n  return (\n    <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n      <Navbar.Brand>\n        <img alt=\"OpenLifter\" src=\"openlifter-white.svg\" height=\"20\" />\n      </Navbar.Brand>\n\n      {/* Navbar uses Toggle and Collapse to automatically create a hamburger menu\n          in case of overflow on small screens.*/}\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse>\n        <Nav>\n          <LinkContainer exact to=\"/\">\n            <Nav.Link>Home</Nav.Link>\n          </LinkContainer>\n          <LinkContainer to=\"/meet-setup\">\n            <Nav.Link>Meet Setup</Nav.Link>\n          </LinkContainer>\n          <LinkContainer to=\"/registration\">\n            <Nav.Link>Registration</Nav.Link>\n          </LinkContainer>\n          <LinkContainer to=\"/weigh-ins\">\n            <Nav.Link>Weigh-ins</Nav.Link>\n          </LinkContainer>\n          <LinkContainer to=\"/flight-order\">\n            <Nav.Link>Flight Order</Nav.Link>\n          </LinkContainer>\n          <LinkContainer to=\"/lifting\">\n            <Nav.Link>Lifting</Nav.Link>\n          </LinkContainer>\n          <LinkContainer to=\"/results\">\n            <Nav.Link>Results</Nav.Link>\n          </LinkContainer>\n          <LinkContainer to=\"/debug\">\n            <Nav.Link>Debug</Nav.Link>\n          </LinkContainer>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n};\n\nexport default Navigation;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport configureStore from \"./store\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport { addLocaleData } from \"react-intl\";\nimport es from \"react-intl/locale-data/es\";\nimport eo from \"react-intl/locale-data/eo\";\nimport OpenLifterIntlProvider from \"./components/translations/OpenLifterIntlProvider\";\n\nimport RootContainer from \"./containers/RootContainer\";\nimport MeetSetupContainer from \"./containers/MeetSetupContainer\";\nimport RegistrationContainer from \"./containers/RegistrationContainer\";\nimport WeighinsContainer from \"./containers/WeighinsContainer\";\nimport LiftingContainer from \"./containers/LiftingContainer\";\nimport FlightOrderContainer from \"./containers/FlightOrderContainer\";\nimport ResultsContainer from \"./containers/ResultsContainer\";\nimport DebugContainer from \"./containers/DebugContainer\";\nimport AboutContainer from \"./containers/AboutContainer\";\nimport Navigation from \"./components/Navigation\";\n\naddLocaleData([...es, ...eo]);\n\nclass App extends React.Component {\n  render() {\n    let { store, persistor } = configureStore();\n\n    return (\n      // Provider is a React component from the react-redux library.\n      // Its purpose is to \"provide\" the given store to its child components.\n      // Because the Provider wraps the whole App here, the store is global state.\n      //\n      // Switch iterates over its children (Routes) and renders the first one that matches the current path name\n      //\n      // Route takes a path and a component, and renders the given component if the current path matches the specified path.\n      <Provider store={store}>\n        <PersistGate loading={null} persistor={persistor}>\n          <OpenLifterIntlProvider>\n            <Router basename={process.env.REACT_APP_ROUTER_BASENAME}>\n              <div>\n                <Navigation />\n                <Switch>\n                  <Route exact path=\"/\" component={RootContainer} />\n                  <Route path=\"/meet-setup\" component={MeetSetupContainer} />\n                  <Route path=\"/registration\" component={RegistrationContainer} />\n                  <Route path=\"/weigh-ins\" component={WeighinsContainer} />\n                  <Route path=\"/flight-order\" component={FlightOrderContainer} />\n                  <Route path=\"/lifting\" component={LiftingContainer} />\n                  <Route path=\"/results\" component={ResultsContainer} />\n                  <Route path=\"/debug\" component={DebugContainer} />\n                  <Route path=\"/about\" component={AboutContainer} />\n                </Switch>\n              </div>\n            </Router>\n          </OpenLifterIntlProvider>\n        </PersistGate>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// vim: set ts=2 sts=2 sw=2 et:\n//\n// This file is part of OpenLifter, simple Powerlifting meet software.\n// Copyright (C) 2019 The OpenPowerlifting Project.\n//\n// This program is free software: you can redistribute it and/or modify\n// it under the terms of the GNU Affero General Public License as\n// published by the Free Software Foundation, either version 3 of the\n// License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Affero General Public License for more details.\n//\n// You should have received a copy of the GNU Affero General Public License\n// along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from \"./App\";\n\nimport \"./index.css\";\nimport \"./bootstrap-custom/bootstrap.scss\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement !== null) {\n  ReactDOM.render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"LeftCard_container__2XjgL\",\"activeCard\":\"LeftCard_activeCard__1M9K6\",\"loadingBar\":\"LeftCard_loadingBar__2trT4\",\"attemptText\":\"LeftCard_attemptText__1JsZg\",\"barArea\":\"LeftCard_barArea__3OqZl\",\"nextText\":\"LeftCard_nextText__2cIaN\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leftDivider\":\"OneFlightOrder_leftDivider__8pDMh\"};"],"sourceRoot":""}